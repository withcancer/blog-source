{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/images/banner.jpg","path":"images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1554616512283},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1554616512284},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1554616512284},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1554616512285},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1554616512285},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1554616512299},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1554616364849},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1554616512286},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1554616512286},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1554616512286},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1554616512287},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1554616512287},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1554616512287},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1554616512288},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1554616512288},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1554616512289},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1554616512288},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1554616512289},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1554616512289},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1554616512297},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1554616512297},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1554616512298},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1554616512298},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554616512298},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554616512299},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1554616512299},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1554616512300},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1554616512290},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1554616512290},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1554616512291},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1554616512291},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1554616512292},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1554616512292},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1554616512293},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1554616512293},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1554616512293},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1554616512293},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1554616512295},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1554616512296},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1554616512296},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1554616512297},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1554616512296},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1554616512297},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554616512315},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554616512315},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554616512316},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554616512316},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554616512317},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554616512317},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1554616512320},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1554616512321},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1554616512321},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1554616512301},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1554616512305},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1554616512315},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1554616512322},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1554616512294},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1554616512294},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1554616512294},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1554616512295},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1554616512295},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1554616512295},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554616512318},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1554616512318},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1554616512319},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1554616512319},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1554616512319},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1554616512320},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1554616512301},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1554616512302},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1554616512302},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1554616512303},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1554616512302},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1554616512303},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1554616512303},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1554616512304},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1554616512304},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1554616512304},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1554616512305},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1554616512305},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1554616512306},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1554616512307},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1554616512312},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1554616512312},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1554616512311},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1554616512314},{"_id":"themes/landscape-plus/.gitignore","hash":"b8c8d05421ab1f9fc31cd3fd8714bae1cdc0058a","modified":1554616688441},{"_id":"themes/landscape-plus/.gitattributes","hash":"0dd57adb042e3d90c780c1c8bc867ad547381c64","modified":1554616688441},{"_id":"themes/landscape-plus/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1554616688441},{"_id":"themes/landscape-plus/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1554616688441},{"_id":"themes/landscape-plus/README.md","hash":"8dcbf4191fbac4bdeee2e03dcd4d0fea6162e335","modified":1554616688441},{"_id":"themes/landscape-plus/_config.yml","hash":"5f81b63e95e49bf63e47e7254ed2d43375152f76","modified":1554616688441},{"_id":"themes/landscape-plus/package.json","hash":"5e1d9691a353097490e79c632563f1381c4a7b45","modified":1554616688451},{"_id":"themes/landscape-plus/.git/config","hash":"daa69ed4b9634892f092409e5785a6863615f72f","modified":1554616688431},{"_id":"themes/landscape-plus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554616688421},{"_id":"themes/landscape-plus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554616679864},{"_id":"themes/landscape-plus/.git/index","hash":"25c3f08ba836ba696388eee19403428d41d83387","modified":1554616688471},{"_id":"themes/landscape-plus/.git/packed-refs","hash":"fc4264ad7a3a38fc9bed022ad078fb6eb7511143","modified":1554616688421},{"_id":"themes/landscape-plus/languages/default.yml","hash":"e5dbafe7435258ffe14ce9bfaa4ae811c3d051a6","modified":1554616688441},{"_id":"themes/landscape-plus/languages/zh-CN.yml","hash":"f224865524474f40b2b632131a436c39aa2b6fbb","modified":1554616688441},{"_id":"themes/landscape-plus/languages/zh-TW.yml","hash":"2e6324ae793cb5210de5316454e934086415ae06","modified":1554616688441},{"_id":"themes/landscape-plus/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1554616688451},{"_id":"themes/landscape-plus/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1554616688451},{"_id":"themes/landscape-plus/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1554616688451},{"_id":"themes/landscape-plus/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554616688451},{"_id":"themes/landscape-plus/layout/layout.ejs","hash":"80ecd8cce6b9e57ca707982effada5ac6f887cf5","modified":1554616688451},{"_id":"themes/landscape-plus/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554616688451},{"_id":"themes/landscape-plus/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1554616688451},{"_id":"themes/landscape-plus/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/bdshare.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554616688451},{"_id":"themes/landscape-plus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554616679864},{"_id":"themes/landscape-plus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554616679864},{"_id":"themes/landscape-plus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554616679864},{"_id":"themes/landscape-plus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554616679864},{"_id":"themes/landscape-plus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554616679864},{"_id":"themes/landscape-plus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554616679864},{"_id":"themes/landscape-plus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554616679864},{"_id":"themes/landscape-plus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554616679864},{"_id":"themes/landscape-plus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554616679874},{"_id":"themes/landscape-plus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554616679874},{"_id":"themes/landscape-plus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554616679874},{"_id":"themes/landscape-plus/.git/logs/HEAD","hash":"548e2b42157824564ae5d84b63a843e9d8b6b2ba","modified":1554616688421},{"_id":"themes/landscape-plus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554616679874},{"_id":"themes/landscape-plus/layout/_partial/after-footer.ejs","hash":"a4a21b5b6f20d73fe01c8bb7dd808867c3923aba","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/archive.ejs","hash":"14ba3e38ce5225c0c621e6bde73f03a8ae67ff06","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/article.ejs","hash":"3893ab723acf278400e84a2c43a1046fc46e180d","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/footer.ejs","hash":"e42c175af969d371cf3765356d43838abc4bda11","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/google-analytics.ejs","hash":"ade81710027f55371b1229548fee0754e09b07b6","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/head.ejs","hash":"51d776d74045b8f26ce32e71b5e74ba6761fb8fd","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/header.ejs","hash":"7060258381e25bc948b7817e3dacebbee79ce5cd","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/mathjax.ejs","hash":"a4e1fe16e90c0f968fd25e52b420868bf5aada8f","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/totop.ejs","hash":"a94e7999f597d73dc50f05ba53ff422262f8333e","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_widget/archive.ejs","hash":"3e07880f560b1c8462b19bc5003aaf67756edf09","modified":1554616688451},{"_id":"themes/landscape-plus/layout/_widget/category.ejs","hash":"864d6db41f5f9a653fd0f1f244a29cd45c73473b","modified":1554616688451},{"_id":"themes/landscape-plus/layout/_widget/links.ejs","hash":"de1cf7bcba48eb133988ac77c072088bc89f5d8e","modified":1554616688451},{"_id":"themes/landscape-plus/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1554616688451},{"_id":"themes/landscape-plus/layout/_widget/tag.ejs","hash":"20639d8b9bdb8dc0292a359125587aabb7f9575a","modified":1554616688451},{"_id":"themes/landscape-plus/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1554616688451},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554616688461},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554616688461},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554616688461},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554616688461},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554616688471},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554616688461},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1554616688471},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1554616688471},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1554616688471},{"_id":"themes/landscape-plus/source/css/_extend.styl","hash":"71b4fc4d12fdd7a7f66a68ab0e9c832d2fa85ec1","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_variables.styl","hash":"9da3d49e55dcb50237e5bab31879bdc907f6e0a2","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/style.styl","hash":"7f0f231b0456cffba8d5212a9d02b2056604eeba","modified":1554616688461},{"_id":"themes/landscape-plus/source/js/script.js","hash":"d930c5ec3f3648425b1130922ef7eceb3fb5cda3","modified":1554616688471},{"_id":"themes/landscape-plus/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1554616688471},{"_id":"themes/landscape-plus/.git/refs/heads/master","hash":"1577bf49971ab7aa396a37216dd4e701e4e2e78d","modified":1554616688421},{"_id":"themes/landscape-plus/.git/objects/pack/pack-808489de4898feb781268064408ccb37d3c1227f.idx","hash":"1599974bc3fdbe90c1c2470a436b7772b1771c77","modified":1554616688278},{"_id":"themes/landscape-plus/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1554616688441},{"_id":"themes/landscape-plus/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1554616688441},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554616688471},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1554616688471},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1554616688471},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1554616688471},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1554616688471},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1554616688471},{"_id":"themes/landscape-plus/source/css/_partial/archive.styl","hash":"0cf17ec0c31831471b3144622e5973dbf6610ab4","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/article.styl","hash":"c13e1c5ef99f961674fc6f271dec9280cd41844b","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/header.styl","hash":"85953beba287f0397e6c4b76d0672e1bccb59798","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/highlight.styl","hash":"bb4629ad76cb50ea103e6ef1a2b465b772b16dff","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-aside.styl","hash":"2d3d264a34bee86abbefafd07e57beae415d28d5","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-bottom.styl","hash":"f6023861b2fbd858946e2108438b5f8f17586179","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/sidebar.styl","hash":"0c91d8e0081cf2de5f729c8cf2f42c3a2ae5ccb6","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_partial/totop.styl","hash":"a5aadd9948941fca5b9289939562475d42d953a4","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1554616688451},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1554616688461},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1554616688461},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1554616688461},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1554616688461},{"_id":"themes/landscape-plus/.git/logs/refs/heads/master","hash":"548e2b42157824564ae5d84b63a843e9d8b6b2ba","modified":1554616688421},{"_id":"themes/landscape-plus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554616688421},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1554616688461},{"_id":"themes/landscape-plus/.git/logs/refs/remotes/origin/HEAD","hash":"548e2b42157824564ae5d84b63a843e9d8b6b2ba","modified":1554616688421},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1554616688461},{"_id":"themes/landscape-plus/.git/objects/pack/pack-808489de4898feb781268064408ccb37d3c1227f.pack","hash":"1aa226f6086eb1be33c7146b97a52b90f0b0dbd8","modified":1554616688278},{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1554626184151},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1554626184161},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1554626184161},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1554626184161},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1554626184161},{"_id":"themes/next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1554626184201},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1554626184201},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1554626184201},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1554626184201},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1554626184201},{"_id":"themes/next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1554626184211},{"_id":"themes/next/_config.yml","hash":"bf4fc2b6b89e03a47ae216e30131579c199c2957","modified":1554633237552},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1554626184211},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1554626184231},{"_id":"themes/next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1554626184291},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554617850396},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1554617850402},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554617816839},{"_id":"themes/next/.git/packed-refs","hash":"b6cc61d0c19ec779e2ba62f3a8f64fdc1130e67f","modified":1554617850391},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1554626184171},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"78756d8a45b22bdaa51f12b06907bff44afee83e","modified":1554626184171},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1554626184171},{"_id":"themes/next/.github/auto_assign.yml","hash":"d022bc17b84409347cde62c27f232a9f60971f71","modified":1554632123924},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"66e529edef048f3fab87d9670fa8999f483292bf","modified":1554626184181},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1554626184191},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1554626184191},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1554626184191},{"_id":"themes/next/.github/mergeable.yml","hash":"266c12ef70c20be2928a9feda89b7d4b132dce51","modified":1554632123924},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1554626184201},{"_id":"themes/next/.github/release-drafter.yml","hash":"faa53bb565b766a3c14198f595e1e23e68b9e194","modified":1554632123924},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1554626184201},{"_id":"themes/next/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1554626184201},{"_id":"themes/next/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1554626184201},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1554626184211},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1554626184211},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1554626184211},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1554626184211},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1554626184221},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1554626184221},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1554626184221},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1554626184221},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1554626184221},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1554626184231},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1554617850442},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1554626184231},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1554617850443},{"_id":"themes/next/languages/fr.yml","hash":"0393558717065293bdf732866471cebb0c884f6a","modified":1554632123924},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1554626184241},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1554626184241},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1554626184241},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1554626184241},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1554626184241},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1554626184241},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1554626184241},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1554626184241},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1554626184241},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1554626184241},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1554626184241},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1554626184241},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1554626184241},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1554626184241},{"_id":"themes/next/layout/_layout.swig","hash":"843a52ef39d385bb644ddd2e0b84c8014f4bac1b","modified":1554632812204},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1554626184291},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1554626184291},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1554626184291},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1554626184291},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1554626184291},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1554626184291},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1554626184291},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1554626184301},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1554626184301},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1554626184501},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1554626184501},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1554626184501},{"_id":"themes/next/.git/index","hash":"0087289c7024272449cc80fe4bae2ee38805bea6","modified":1554617850577},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554617850543},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554617816851},{"_id":"themes/next/.git/logs/HEAD","hash":"2996e01da6bbc3b886b869494f75495369be9b3c","modified":1554617850399},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554617816840},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554617816841},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554617816842},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554617816843},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554617816843},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554617816844},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554617816845},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554617816846},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554617816847},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554617816849},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554617816850},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1554626184181},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1554626184181},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1554626184181},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1554626184181},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1554626184221},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1554626184221},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1554626184221},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1554626184231},{"_id":"themes/next/docs/zh-CN/README.md","hash":"058c4c6f17c144d88d64c0b12cbd4f1c9fc61522","modified":1554626184231},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1554626184241},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554626184241},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554626184241},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1554626184251},{"_id":"themes/next/layout/_macro/post.swig","hash":"31ba947998f0c962b04ae7f42f9d3db934209a79","modified":1554626184251},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1554626184251},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1554626184251},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1554626184251},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1554626184251},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1554626184261},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1554626184261},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1554626184271},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1554626184271},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1554626184271},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1554626184271},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1554626184271},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1554626184271},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1554626184281},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1554626184281},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1554626184281},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1554626184281},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1554626184281},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1554626184291},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1554626184291},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1554626184291},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1554626184291},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1554626184291},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1554626184291},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1554626184291},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1554626184361},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1554626184361},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554617850544},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1554626184361},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1554626184361},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1554626184361},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1554626184371},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1554626184371},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1554626184371},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1554626184371},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1554626184371},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554617850549},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554617850549},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554617850550},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1554626184371},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554617850551},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1554626184371},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1554626184371},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554632123934},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1554626184371},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1554626184371},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1554626184371},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1554626184371},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1554626184371},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1554626184371},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1554626184371},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1554626184381},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1554626184381},{"_id":"themes/next/source/js/utils.js","hash":"6a07990fe4374f8485b7dfa5797d029d8c8a024d","modified":1554632123934},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1554626184291},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1554626184291},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1554626184301},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1554626184301},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1554626184301},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1554626184301},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1554626184301},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1554626184301},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1554626184301},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1554626184301},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1554626184301},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1554626184301},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1554626184301},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1554626184301},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1554626184301},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554617850528},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554617850529},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554617850530},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554617850540},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554617850542},{"_id":"themes/next/.git/refs/heads/master","hash":"8e7677dd50b443e05420e2f6822605fedafd4cea","modified":1554617850398},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1554626184251},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1554626184251},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1554626184251},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1554626184251},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1554626184251},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1554626184251},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1554626184251},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1554626184261},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1554626184261},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1554626184261},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1554626184261},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1554626184261},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1554626184261},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1554626184261},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1554626184261},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1554626184261},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1554626184261},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1554626184261},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1554626184261},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1554626184261},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1554626184261},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1554626184261},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1554626184271},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1554626184271},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1554626184271},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1554626184271},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1554626184271},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1554626184281},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1554626184281},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1554626184281},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1554626184281},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1554626184281},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1554626184281},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1554626184281},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1554626184281},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1554626184281},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1554626184281},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1554626184281},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1554626184281},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1554626184281},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1554626184281},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1554626184281},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1554626184281},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1554626184291},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1554626184291},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1554626184291},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1554626184341},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1554626184341},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1554626184341},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"c5513b49daceeac0909ccfc8c9feb27ac4d0ac85","modified":1554632123934},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1554626184361},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1554626184361},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1554626184361},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28d0eb2ad7a62cdc9691cba39d793c7435f85bc2","modified":1554632540806},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1554626184381},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1554626184381},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1554626184381},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1554626184381},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1554626184381},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1554626184381},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1554626184381},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1554626184501},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1554626184501},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1554626184501},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1554626184481},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"2996e01da6bbc3b886b869494f75495369be9b3c","modified":1554617850399},{"_id":"themes/next/.git/objects/pack/pack-ad9eb94429ff0507ac7c152ad3a04d820ca1c013.idx","hash":"8ffc525ae9ac2333b12bd91593b66ee8081136ae","modified":1554617850281},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554617850395},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"13dfba1fc57ef39e7f2bbe15fe73bca1e47880a9","modified":1554632123934},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"698e4d6d894dd3db14fca5695b84bafcc4b1e4aa","modified":1554632123934},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1554626184301},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1554626184321},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1554626184341},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1554626184341},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"97d39280d8f48ae250bb7d0982b37b066e0461ff","modified":1554632123934},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1554626184341},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1554626184341},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1554626184341},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"12d23b0a50d12b687886ae8f1ff2073e7313b914","modified":1554632123934},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1554626184361},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5d09b033ef269ad1609e3fdcb353e4f1708046b7","modified":1554633176897},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1554626184361},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1554626184361},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1554626184361},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1554626184361},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1554626184381},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1554626184381},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1554626184381},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554617850568},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1554626184501},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"2996e01da6bbc3b886b869494f75495369be9b3c","modified":1554617850395},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"3fdfdee9aed9ebd0ffc4fcdc60af6dbfdcb7da9e","modified":1554633090064},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1554626184311},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1554631796666},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1554626184321},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"7af79cbbe4013f549799013b9d2146f61eafc85e","modified":1554632123934},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1554626184331},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1554626184341},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1554626184341},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1554626184341},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1554626184341},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1554626184341},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1554626184341},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1554626184341},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1554626184341},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1554626184351},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554626184351},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554617850567},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554617850567},{"_id":"themes/next/.git/objects/pack/pack-ad9eb94429ff0507ac7c152ad3a04d820ca1c013.pack","hash":"66f49acb29733faeff2d4f770e95aa62de855dc2","modified":1554617850277},{"_id":"themes/next/source/images/avatar.jpg","hash":"ef202373a5ea48aa3f1a1f5b21410140a656b7a3","modified":1554619056085},{"_id":"themes/next/source/images/wechat.jpg","hash":"3c9a4998ecd9da387764e0443986087ba2b7e7fd","modified":1554621336645},{"_id":"source/lib/fancybox/.bower.json","hash":"9c0e38750e26eb9e83e2b5ab9e069b66f0965ce4","modified":1554621744989},{"_id":"source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1554621744989},{"_id":"source/lib/fancybox/README.md","hash":"10e4cb3bb98f6b9806bedbb8dbbc00151bad4c70","modified":1554621744989},{"_id":"source/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1554621744989},{"_id":"source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554621744952},{"_id":"source/lib/fancybox/.git/config","hash":"6d27bad8831d14b10d7b775812c49acbe18b2af4","modified":1554621744958},{"_id":"source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554621740980},{"_id":"source/lib/fancybox/.git/index","hash":"4a858d8b0ffbd9f258323b2fdf584596c3a3b110","modified":1554621744989},{"_id":"source/lib/fancybox/.git/packed-refs","hash":"2f41f00b14f8655021d9339e7b28a15c01f5522c","modified":1554621744947},{"_id":"source/lib/fancybox/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1554621744989},{"_id":"source/lib/fancybox/source/jquery.fancybox.css","hash":"b6964babd10efdeff086f91822b59c810a06d43d","modified":1554621744989},{"_id":"source/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1554621744989},{"_id":"source/lib/fancybox/source/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1554621744989},{"_id":"source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554621741000},{"_id":"source/lib/fancybox/.git/logs/HEAD","hash":"ad63a0c8cdd8b3ab3682b88b3609545184d28951","modified":1554621744954},{"_id":"source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554621740990},{"_id":"source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554621740990},{"_id":"source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554621740990},{"_id":"source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554621740990},{"_id":"source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554621740990},{"_id":"source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554621740990},{"_id":"source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554621741000},{"_id":"source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554621741000},{"_id":"source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554621741000},{"_id":"source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554621741000},{"_id":"source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554621741000},{"_id":"source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"1151808c52451d1b39e74fb48283195adf40b9a1","modified":1554621744989},{"_id":"source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1554621743514},{"_id":"source/lib/fancybox/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1554621743137},{"_id":"source/lib/fancybox/.git/objects/16/b01254a56610f4c6b7721c534ed4fc40ae51dd","hash":"88ca5fd99322d3a4067e0711af79f41c078f2ef5","modified":1554621743914},{"_id":"source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1554621743464},{"_id":"source/lib/fancybox/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1554621743173},{"_id":"source/lib/fancybox/.git/objects/1f/a2c5f332b7e304431213aec21012e53f8781d7","hash":"7632806182aa989d3b7029579d5c03c34b113ee3","modified":1554621742834},{"_id":"source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1554621743263},{"_id":"source/lib/fancybox/.git/objects/47/d427b6c52396bbab53a05f57aaa82b52c805b1","hash":"c5626bbb62f4d1d1e39034e7f44baf4c509410d6","modified":1554621744865},{"_id":"source/lib/fancybox/.git/objects/3d/521bfc64755e348870094e85323dc1b9c96a6b","hash":"e9660fc4f89ecb176b0ab6e4860579c1bfe9f9cb","modified":1554621743774},{"_id":"source/lib/fancybox/.git/objects/51/cf05811ed7d35e92551db1ba5a6e267ce781a5","hash":"99c009035ea86e3876b586577677d4d62ae12379","modified":1554621743734},{"_id":"source/lib/fancybox/.git/objects/53/ceaabe0f8677333c5be196778b3e40840a1869","hash":"7bc1c1c42059d5402335b5293bfb5e54bee22557","modified":1554621742980},{"_id":"source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1554621743554},{"_id":"source/lib/fancybox/.git/objects/63/c555caede30ab06d6dba16644a827e9574c8cb","hash":"846603220288272ad5d35ebdc3c917cc4adce424","modified":1554621743614},{"_id":"source/lib/fancybox/.git/objects/64/c47e893a0fef71c8c0930975ef114d9812da56","hash":"eaad75fab15724f9c2b069fc1ce9b8216be149d7","modified":1554621743814},{"_id":"source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1554621743313},{"_id":"source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1554621743355},{"_id":"source/lib/fancybox/.git/objects/7c/00ef8195b73793d477d22e723ecdac9553ebf3","hash":"fd8c4fd143b32fb3e86367f123feb7c35b305262","modified":1554621744815},{"_id":"source/lib/fancybox/.git/objects/7c/c60b295fa2dcb82537a63792c9b3b3c2e74c33","hash":"b2dc23c71b13726c391aaefaa5312227a9b6ab7e","modified":1554621743948},{"_id":"source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1554621742884},{"_id":"source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1554621743400},{"_id":"source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1554621743223},{"_id":"source/lib/fancybox/.git/objects/9b/fe9361836240600c1bcc3cab9d42b35e731fad","hash":"3d38ffc7ac1ae85224691ef15d7f32e40c40b3a2","modified":1554621743864},{"_id":"source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1554621743484},{"_id":"source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1554621743434},{"_id":"source/lib/fancybox/.git/objects/ad/569256343419017e8832a38faaa1c786716a1d","hash":"0538e4abd112b0a843035f28a511edabbe73f2ce","modified":1554621743694},{"_id":"source/lib/fancybox/.git/objects/b3/b3098638624b56be968573e2dab1684f8a7f06","hash":"6fa11a2d904dff2b8f4ae1bd88bdbb66736438a1","modified":1554621744745},{"_id":"source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1554621743024},{"_id":"source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1554621742939},{"_id":"source/lib/fancybox/.git/objects/d5/d10f6be62acc10fec6e11e8dc4affe1184a17b","hash":"cec51b2539349d2aba1ec5d11eaded3815eccdc5","modified":1554621744775},{"_id":"source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1554621743064},{"_id":"source/lib/fancybox/.git/refs/heads/master","hash":"d1840ae4717ac8eb10df2e61a7851f5542f70f90","modified":1554621744954},{"_id":"source/lib/fancybox/.git/objects/80/6b27034bd69d563e4243c2f12b43c7064b32dd","hash":"b7d3e8020767ae60a2029da8eccb0068623dc618","modified":1554621744845},{"_id":"source/lib/fancybox/.git/logs/refs/heads/master","hash":"ad63a0c8cdd8b3ab3682b88b3609545184d28951","modified":1554621744955},{"_id":"source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554621744951},{"_id":"source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"ad63a0c8cdd8b3ab3682b88b3609545184d28951","modified":1554621744951},{"_id":"source/lib/reading_progress/.editorconfig","hash":"b1fd3a1cdad8120ed818833be00ea9b9cab2845a","modified":1554621811443},{"_id":"source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1554621811445},{"_id":"source/lib/reading_progress/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1554621811445},{"_id":"source/lib/reading_progress/package.json","hash":"193693c3d0de991041175777543650def85be391","modified":1554621811446},{"_id":"source/lib/reading_progress/reading_progress.js","hash":"3b5cb40d2b53b282920f7fe7e206570462c1c72a","modified":1554621811446},{"_id":"source/lib/reading_progress/README.md","hash":"892aa722541608d334f009f8236babde866c2a9d","modified":1554621811445},{"_id":"source/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1554621811447},{"_id":"source/lib/reading_progress/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554621811427},{"_id":"source/lib/reading_progress/.git/config","hash":"dafc19913534d0710c8219015fe8fcf6f54966f7","modified":1554621811432},{"_id":"source/lib/reading_progress/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554621807601},{"_id":"source/lib/reading_progress/.git/index","hash":"4815692c368cf643afe743321ccb0bfff46256b9","modified":1554621811447},{"_id":"source/lib/reading_progress/.git/packed-refs","hash":"bf8dcb185c69accefc518791f11f13432bf25cb5","modified":1554621811422},{"_id":"source/lib/reading_progress/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1554621811444},{"_id":"source/lib/reading_progress/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554621807606},{"_id":"source/lib/reading_progress/.git/logs/HEAD","hash":"c49a1894f78ec2ed8de5d8c90f66b078092c42c4","modified":1554621811429},{"_id":"source/lib/reading_progress/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554621807601},{"_id":"source/lib/reading_progress/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554621807602},{"_id":"source/lib/reading_progress/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554621807602},{"_id":"source/lib/reading_progress/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554621807603},{"_id":"source/lib/reading_progress/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554621807603},{"_id":"source/lib/reading_progress/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554621807603},{"_id":"source/lib/reading_progress/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554621807604},{"_id":"source/lib/reading_progress/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554621807604},{"_id":"source/lib/reading_progress/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554621807605},{"_id":"source/lib/reading_progress/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554621807605},{"_id":"source/lib/reading_progress/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554621807605},{"_id":"source/lib/reading_progress/.git/objects/00/4fa4280892c7d18f6151fac22daf51344c02ea","hash":"7a81ed1087c3792f37bd83137d4034179c911627","modified":1554621810080},{"_id":"source/lib/reading_progress/.git/objects/01/36e1990fcbef0586e0bd4b9d90b96900dcd575","hash":"37ac2f94a41384f4cb66cd74c8313099367a5603","modified":1554621809897},{"_id":"source/lib/reading_progress/.git/objects/01/9a385ce3e8b0232ee5edfa6b4e1dcd44cf142e","hash":"6894d6df0722077c5d21d116f33046625cd57ab8","modified":1554621810644},{"_id":"source/lib/reading_progress/.git/objects/03/f74f308aba6eaa459b8e5b1c7e7203aa9d06ef","hash":"fafadfedfbd5b6b7d49061ee85d3568c791e0f3a","modified":1554621811160},{"_id":"source/lib/reading_progress/.git/objects/08/4d73e711ab990007314dab66ac8da236a98212","hash":"aca52af21085b7a579b275a1e7bb5f1a8818e3d4","modified":1554621810411},{"_id":"source/lib/reading_progress/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1554621810322},{"_id":"source/lib/reading_progress/.git/objects/2b/c9c88e86c252b037a36df9a3d3df519b254bfc","hash":"e647f9721e4f2e1cd52bfff3c80683b787f76a11","modified":1554621809956},{"_id":"source/lib/reading_progress/.git/objects/0f/1d02f84180d20e5abcaabc0c1bd312a873867b","hash":"192e0e348a38739f606fdef8bd5f710339067ff6","modified":1554621811061},{"_id":"source/lib/reading_progress/.git/objects/2d/488e7ac12f9be4cba8a7a383e972449b4ecef7","hash":"e477cea6ada0896804b0e8dab23c9d56825a0ece","modified":1554621810177},{"_id":"source/lib/reading_progress/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1554621810372},{"_id":"source/lib/reading_progress/.git/objects/36/58085a9181df88f19f04603b28f6ea21d199cc","hash":"6a467dd51d39b28c1af9c25869e25c6821f6602a","modified":1554621810936},{"_id":"source/lib/reading_progress/.git/objects/48/1ebe947f06e440e41c1a971be0844e852c1d37","hash":"61fea90ca1824db58df6cfc662bc5b371db02224","modified":1554621810520},{"_id":"source/lib/reading_progress/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1554621810452},{"_id":"source/lib/reading_progress/.git/objects/71/4aebae4e17e00cdb0e82893d9fa39d35b20b59","hash":"d09daa7d244ee40035e6eb67f13867182fb8af86","modified":1554621810564},{"_id":"source/lib/reading_progress/.git/objects/82/2aa7ea95e2f40a1c9808fcdba0353650781cf9","hash":"07db481043efdac756c39b1a1c9f11048787bb1a","modified":1554621811247},{"_id":"source/lib/reading_progress/.git/objects/83/d5a97b3daaa59cccb44af55f6723f431f2e94a","hash":"448c16fa4f53e5123838d4c3593dcfb15f309905","modified":1554621810813},{"_id":"source/lib/reading_progress/.git/objects/72/14afbfc63460dc013ba6368e8c0886597db666","hash":"f67bc8964bd60f5f78fd2437ae946b4e4021a8d6","modified":1554621811338},{"_id":"source/lib/reading_progress/.git/objects/8f/ca1e70cfeea939105e31d7d17f7c3516120b30","hash":"312d55b1a7fbdcc14c54b3805f0827fc42ad94ed","modified":1554621810039},{"_id":"source/lib/reading_progress/.git/objects/8e/0a48f30df2d542c8e86197067f80ce5f794583","hash":"02367707e47c2549ef585f3b2da72c864d6a8307","modified":1554621810230},{"_id":"source/lib/reading_progress/.git/objects/98/a2041bc808f55bbcb9d8b53560e22558338bda","hash":"ebb53379aa2d77ea0832973fa3e44846df0f170f","modified":1554621810895},{"_id":"source/lib/reading_progress/.git/objects/a2/7bba2bf42630fc03150b64fc74f2a29c151a27","hash":"b1afe600ba94298a2905a2cf64c900f5954cc146","modified":1554621810489},{"_id":"source/lib/reading_progress/.git/objects/a5/3476a996e477ae4494a5b47aff4237b9859a73","hash":"cd32f255f625f6325f13df5acdef0df20c1a982a","modified":1554621811204},{"_id":"source/lib/reading_progress/.git/objects/ae/aa7a68a7131bd03e0bce06f45bfdfa1cd93587","hash":"d7d37380ba502a4050834df40227d612cf911595","modified":1554621810853},{"_id":"source/lib/reading_progress/.git/objects/a8/63332915ebfd107ca4418c25c80674875c422b","hash":"f12e708237bcf98c072e73e45f1542cfb5646839","modified":1554621810686},{"_id":"source/lib/reading_progress/.git/objects/b1/97881becc7883ad3d3e37cbc6b33f29ef89512","hash":"c044f51aeff15821889c1a2b036ee99b742a35db","modified":1554621809810},{"_id":"source/lib/reading_progress/.git/objects/b2/6b015c6a0aacd5fcbd3fd3a09b0b216855f35c","hash":"6924e4c4558366a76578a2497d2fca15ef39a9f8","modified":1554621810605},{"_id":"source/lib/reading_progress/.git/objects/b6/eda56cb9647d239b26d86f579204cbccf745fe","hash":"12e479d3dfe08df6f9d4d56be2f0a17d9720d846","modified":1554621810769},{"_id":"source/lib/reading_progress/.git/objects/c0/018cb7262951a7eea4001bea16bf6c1db1de0e","hash":"b54299894dbbf00b3187ae3e16a480a91ca75e73","modified":1554621810279},{"_id":"source/lib/reading_progress/.git/objects/d1/94060fce08431ebef4cb5f4c02739b913373cb","hash":"b9022b117b03703b5fa8af85fc076b692bde33cf","modified":1554621810980},{"_id":"source/lib/reading_progress/.git/objects/c7/8ceb135b768a369ded42f77d4db3f6363bde20","hash":"aa90e157f2a043dad6017bab2e4aa699f6236a63","modified":1554621810729},{"_id":"source/lib/reading_progress/.git/objects/e5/dc795cdf7d9163cc736be938a9707f73869c9f","hash":"57163dfa4eebe09d57ede37ee259b7cbb2b1e643","modified":1554621809997},{"_id":"source/lib/reading_progress/.git/objects/f0/acd06a59665dabfb6eb0608f0a797fdcd44158","hash":"f85f3dbe326b8752f6e32c7169ed3b409f4167b7","modified":1554621810138},{"_id":"source/lib/reading_progress/.git/objects/f1/dcdfc585f60cb1614c480c3b06a1632b1b6d8e","hash":"606959b7d91b2ed28c670c607623ce36ab3a0c07","modified":1554621811103},{"_id":"source/lib/reading_progress/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1554621811290},{"_id":"source/lib/reading_progress/.git/objects/f6/8184f97255dfd504e22775df6450edb9b51d70","hash":"b0a36dcf81780a9f82db6318daa065200e16efee","modified":1554621811021},{"_id":"source/lib/reading_progress/.git/refs/heads/master","hash":"de1c871eebc3a4c2459021ac3233e709765d1957","modified":1554621811428},{"_id":"source/lib/reading_progress/.git/logs/refs/heads/master","hash":"c49a1894f78ec2ed8de5d8c90f66b078092c42c4","modified":1554621811430},{"_id":"source/lib/reading_progress/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554621811426},{"_id":"source/lib/reading_progress/.git/logs/refs/remotes/origin/HEAD","hash":"c49a1894f78ec2ed8de5d8c90f66b078092c42c4","modified":1554621811426},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9c0e38750e26eb9e83e2b5ab9e069b66f0965ce4","modified":1554621984379},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1554621984380},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"10e4cb3bb98f6b9806bedbb8dbbc00151bad4c70","modified":1554621984383},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1554621984382},{"_id":"themes/next/source/lib/reading_progress/.editorconfig","hash":"b1fd3a1cdad8120ed818833be00ea9b9cab2845a","modified":1554621811443},{"_id":"themes/next/source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1554621811445},{"_id":"themes/next/source/lib/reading_progress/README.md","hash":"892aa722541608d334f009f8236babde866c2a9d","modified":1554621811445},{"_id":"themes/next/source/lib/reading_progress/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1554621811445},{"_id":"themes/next/source/lib/reading_progress/package.json","hash":"193693c3d0de991041175777543650def85be391","modified":1554621811446},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","hash":"3b5cb40d2b53b282920f7fe7e206570462c1c72a","modified":1554621811446},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1554621811447},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"b6964babd10efdeff086f91822b59c810a06d43d","modified":1554621984384},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1554621984385},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1554621984386},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"1151808c52451d1b39e74fb48283195adf40b9a1","modified":1554621984389},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.gitignore","hash":"6314e8d360b64e9f219fc64a001f68661aa3ee94","modified":1554622482733},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.npmignore","hash":"8b201428fa0fd7ab2eacaed54301c1e80023973a","modified":1554622482733},{"_id":"themes/next/source/lib/hexo-generator-searchdb/LICENSE","hash":"fbd1514b891dd68e152c26cca07021a4cae3499d","modified":1554622482734},{"_id":"themes/next/source/lib/hexo-generator-searchdb/README.md","hash":"e58731a5accf1948a4289e2501fba51024e38ac5","modified":1554622482734},{"_id":"themes/next/source/lib/hexo-generator-searchdb/index.js","hash":"41b54cac1709f231fa8e1b250560b4454356f5fb","modified":1554622482735},{"_id":"themes/next/source/lib/hexo-generator-searchdb/package.json","hash":"1e9f50a4383fa1a8e32fbd6006306ed3ea4c69aa","modified":1554622482736},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554622482711},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/config","hash":"eea2417a6353fe82f40204aa884f9c11ebd3e590","modified":1554622482718},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554622480300},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/index","hash":"8a02b6f4f3fba56cc7a2393c70ea7ca2f70477d8","modified":1554622482738},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/packed-refs","hash":"51f23785ec43d2a86ca569456519f9ce6347b8b9","modified":1554622482704},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.github/stale.yml","hash":"c801dd4497180dae0b12548a9348bd7ba7ada769","modified":1554622482732},{"_id":"themes/next/source/lib/hexo-generator-searchdb/lib/json_generator.js","hash":"8ca26fa6c78a0aa047097ca0f660fac2eec87bd8","modified":1554622482735},{"_id":"themes/next/source/lib/hexo-generator-searchdb/lib/xml_generator.js","hash":"3230904ca783c72ad5b2f56bf290b6d3de627407","modified":1554622482736},{"_id":"themes/next/source/lib/hexo-generator-searchdb/templates/search.xml","hash":"a196cf5f43949d3ac5cee60feb0b9d7b1d5e52de","modified":1554622482737},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554622480301},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554622480303},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554622480302},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554622480303},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554622480303},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554622480304},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554622480306},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554622480305},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554622480307},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554622480307},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554622480308},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554622480310},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/logs/HEAD","hash":"d431dc11fcaae4ff9340ff1f9b72a9c246b3c4e1","modified":1554622482714},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/objects/pack/pack-6b64e40dbdb2878bfbb0a09574476392f4d68c5f.idx","hash":"6d19501173df05528741b7f34b247e69cc762330","modified":1554622482603},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/objects/pack/pack-6b64e40dbdb2878bfbb0a09574476392f4d68c5f.pack","hash":"b814d95f57d9931dceb316b9deba411c74805af1","modified":1554622482601},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/refs/heads/master","hash":"3458832360b2bf31f2b8dc4546a6dbbfbdb03d48","modified":1554622482713},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/logs/refs/heads/master","hash":"d431dc11fcaae4ff9340ff1f9b72a9c246b3c4e1","modified":1554622482715},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554622482709},{"_id":"themes/next/source/lib/hexo-generator-searchdb/.git/logs/refs/remotes/origin/HEAD","hash":"d431dc11fcaae4ff9340ff1f9b72a9c246b3c4e1","modified":1554622482709},{"_id":"themes/next/source/images/custom_band.jpg","hash":"565af1d9f6c15904213d4355aff3e4c4b9c6f395","modified":1554623306236},{"_id":"themes/next/source/images/banner.jpg","hash":"06bad45e0a7f072ebd30d49ccabf3bbe5f8c5cfb","modified":1506831544730},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1554626182397},{"_id":"source/_posts/ng-alain源码解析.md","hash":"faa8bf9e3944057dc6bcf391bc8c89319944db0a","modified":1554630930572},{"_id":"source/_posts/真正理解js中的时间循环.md","hash":"4113c3802e07e6fc1209e4a613d31cb80636e39f","modified":1554630149910},{"_id":"source/_posts/nodejs三种方式执行工作流.md","hash":"19d5da991df72bcf9c283a97c8169930b5a26341","modified":1554630228943},{"_id":"source/_posts/Angular 利用NG-ZORRO实现全局http错误拦截与提示.md","hash":"871b4ffbe4cc6346ae96e3ab73d2ee8f1be0499e","modified":1554630328635},{"_id":"source/_posts/Angular5 jwt验证.md","hash":"d9cef2331f477bf3e155ac73687d5e4e168d3a37","modified":1554630552325},{"_id":"source/_posts/CSS居中.md","hash":"2133ed87970ce3812a8026bec365f1a2399e6f7d","modified":1554630854185},{"_id":"source/_posts/Angular5 自定义管道与指令.md","hash":"45191321493b91b68f898c929ef42aa2cb6651d1","modified":1554630577460},{"_id":"source/_posts/ES6中Object密封API-Object.preventExtensions，Object.seal，Object.freeze.md","hash":"ee2e8a66f3b10f42495f5898abfd3bf0b7a27753","modified":1554630419110},{"_id":"source/_posts/ES6中Object常用API-Object.assign，Object.create， Object.defineProperty.md","hash":"a3c10d420d77be87bd1837060ce12676ade37707","modified":1554630352987},{"_id":"source/_posts/ES6中的Promise.md","hash":"66623a1cfe6a6605892ea1656178883672bb8924","modified":1554630492127},{"_id":"source/_posts/ES6中的新集合类型-map, weakMap,set,weakSet.md","hash":"22c3688a03b5a39317f0391e5406a56ed8bef190","modified":1554630390400},{"_id":"source/_posts/ES6中的迭代协议-Sympol.iterator.md","hash":"951e3ca90bbb6884489fce000c6724b052d580ba","modified":1554630369814},{"_id":"source/_posts/angular5 表单.md","hash":"66092c0c923532654f0391b4bee1fe79b6af3049","modified":1554630532682},{"_id":"source/_posts/css清除浮动.md","hash":"62edcc41490db9eda377bc8a394605a6e3e64c85","modified":1554630597079},{"_id":"source/_posts/包模块规范：AMD,Commonjs与ES2015.md","hash":"da961157b728b3a65e67bd3e81cf761d5738bacb","modified":1554630456620},{"_id":"source/_posts/用Docker和angular5及Koa创建MEAN应用.md","hash":"b60c4f44d3fd018ed8609560600c12c73831bf48","modified":1554630816804},{"_id":"source/_posts/CSS清除浮动.md","hash":"62edcc41490db9eda377bc8a394605a6e3e64c85","modified":1554630860992},{"_id":"source/_posts/Nginx配置手册.md","hash":"7b10b114c9a7e39bf43f3bfd6fc001c9603bb2b1","modified":1554631031659},{"_id":"source/_posts/阿里云乞丐版折腾ebook-coin.md","hash":"7df1ce1d2d6b0505b442e9f69ac46eeae5461071","modified":1554631681611},{"_id":"public/search.xml","hash":"b091b57f2b7e6c74da3b73426f5a82e4204cea92","modified":1554631186283},{"_id":"public/2017/12/20/Nginx配置手册/index.html","hash":"c55b2a3e5e730b0953c4e13584c9a0f1566c4115","modified":1554631186311},{"_id":"public/2017/02/10/阿里云乞丐版折腾ebook-coin/index.html","hash":"b15a5c96f71bbf4d215e6faf85424a194b48cd43","modified":1554631186311},{"_id":"public/2016/06/19/用Docker和angular5及Koa创建MEAN应用/index.html","hash":"33df340df6415799ddeb0193a73f95768493011d","modified":1554631186311},{"_id":"public/2016/06/01/真正理解js中的时间循环/index.html","hash":"5c29d67f14bf79c15a122cf9900c549f1efd849c","modified":1554631186312},{"_id":"public/2016/05/24/ng-alain源码解析/index.html","hash":"ad6a40423e6d099911f8f7601481306456f6e2a2","modified":1554631186312},{"_id":"public/2016/05/23/Angular 利用NG-ZORRO实现全局http错误拦截与提示/index.html","hash":"160a06261cffa49039ad695ac267f2fc2daa3896","modified":1554631186312},{"_id":"public/2016/05/21/angular5 表单/index.html","hash":"6cb23bcfce465d859749728fb23688efff672c97","modified":1554631186312},{"_id":"public/2016/05/21/Angular5 jwt验证/index.html","hash":"4cceb87ba4b25319a1815380b33a08be2b9a3889","modified":1554631186312},{"_id":"public/2016/05/21/Angular5 自定义管道与指令/index.html","hash":"569dd3cef6c1442990494cc8e59ca04c136b8083","modified":1554631186312},{"_id":"public/2016/05/20/ES6中的迭代协议-Sympol.iterator/index.html","hash":"ca1c741c117420f31255cf2bac16ded761fa9c7d","modified":1554631186312},{"_id":"public/2016/05/19/包模块规范：AMD,Commonjs与ES2015/index.html","hash":"80486e70050840718d6d4a71543e613523f97ada","modified":1554631186312},{"_id":"public/2016/05/16/ES6中的新集合类型-map, weakMap,set,weakSet/index.html","hash":"15db686445854149dbc7f4a7f7fac35204b9bd22","modified":1554631186312},{"_id":"public/2016/05/14/ES6中Object密封API-Object.preventExtensions，Object.seal，Object.freeze/index.html","hash":"2d916b5560cfcbe2cb661e3a496ced5cdb9e7bcb","modified":1554631186312},{"_id":"public/2016/05/10/ES6中Object常用API-Object.assign，Object.create， Object.defineProperty/index.html","hash":"63a7e2963bcd49fada438a8e23b52d4b8cd1c982","modified":1554631186313},{"_id":"public/2016/04/29/nodejs三种方式执行工作流/index.html","hash":"41df4447ed2f958f0bd0fe280899223248fe07e9","modified":1554631186313},{"_id":"public/2016/04/28/ES6中的Promise/index.html","hash":"6f9a493a9b940027f4c3e262a5653657ad74654e","modified":1554631186313},{"_id":"public/2016/02/03/CSS居中/index.html","hash":"806ce1c192569fbe4cba5dd3a383f921f0ba8b8e","modified":1554631186313},{"_id":"public/2016/02/02/CSS清除浮动/index.html","hash":"7503f8ca0a4a02a03318d19869a6fa66493e9af8","modified":1554631186313},{"_id":"public/archives/index.html","hash":"d3985e5145924bc8b18a7a62d7c06c15cd04d492","modified":1554631186313},{"_id":"public/archives/page/2/index.html","hash":"540b6008502b4d03c7e4f6562f0897653b9504ba","modified":1554631186313},{"_id":"public/archives/2016/index.html","hash":"51580ede9cce36e4bbcb83b07ecf8732aab1449a","modified":1554631186313},{"_id":"public/archives/2016/page/2/index.html","hash":"08bc777bf65f4b29257d60db7a782ac158aead0d","modified":1554631186313},{"_id":"public/archives/2016/02/index.html","hash":"62bd9b226eaaaccd04731fc0b6a57906097939b0","modified":1554631186313},{"_id":"public/archives/2016/04/index.html","hash":"e3629c3ef6f81310b860b434f7faf0bbd365fe8d","modified":1554631186313},{"_id":"public/archives/2016/05/index.html","hash":"e9495b1547e3c489c4c1f2a12ab787bfb3475ee6","modified":1554631186313},{"_id":"public/archives/2016/06/index.html","hash":"702d7c1dd53294c60df9c23ae68f1f55a01ce6bd","modified":1554631186313},{"_id":"public/archives/2017/index.html","hash":"b606ace6d4baca3f4f2c5a9b6723bcbea9c648c5","modified":1554631186313},{"_id":"public/archives/2017/02/index.html","hash":"dbd38498aab023e80b462af1f6390d460ad0fb50","modified":1554631186313},{"_id":"public/archives/2017/12/index.html","hash":"899752575ae35510e57f2932456ae6726c78484e","modified":1554631186313},{"_id":"public/index.html","hash":"c2191fe51990021f5b00fa745c740125c32cae24","modified":1554631186313},{"_id":"public/page/2/index.html","hash":"a5ab4377c02c166dae3c29d0f065f3f5c2346e83","modified":1554631186314},{"_id":"public/tags/前端/index.html","hash":"b572c1de1f0ea0e9161dc053403e7049cfac766d","modified":1554631186314},{"_id":"public/tags/前端/page/2/index.html","hash":"07cc486c0b41c7d37f41343a5793ae212c82730b","modified":1554631186314},{"_id":"public/tags/js/index.html","hash":"139d99d0555d5a1f129ceb2ee9e5389c48bfcae8","modified":1554631186314},{"_id":"public/tags/nodejs/index.html","hash":"684a768550346c18f290f45f1f46b9b9a9db2639","modified":1554631186314},{"_id":"public/tags/eventloop/index.html","hash":"1e6c5afa3c5e6983fd8dc71536278e89ccc0914a","modified":1554631186314},{"_id":"public/tags/javascript/index.html","hash":"aab44854946d242732e993da10e78999e597be5a","modified":1554631186314},{"_id":"public/tags/ES6/index.html","hash":"75e6733eb4b15c05ede129f0cc495c6c2e0d12d4","modified":1554631186314},{"_id":"public/tags/Promise/index.html","hash":"88e2b7bf0be15e605865bdd07fda11f5a3a0f57c","modified":1554631186314},{"_id":"public/tags/async-await/index.html","hash":"e41fdddaa09d04cf279ed6b9501684b21270436e","modified":1554631186314},{"_id":"public/tags/angular/index.html","hash":"35120549350df5761ca86e8dd11ff34c1198d02b","modified":1554631186314},{"_id":"public/tags/NG-ZORRO/index.html","hash":"badd47b106fe9e8822ae38894ddd41abd5d26022","modified":1554631186314},{"_id":"public/tags/amd/index.html","hash":"83a3c3b72ed2e44522ad4fe397546197050b23e0","modified":1554631186314},{"_id":"public/tags/commonjs/index.html","hash":"4c9b0d16684491797de6ce1c3578029ec5ba3145","modified":1554631186314},{"_id":"public/tags/CSS/index.html","hash":"f304aac5e61004ae6b18c74055802d1ec7953437","modified":1554631186314},{"_id":"public/tags/NG-ALAIN/index.html","hash":"4afefa195f323423331e0c64eefd807a8ef16c71","modified":1554631186315},{"_id":"public/tags/后端/index.html","hash":"64f8180332c6c3be1b10b2e8966261b8330fd9bb","modified":1554631186315},{"_id":"public/tags/区块链/index.html","hash":"b69f5009e7eff4e6186e21a573e40b5e9a05c3b9","modified":1554631186315},{"_id":"public/tags/ebookcoin/index.html","hash":"8673bebe738a5d1eb8c485335bbb049e422000e4","modified":1554631186315},{"_id":"public/tags/nginx/index.html","hash":"1602f417bb58ebdf54b0652b1ebf93684889d8c8","modified":1554631186315},{"_id":"public/tags/配置/index.html","hash":"47d510429971ef184fc5bc06c4e6b41e7abdcb0b","modified":1554631186315},{"_id":"public/categories/前端/index.html","hash":"e9977edd86ac9dd01b30d3852bea128b5d16a4e9","modified":1554631186315},{"_id":"public/categories/前端/page/2/index.html","hash":"a08292126f6f659e5e0d67e7e71810b1ea5221ae","modified":1554631186315},{"_id":"public/categories/前端/js/index.html","hash":"a7df692d572ffb9bf17d674fd74c3aea2c90aa98","modified":1554631186315},{"_id":"public/categories/前端/js/nodejs/index.html","hash":"1c83a054c9a12e9fd00eed7e33fbe2d17b3983a4","modified":1554631186315},{"_id":"public/categories/前端/js/ES6/index.html","hash":"2dcf19e92d0912b2c78cf6d35e43231ad7806eaa","modified":1554631186315},{"_id":"public/categories/前端/angular/index.html","hash":"e305d21a5349021dc4c4947e547824ea45019e7a","modified":1554631186315},{"_id":"public/categories/前端/js/es6/index.html","hash":"96975a242b876421d0e3db240c4fd0dfb5482fad","modified":1554631186315},{"_id":"public/categories/前端/CSS/index.html","hash":"0a1cf350296de021ad4fe2245a101e221440c1d8","modified":1554631186315},{"_id":"public/categories/后端/index.html","hash":"eaefc05647484318df1506e02434edfdfd863b39","modified":1554631186315},{"_id":"public/categories/后端/区块链/index.html","hash":"dcbb48907a300f991cd031440fe1bfa0cf0f4f20","modified":1554631186319},{"_id":"public/categories/后端/区块链/nodejs/index.html","hash":"c1289ece4da34be453e3da7173ce2431f10bcec1","modified":1554631186319},{"_id":"public/categories/后端/服务器/index.html","hash":"7de359d949a8b0b9ea7c7a0267fb6b30f5d3713b","modified":1554631186319},{"_id":"public/categories/后端/服务器/nginx/index.html","hash":"301af2c2f6f32d1f2aa4e70f1e88572a7abce7e4","modified":1554631186319},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554631186327},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1554631186327},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1554631186328},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1554631186328},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1554631186328},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1554631186328},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1554631186328},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1554631186328},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554631186328},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554631186328},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1554631186328},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554631186328},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554631186328},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1554631186328},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1554631186328},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1554631186328},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1554631186328},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1554631186328},{"_id":"public/images/avatar.jpg","hash":"ef202373a5ea48aa3f1a1f5b21410140a656b7a3","modified":1554631186328},{"_id":"public/images/wechat.jpg","hash":"3c9a4998ecd9da387764e0443986087ba2b7e7fd","modified":1554631186328},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1554631186729},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554631186730},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554631186730},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1554631186735},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1554631186735},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1554631186735},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1554631186735},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1554631186735},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1554631186735},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1554631186735},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1554631186735},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1554631186735},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1554631186735},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1554631186735},{"_id":"public/css/main.css","hash":"80c449e9d6e74ec5a1161c4a239c1afcd1860d88","modified":1554631186736},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554631186736},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1554631186738},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1554631186738},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554631186739},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554631186742},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554631186749},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554631186749},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554631186749},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554631186843},{"_id":"public/images/banner.jpg","hash":"63f30c3e00c6cf26c4cb2012f34b07cdc5386132","modified":1554631186851},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554631186855},{"_id":"source/_posts/Angular5 表单.md","hash":"66092c0c923532654f0391b4bee1fe79b6af3049","modified":1554631621642},{"_id":"source/_posts/NG-ALAIN源码解析.md","hash":"8f7c417b10037ed82ef2cedd13535a1892c965d5","modified":1554631640784},{"_id":"source/_posts/真正理解js中的事件循环.md","hash":"4113c3802e07e6fc1209e4a613d31cb80636e39f","modified":1554631671216}],"Category":[{"name":"前端","_id":"cju6qpcm70003lgv8q3wu5pwj"},{"name":"js","parent":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qpcmd0007lgv8xbf19dtm"},{"name":"nodejs","parent":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qpcmf000blgv8751vfncp"},{"name":"ES6","parent":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qpcmg000elgv8byu0y3wi"},{"name":"angular","parent":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qraf9000zlgv8hrzg0wze"},{"name":"es6","parent":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qu1140025lgv88ssfg81g"},{"name":"CSS","parent":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qx0490033lgv87b383pxb"},{"name":"后端","_id":"cju6r5ncz000m1wv87wzkjqv7"},{"name":"区块链","parent":"cju6r5ncz000m1wv87wzkjqv7","_id":"cju6r5nd6000p1wv8np745epd"},{"name":"nodejs","parent":"cju6r5nd6000p1wv8np745epd","_id":"cju6r5nd7000r1wv8w4p2tkd5"},{"name":"服务器","parent":"cju6r5ncz000m1wv87wzkjqv7","_id":"cju6r6cjs00111wv89ssttkag"},{"name":"nginx","parent":"cju6r6cjs00111wv89ssttkag","_id":"cju6r6cju00131wv84h9aa4m2"}],"Data":[],"Page":[],"Post":[{"title":"nodejs中三种方式执行任务流","date":"2016-04-28T16:00:00.000Z","_content":"nodejs作为异步平台，有时候也有按顺序执行同步任务的需求。假设有这样一个任务：\n\n首先根据singer去数据库中取ablum,然后从ablum中取song。看以看出，这些任务都是后面依赖前面的，所以传统的异步方法是不行的。有以下三种方法来完成这个任务：\n\n## Async.parallel\n使用``async``库中的方法来完成这个任务：\n``` javascript\nfunction parallelDemo(req, res, next) {\n    async.parallel({\n        albums: cb => {\n            restApi.getAblums(singer).then((response) => {\n                if (response.statusCode !== 200) {\n                    return cb('Unable to process ablum request');\n                }\n                return cb(null, albums);\n            })\n        },\n        songs: cb => {\n            restApi.getSongs(album).then((response) => {\n                if (response.statusCode !== 200) {\n                    return cb('Unable to process song request');\n                }\n                return cb(null, songs);\n            })\n        }\n    }, (err, result) => {\n        if (err) {\n            return res.status(500).send(err);\n        }\n        return res.json(result);\n    })\n}\n```\n\n## 使用Promise.all\n``` javascript\nfunction parallelDemo(req, res, next) {\n    Promise.all([\n            getAblums(singer),\n            getSongs(ablum)\n        ])\n        .then(results => {\n            let [albums, songs] = results;\n            return res.json({\n                albums: albums.data,\n                songs: songs.data\n            });\n        })\n        .catch(err => {\n            return res.status(500).send(err);\n        })\n}\n```\n\n## 使用async,await\n``` javascript\n const processRequest = async () => {\n        const [posts, albums, photos] = await Promise.all([\n            getAblums(singer),\n            getSongs(ablum)\n        ]);\n        return {\n            albums: albums.data,\n            songs: songs.data\n        };\n    };\nprocessRequest()\n    .then(rsp => {\n        return res.json(rsp);\n    })\n    .catch(err => {\n        return res.stats(500).send(err);\n    });\n```","source":"_posts/nodejs三种方式执行工作流.md","raw":"---\ntitle: nodejs中三种方式执行任务流\ndate: 2016-4-29\ncategories:\n- 前端\n- js\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n- Promise\n- async/await\n---\nnodejs作为异步平台，有时候也有按顺序执行同步任务的需求。假设有这样一个任务：\n\n首先根据singer去数据库中取ablum,然后从ablum中取song。看以看出，这些任务都是后面依赖前面的，所以传统的异步方法是不行的。有以下三种方法来完成这个任务：\n\n## Async.parallel\n使用``async``库中的方法来完成这个任务：\n``` javascript\nfunction parallelDemo(req, res, next) {\n    async.parallel({\n        albums: cb => {\n            restApi.getAblums(singer).then((response) => {\n                if (response.statusCode !== 200) {\n                    return cb('Unable to process ablum request');\n                }\n                return cb(null, albums);\n            })\n        },\n        songs: cb => {\n            restApi.getSongs(album).then((response) => {\n                if (response.statusCode !== 200) {\n                    return cb('Unable to process song request');\n                }\n                return cb(null, songs);\n            })\n        }\n    }, (err, result) => {\n        if (err) {\n            return res.status(500).send(err);\n        }\n        return res.json(result);\n    })\n}\n```\n\n## 使用Promise.all\n``` javascript\nfunction parallelDemo(req, res, next) {\n    Promise.all([\n            getAblums(singer),\n            getSongs(ablum)\n        ])\n        .then(results => {\n            let [albums, songs] = results;\n            return res.json({\n                albums: albums.data,\n                songs: songs.data\n            });\n        })\n        .catch(err => {\n            return res.status(500).send(err);\n        })\n}\n```\n\n## 使用async,await\n``` javascript\n const processRequest = async () => {\n        const [posts, albums, photos] = await Promise.all([\n            getAblums(singer),\n            getSongs(ablum)\n        ]);\n        return {\n            albums: albums.data,\n            songs: songs.data\n        };\n    };\nprocessRequest()\n    .then(rsp => {\n        return res.json(rsp);\n    })\n    .catch(err => {\n        return res.stats(500).send(err);\n    });\n```","slug":"nodejs三种方式执行工作流","published":1,"updated":"2019-04-07T09:43:48.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju6qpcm40002lgv8im1owdeg","content":"<p>nodejs作为异步平台，有时候也有按顺序执行同步任务的需求。假设有这样一个任务：</p>\n<p>首先根据singer去数据库中取ablum,然后从ablum中取song。看以看出，这些任务都是后面依赖前面的，所以传统的异步方法是不行的。有以下三种方法来完成这个任务：</p>\n<h2 id=\"Async-parallel\"><a href=\"#Async-parallel\" class=\"headerlink\" title=\"Async.parallel\"></a>Async.parallel</h2><p>使用<code>async</code>库中的方法来完成这个任务：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parallelDemo</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>.parallel(&#123;</span><br><span class=\"line\">        albums: <span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            restApi.getAblums(singer).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.statusCode !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cb(<span class=\"string\">'Unable to process ablum request'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, albums);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        songs: <span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            restApi.getSongs(album).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.statusCode !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cb(<span class=\"string\">'Unable to process song request'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, songs);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, (err, result) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用Promise-all\"><a href=\"#使用Promise-all\" class=\"headerlink\" title=\"使用Promise.all\"></a>使用Promise.all</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parallelDemo</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">            getAblums(singer),</span><br><span class=\"line\">            getSongs(ablum)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> [albums, songs] = results;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">                albums: albums.data,</span><br><span class=\"line\">                songs: songs.data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用async-await\"><a href=\"#使用async-await\" class=\"headerlink\" title=\"使用async,await\"></a>使用async,await</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> processRequest = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [posts, albums, photos] = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">            getAblums(singer),</span><br><span class=\"line\">            getSongs(ablum)</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            albums: albums.data,</span><br><span class=\"line\">            songs: songs.data</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">processRequest()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(rsp);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.stats(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>nodejs作为异步平台，有时候也有按顺序执行同步任务的需求。假设有这样一个任务：</p>\n<p>首先根据singer去数据库中取ablum,然后从ablum中取song。看以看出，这些任务都是后面依赖前面的，所以传统的异步方法是不行的。有以下三种方法来完成这个任务：</p>\n<h2 id=\"Async-parallel\"><a href=\"#Async-parallel\" class=\"headerlink\" title=\"Async.parallel\"></a>Async.parallel</h2><p>使用<code>async</code>库中的方法来完成这个任务：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parallelDemo</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>.parallel(&#123;</span><br><span class=\"line\">        albums: <span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            restApi.getAblums(singer).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.statusCode !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cb(<span class=\"string\">'Unable to process ablum request'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, albums);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        songs: <span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            restApi.getSongs(album).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.statusCode !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cb(<span class=\"string\">'Unable to process song request'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, songs);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, (err, result) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用Promise-all\"><a href=\"#使用Promise-all\" class=\"headerlink\" title=\"使用Promise.all\"></a>使用Promise.all</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parallelDemo</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">            getAblums(singer),</span><br><span class=\"line\">            getSongs(ablum)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> [albums, songs] = results;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">                albums: albums.data,</span><br><span class=\"line\">                songs: songs.data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用async-await\"><a href=\"#使用async-await\" class=\"headerlink\" title=\"使用async,await\"></a>使用async,await</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> processRequest = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [posts, albums, photos] = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">            getAblums(singer),</span><br><span class=\"line\">            getSongs(ablum)</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            albums: albums.data,</span><br><span class=\"line\">            songs: songs.data</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">processRequest()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(rsp);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.stats(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Angular 利用NG-ZORRO实现全局http错误拦截与提示","date":"2016-05-22T16:00:00.000Z","_content":"# 拦截http错误\n\nhttp全局错误的拦截可以采用先扩展``Http``类，重写请求方法后发出错误，之后实现``ErrorHandler``类来实现。\n下面是部分关键代码：\n``` javascript\nexport class InterceptedHttp extends Http {\n\n    constructor(\n        backend: ConnectionBackend, \n        defaultOptions: RequestOptions) {\n        super(backend, defaultOptions);\n    }\n\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        // 在此处可以写一些拦截请求的操作\n        this.updateUrl(url);\n        return super.request(url, options);\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return super.get(url, this.getRequestOptionArgs(options));\n    }\n    \n    ....\n    // 改写请求url,加上req\n    private updateUrl(req: string) {\n        return  \"/api/\" + req;\n    }\n    // 改写请求头部\n    private getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs {\n        if (options == null) {\n            options = new RequestOptions();\n        }\n        if (options.headers == null) {\n            options.headers = new Headers();\n        }\n        options.headers.append('Content-Type', 'application/json');\n\n        return options;\n    }\n}\n```\n以上是一个简单的http请求拦截器，它可以改写请求参数，改写请求头部，还有一种写法是实现``HttpInterceptor``接口（angular5新添加)。\n``` javascript\nexport class MyHttpInterceptor implements HttpInterceptor {\nconstructor() { }\n\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\nconsole.log(\"intercepted request ... \");\n\n// Clone the request to add the new header.\nconst authReq = req.clone({ headers: req.headers.set(\"headerName\", \"headerValue\")});\n\nconsole.log(\"Sending request with new header now ...\");\n\n//send the newly created request\nreturn next.handle(authReq)\n.catch((error, caught) => {\n    //intercept the respons error and displace it to the console\n    console.log(\"Error Occurred\");\n    console.log(error);\n    //return the error to the method that called it\n    return Observable.throw(error);\n}) as any;\n}\n}\n```\n接下来实现ErrorHandler类，它可以捕捉各种类型的错误，包括Http请求错误。\n``` javascript\nexport class CustomErrorHandler implements ErrorHandler {\n\n    constructor( @Inject(NotificationService) private notificationService: NotificationService) {\n    }\n\n    handleError(error: any): void {\n        let msg = this.httpErrorHandler(error.rejection || error);\n    }\n\n    httpErrorHandler(err): string {\n        let message = '';\n        if (err.status) {\n            switch (err.status) {\n                case 502:\n                case 500:\n                    message = `服务器故障 : \\n详细信息 : ${err.statusText}:${err.json().message}`;\n                    break;\n                case 401:\n                    message = `${err.json().message}`\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            message = err.message;\n        }\n        return message;\n    }\n```\n# 发送错误消息\n捕捉到错误信息以后，需要通知某个服务来显示消息，利用nzMessageService将其显示出来，nzMessageService显示时需要视图载体，这里采用AppComponent作为载体。\n\n为ErrorHandler添加错误通知功能\n``` javascript\n    handleError(error: any): void {\n        let msg = this.httpErrorHandler(error.rejection || error);\n        this.notificationService.error(msg);\n    }\n```\nnotificationService必须类似于EventEmitter一样，收到消息后自动发射到接受方，所以可以采用Subject来作为Message的主体，让Message可以被订阅，也可以被按需求发射。\n\nMessage的模型如下:\n\n``` javascript\nexport class Message{\n    type: string;\n    message: string;\n    constructor(type, message){\n        this.type = type;\n        this.message = message;\n    }\n}\n\n```\n``` javascript\nexport class NotificationService {\n    public message: Subject<Message> = new Subject<Message>();\n\n    constructor() {\n    }\n\n    error(message: string): void {\n        this.message.next(new Message('error', message));\n    }\n}\n```\n之后，只要在AppComponent中订阅Message，就可以在前台进行提示了！\n```\nexport class AppComponent implements OnInit {\n  title = 'app';\n  constructor(private notification: NotificationService,\n    private nzMessageService: NzMessageService) {\n  }\n\n  ngOnInit(){\n    this.notification.message.distinctUntilChanged().subscribe((msg)=>{\n      this.nzMessageService.create(msg.type, msg.message);\n    });\n  }\n}\n```\n最后，别忘了注册以上这几个服务到AppModule中。\n```\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new InterceptedHttp(xhrBackend, requestOptions);\n}\n\n...\nproviders: [\n    {\n      provide: Http,\n      useFactory: httpFactory,\n      deps: [XHRBackend, RequestOptions]\n    },\n    NotificationService, // added\n    { provide: ErrorHandler, useClass: CustomErrorHandler },\n    NzMessageService,\n    { provide: NZ_MESSAGE_CONFIG, useValue: { nzDuration: 7000 } }\n  ],\n```","source":"_posts/Angular 利用NG-ZORRO实现全局http错误拦截与提示.md","raw":"---\ntitle: Angular 利用NG-ZORRO实现全局http错误拦截与提示\ndate: 2016-5-23\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- angular\n- NG-ZORRO\n---\n# 拦截http错误\n\nhttp全局错误的拦截可以采用先扩展``Http``类，重写请求方法后发出错误，之后实现``ErrorHandler``类来实现。\n下面是部分关键代码：\n``` javascript\nexport class InterceptedHttp extends Http {\n\n    constructor(\n        backend: ConnectionBackend, \n        defaultOptions: RequestOptions) {\n        super(backend, defaultOptions);\n    }\n\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        // 在此处可以写一些拦截请求的操作\n        this.updateUrl(url);\n        return super.request(url, options);\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return super.get(url, this.getRequestOptionArgs(options));\n    }\n    \n    ....\n    // 改写请求url,加上req\n    private updateUrl(req: string) {\n        return  \"/api/\" + req;\n    }\n    // 改写请求头部\n    private getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs {\n        if (options == null) {\n            options = new RequestOptions();\n        }\n        if (options.headers == null) {\n            options.headers = new Headers();\n        }\n        options.headers.append('Content-Type', 'application/json');\n\n        return options;\n    }\n}\n```\n以上是一个简单的http请求拦截器，它可以改写请求参数，改写请求头部，还有一种写法是实现``HttpInterceptor``接口（angular5新添加)。\n``` javascript\nexport class MyHttpInterceptor implements HttpInterceptor {\nconstructor() { }\n\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\nconsole.log(\"intercepted request ... \");\n\n// Clone the request to add the new header.\nconst authReq = req.clone({ headers: req.headers.set(\"headerName\", \"headerValue\")});\n\nconsole.log(\"Sending request with new header now ...\");\n\n//send the newly created request\nreturn next.handle(authReq)\n.catch((error, caught) => {\n    //intercept the respons error and displace it to the console\n    console.log(\"Error Occurred\");\n    console.log(error);\n    //return the error to the method that called it\n    return Observable.throw(error);\n}) as any;\n}\n}\n```\n接下来实现ErrorHandler类，它可以捕捉各种类型的错误，包括Http请求错误。\n``` javascript\nexport class CustomErrorHandler implements ErrorHandler {\n\n    constructor( @Inject(NotificationService) private notificationService: NotificationService) {\n    }\n\n    handleError(error: any): void {\n        let msg = this.httpErrorHandler(error.rejection || error);\n    }\n\n    httpErrorHandler(err): string {\n        let message = '';\n        if (err.status) {\n            switch (err.status) {\n                case 502:\n                case 500:\n                    message = `服务器故障 : \\n详细信息 : ${err.statusText}:${err.json().message}`;\n                    break;\n                case 401:\n                    message = `${err.json().message}`\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            message = err.message;\n        }\n        return message;\n    }\n```\n# 发送错误消息\n捕捉到错误信息以后，需要通知某个服务来显示消息，利用nzMessageService将其显示出来，nzMessageService显示时需要视图载体，这里采用AppComponent作为载体。\n\n为ErrorHandler添加错误通知功能\n``` javascript\n    handleError(error: any): void {\n        let msg = this.httpErrorHandler(error.rejection || error);\n        this.notificationService.error(msg);\n    }\n```\nnotificationService必须类似于EventEmitter一样，收到消息后自动发射到接受方，所以可以采用Subject来作为Message的主体，让Message可以被订阅，也可以被按需求发射。\n\nMessage的模型如下:\n\n``` javascript\nexport class Message{\n    type: string;\n    message: string;\n    constructor(type, message){\n        this.type = type;\n        this.message = message;\n    }\n}\n\n```\n``` javascript\nexport class NotificationService {\n    public message: Subject<Message> = new Subject<Message>();\n\n    constructor() {\n    }\n\n    error(message: string): void {\n        this.message.next(new Message('error', message));\n    }\n}\n```\n之后，只要在AppComponent中订阅Message，就可以在前台进行提示了！\n```\nexport class AppComponent implements OnInit {\n  title = 'app';\n  constructor(private notification: NotificationService,\n    private nzMessageService: NzMessageService) {\n  }\n\n  ngOnInit(){\n    this.notification.message.distinctUntilChanged().subscribe((msg)=>{\n      this.nzMessageService.create(msg.type, msg.message);\n    });\n  }\n}\n```\n最后，别忘了注册以上这几个服务到AppModule中。\n```\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new InterceptedHttp(xhrBackend, requestOptions);\n}\n\n...\nproviders: [\n    {\n      provide: Http,\n      useFactory: httpFactory,\n      deps: [XHRBackend, RequestOptions]\n    },\n    NotificationService, // added\n    { provide: ErrorHandler, useClass: CustomErrorHandler },\n    NzMessageService,\n    { provide: NZ_MESSAGE_CONFIG, useValue: { nzDuration: 7000 } }\n  ],\n```","slug":"Angular 利用NG-ZORRO实现全局http错误拦截与提示","published":1,"updated":"2019-04-07T09:45:28.635Z","_id":"cju6qr51t000xlgv8qr7abjlf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"拦截http错误\"><a href=\"#拦截http错误\" class=\"headerlink\" title=\"拦截http错误\"></a>拦截http错误</h1><p>http全局错误的拦截可以采用先扩展<code>Http</code>类，重写请求方法后发出错误，之后实现<code>ErrorHandler</code>类来实现。<br>下面是部分关键代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptedHttp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Http</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(</span><br><span class=\"line\">        backend: ConnectionBackend, </span><br><span class=\"line\">        defaultOptions: RequestOptions) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(backend, defaultOptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request(url: string | Request, options?: RequestOptionsArgs): Observable&lt;Response&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在此处可以写一些拦截请求的操作</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.updateUrl(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.request(url, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span>(url: string, options?: RequestOptionsArgs): Observable&lt;Response&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.get(url, <span class=\"keyword\">this</span>.getRequestOptionArgs(options));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"comment\">// 改写请求url,加上req</span></span><br><span class=\"line\">    private updateUrl(req: string) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"string\">\"/api/\"</span> + req;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 改写请求头部</span></span><br><span class=\"line\">    private getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            options = <span class=\"keyword\">new</span> RequestOptions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.headers == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            options.headers = <span class=\"keyword\">new</span> Headers();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        options.headers.append(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上是一个简单的http请求拦截器，它可以改写请求参数，改写请求头部，还有一种写法是实现<code>HttpInterceptor</code>接口（angular5新添加)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHttpInterceptor</span> <span class=\"title\">implements</span> <span class=\"title\">HttpInterceptor</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">intercept(req: HttpRequest&lt;any&gt;, <span class=\"attr\">next</span>: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"intercepted request ... \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Clone the request to add the new header.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> authReq = req.clone(&#123; <span class=\"attr\">headers</span>: req.headers.set(<span class=\"string\">\"headerName\"</span>, <span class=\"string\">\"headerValue\"</span>)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Sending request with new header now ...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//send the newly created request</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> next.handle(authReq)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">error, caught</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//intercept the respons error and displace it to the console</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Error Occurred\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    <span class=\"comment\">//return the error to the method that called it</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.throw(error);</span><br><span class=\"line\">&#125;) <span class=\"keyword\">as</span> any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来实现ErrorHandler类，它可以捕捉各种类型的错误，包括Http请求错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomErrorHandler</span> <span class=\"title\">implements</span> <span class=\"title\">ErrorHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>( @Inject(NotificationService) private notificationService: NotificationService) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleError(error: any): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> msg = <span class=\"keyword\">this</span>.httpErrorHandler(error.rejection || error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    httpErrorHandler(err): string &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> message = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err.status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (err.status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">502</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">                    message = <span class=\"string\">`服务器故障 : \\n详细信息 : <span class=\"subst\">$&#123;err.statusText&#125;</span>:<span class=\"subst\">$&#123;err.json().message&#125;</span>`</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">                    message = <span class=\"string\">`<span class=\"subst\">$&#123;err.json().message&#125;</span>`</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            message = err.message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"发送错误消息\"><a href=\"#发送错误消息\" class=\"headerlink\" title=\"发送错误消息\"></a>发送错误消息</h1><p>捕捉到错误信息以后，需要通知某个服务来显示消息，利用nzMessageService将其显示出来，nzMessageService显示时需要视图载体，这里采用AppComponent作为载体。</p>\n<p>为ErrorHandler添加错误通知功能<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleError(error: any): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = <span class=\"keyword\">this</span>.httpErrorHandler(error.rejection || error);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notificationService.error(msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>notificationService必须类似于EventEmitter一样，收到消息后自动发射到接受方，所以可以采用Subject来作为Message的主体，让Message可以被订阅，也可以被按需求发射。</p>\n<p>Message的模型如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span></span>&#123;</span><br><span class=\"line\">    type: string;</span><br><span class=\"line\">    message: string;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(type, message)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NotificationService</span> </span>&#123;</span><br><span class=\"line\">    public message: Subject&lt;Message&gt; = <span class=\"keyword\">new</span> Subject&lt;Message&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error(message: string): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message.next(<span class=\"keyword\">new</span> Message(<span class=\"string\">'error'</span>, message));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后，只要在AppComponent中订阅Message，就可以在前台进行提示了！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class AppComponent implements OnInit &#123;</span><br><span class=\"line\">  title = &apos;app&apos;;</span><br><span class=\"line\">  constructor(private notification: NotificationService,</span><br><span class=\"line\">    private nzMessageService: NzMessageService) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit()&#123;</span><br><span class=\"line\">    this.notification.message.distinctUntilChanged().subscribe((msg)=&gt;&#123;</span><br><span class=\"line\">      this.nzMessageService.create(msg.type, msg.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，别忘了注册以上这几个服务到AppModule中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http &#123;</span><br><span class=\"line\">  return new InterceptedHttp(xhrBackend, requestOptions);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: Http,</span><br><span class=\"line\">      useFactory: httpFactory,</span><br><span class=\"line\">      deps: [XHRBackend, RequestOptions]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    NotificationService, // added</span><br><span class=\"line\">    &#123; provide: ErrorHandler, useClass: CustomErrorHandler &#125;,</span><br><span class=\"line\">    NzMessageService,</span><br><span class=\"line\">    &#123; provide: NZ_MESSAGE_CONFIG, useValue: &#123; nzDuration: 7000 &#125; &#125;</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"拦截http错误\"><a href=\"#拦截http错误\" class=\"headerlink\" title=\"拦截http错误\"></a>拦截http错误</h1><p>http全局错误的拦截可以采用先扩展<code>Http</code>类，重写请求方法后发出错误，之后实现<code>ErrorHandler</code>类来实现。<br>下面是部分关键代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptedHttp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Http</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(</span><br><span class=\"line\">        backend: ConnectionBackend, </span><br><span class=\"line\">        defaultOptions: RequestOptions) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(backend, defaultOptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request(url: string | Request, options?: RequestOptionsArgs): Observable&lt;Response&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在此处可以写一些拦截请求的操作</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.updateUrl(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.request(url, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span>(url: string, options?: RequestOptionsArgs): Observable&lt;Response&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.get(url, <span class=\"keyword\">this</span>.getRequestOptionArgs(options));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"comment\">// 改写请求url,加上req</span></span><br><span class=\"line\">    private updateUrl(req: string) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"string\">\"/api/\"</span> + req;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 改写请求头部</span></span><br><span class=\"line\">    private getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            options = <span class=\"keyword\">new</span> RequestOptions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.headers == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            options.headers = <span class=\"keyword\">new</span> Headers();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        options.headers.append(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上是一个简单的http请求拦截器，它可以改写请求参数，改写请求头部，还有一种写法是实现<code>HttpInterceptor</code>接口（angular5新添加)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHttpInterceptor</span> <span class=\"title\">implements</span> <span class=\"title\">HttpInterceptor</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">intercept(req: HttpRequest&lt;any&gt;, <span class=\"attr\">next</span>: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"intercepted request ... \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Clone the request to add the new header.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> authReq = req.clone(&#123; <span class=\"attr\">headers</span>: req.headers.set(<span class=\"string\">\"headerName\"</span>, <span class=\"string\">\"headerValue\"</span>)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Sending request with new header now ...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//send the newly created request</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> next.handle(authReq)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">error, caught</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//intercept the respons error and displace it to the console</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Error Occurred\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    <span class=\"comment\">//return the error to the method that called it</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.throw(error);</span><br><span class=\"line\">&#125;) <span class=\"keyword\">as</span> any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来实现ErrorHandler类，它可以捕捉各种类型的错误，包括Http请求错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomErrorHandler</span> <span class=\"title\">implements</span> <span class=\"title\">ErrorHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>( @Inject(NotificationService) private notificationService: NotificationService) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleError(error: any): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> msg = <span class=\"keyword\">this</span>.httpErrorHandler(error.rejection || error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    httpErrorHandler(err): string &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> message = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err.status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (err.status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">502</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">                    message = <span class=\"string\">`服务器故障 : \\n详细信息 : <span class=\"subst\">$&#123;err.statusText&#125;</span>:<span class=\"subst\">$&#123;err.json().message&#125;</span>`</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">                    message = <span class=\"string\">`<span class=\"subst\">$&#123;err.json().message&#125;</span>`</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            message = err.message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"发送错误消息\"><a href=\"#发送错误消息\" class=\"headerlink\" title=\"发送错误消息\"></a>发送错误消息</h1><p>捕捉到错误信息以后，需要通知某个服务来显示消息，利用nzMessageService将其显示出来，nzMessageService显示时需要视图载体，这里采用AppComponent作为载体。</p>\n<p>为ErrorHandler添加错误通知功能<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleError(error: any): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = <span class=\"keyword\">this</span>.httpErrorHandler(error.rejection || error);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notificationService.error(msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>notificationService必须类似于EventEmitter一样，收到消息后自动发射到接受方，所以可以采用Subject来作为Message的主体，让Message可以被订阅，也可以被按需求发射。</p>\n<p>Message的模型如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span></span>&#123;</span><br><span class=\"line\">    type: string;</span><br><span class=\"line\">    message: string;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(type, message)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NotificationService</span> </span>&#123;</span><br><span class=\"line\">    public message: Subject&lt;Message&gt; = <span class=\"keyword\">new</span> Subject&lt;Message&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error(message: string): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message.next(<span class=\"keyword\">new</span> Message(<span class=\"string\">'error'</span>, message));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后，只要在AppComponent中订阅Message，就可以在前台进行提示了！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class AppComponent implements OnInit &#123;</span><br><span class=\"line\">  title = &apos;app&apos;;</span><br><span class=\"line\">  constructor(private notification: NotificationService,</span><br><span class=\"line\">    private nzMessageService: NzMessageService) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit()&#123;</span><br><span class=\"line\">    this.notification.message.distinctUntilChanged().subscribe((msg)=&gt;&#123;</span><br><span class=\"line\">      this.nzMessageService.create(msg.type, msg.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，别忘了注册以上这几个服务到AppModule中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http &#123;</span><br><span class=\"line\">  return new InterceptedHttp(xhrBackend, requestOptions);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: Http,</span><br><span class=\"line\">      useFactory: httpFactory,</span><br><span class=\"line\">      deps: [XHRBackend, RequestOptions]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    NotificationService, // added</span><br><span class=\"line\">    &#123; provide: ErrorHandler, useClass: CustomErrorHandler &#125;,</span><br><span class=\"line\">    NzMessageService,</span><br><span class=\"line\">    &#123; provide: NZ_MESSAGE_CONFIG, useValue: &#123; nzDuration: 7000 &#125; &#125;</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ES6中Object常用API-Object.assign，Object.create， Object.defineProperty","date":"2016-05-09T16:00:00.000Z","_content":"## Object.assign(target, ...sources)\n如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。`String`类型和`Symbol`类型的属性都会被拷贝。`Object.assign` 会跳过那些值为`null`或`undefined`的源对象。\n- 用法：\n```\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, 注意目标对象自身也会改变。\n```\n- 避免浅拷贝\n\n`Object.assign()`拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。\n```\nlet obj1 = { a: 0 , b: { c: 0}};\nlet obj2 = Object.assign({}, obj1);\n\nobj1.a = 1;\nobj1.b.c = 1;\nconsole.log(obj2) // {a:0, b: {c:1}}\n```\n如果要进行深度克隆，就要先创建一个源对象的副本，再进行assign。\n最简单的写法可能是这样：\n```\nfunction clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n```\n\n- ployfill\n\n根据emca-262规范内对assign过程的描述，可以对这个方法进行ployfill。\n1. Let to be ? ToObject(target).\n2. If only one argument was passed, return to.\n3. Let sources be the List of argument values starting with the second argument.\n4. For each element nextSource of sources, in ascending index order, do\n   1. If nextSource is undefined or null, let keys be a new empty List.\n   2. Else,\n      1. Let from be ! ToObject(nextSource).\n      2. Let keys be ? from.[[OwnPropertyKeys]]().\n5. For each element nextKey of keys in List order, do\n   1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n   2. If desc is not undefined and desc.[[Enumerable]] is true, then\n      1. Let propValue be ? Get(from, nextKey).\n      2. Perform ? Set(to, nextKey, propValue, true).\n6. Return to.\n\n```\n// 省略前面的对source的判断\n// function写法\nObject.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    return target;\n};\n\n// defineProperty写法\nObject.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {\n      if (target == null) { // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {\n          for (var nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n```\n\n## Object.create(proto, propertiesObject)\n- 用法\n使用`Object.create`可以很方便的解决继承问题，也可以用`extends`语法糖解决。\n```\nlet Parent = {\n    sayWord: function() {\n        return this.word;\n    }\n}\nlet child = Object.create(Parent, {\n    word: { \n        value: \"foo\",\n        // writable: true,\n        // configurable: true,\n        // enumerable: true\n        // set\n        // get\n    }\n});\nconsole.log(child); // {word: foo}/__proto__.sayWord()\nconsole.log(child.sayWord()); // foo\n```\n- ployfill\n1. If internalSlotsList is not present, set internalSlotsList to a new empty List.\n2. Let obj be a newly created object with an internal slot for each name in internalSlotsList.\n3. Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.\n4. Set obj.[[Prototype]] to proto.\n5. Set obj.[[Extensible]] to true.\n6. Return obj.\n```\n// 来自MDN\nif (typeof Object.create !== \"function\") {\n    Object.create = function (proto, propertiesObject) {\n        if (typeof proto !== 'object' && typeof proto !== 'function') {\n            throw new TypeError('Object prototype may only be an Object: ' + proto);\n        } else if (proto === null) {\n            throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\");\n        }\n\n        if (typeof propertiesObject != 'undefined') throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support a second argument.\");\n        // 实际上还是继承链写法\n        function F() {}\n        F.prototype = proto;\n\n        return new F();\n    };\n}\n```\n\n## Object.defineProperty((bj, prop, descriptor)\n- 用法\n```\nObject.defineProperty(obj, \"key\", {\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: \"static\",\n});\n// 写set,get访问器时，不能同时写writable,value属性\nObject.defineProperty(obj, \"key\", {\n  enumerable: false,\n  configurable: false,\n  set: function(newValue){\n     console.log(newValue) // foo\n     value = 'bar'; // value存在于全局变量\n  },\n  get: function(){\n     return value;\n  }\n});\nconsole.log(obj); // {}/key,get,set\nobj.key = 'foo'\nconsole.log(obj.key) // bar\n```\n- 几个属性的意义\n1. `writable` : 当writable属性设置为false时，不能对这个属性进行赋值运算。严格模式下会报错，普通模式下设置没有作用。\n2. `enumerable`定义了对象的属性是否可以在`for...in`循环和`Object.keys()` 中被枚举。\n3. `configurable`特性表示对象的属性是否可以被删除，以及除`writable`特性外的其他特性是否可以被修改。","source":"_posts/ES6中Object常用API-Object.assign，Object.create， Object.defineProperty.md","raw":"---\ntitle: ES6中Object常用API-Object.assign，Object.create， Object.defineProperty\ndate: 2016-5-10\ncategories:\n- 前端\n- js\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n---\n## Object.assign(target, ...sources)\n如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。`String`类型和`Symbol`类型的属性都会被拷贝。`Object.assign` 会跳过那些值为`null`或`undefined`的源对象。\n- 用法：\n```\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, 注意目标对象自身也会改变。\n```\n- 避免浅拷贝\n\n`Object.assign()`拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。\n```\nlet obj1 = { a: 0 , b: { c: 0}};\nlet obj2 = Object.assign({}, obj1);\n\nobj1.a = 1;\nobj1.b.c = 1;\nconsole.log(obj2) // {a:0, b: {c:1}}\n```\n如果要进行深度克隆，就要先创建一个源对象的副本，再进行assign。\n最简单的写法可能是这样：\n```\nfunction clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n```\n\n- ployfill\n\n根据emca-262规范内对assign过程的描述，可以对这个方法进行ployfill。\n1. Let to be ? ToObject(target).\n2. If only one argument was passed, return to.\n3. Let sources be the List of argument values starting with the second argument.\n4. For each element nextSource of sources, in ascending index order, do\n   1. If nextSource is undefined or null, let keys be a new empty List.\n   2. Else,\n      1. Let from be ! ToObject(nextSource).\n      2. Let keys be ? from.[[OwnPropertyKeys]]().\n5. For each element nextKey of keys in List order, do\n   1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n   2. If desc is not undefined and desc.[[Enumerable]] is true, then\n      1. Let propValue be ? Get(from, nextKey).\n      2. Perform ? Set(to, nextKey, propValue, true).\n6. Return to.\n\n```\n// 省略前面的对source的判断\n// function写法\nObject.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    return target;\n};\n\n// defineProperty写法\nObject.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {\n      if (target == null) { // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {\n          for (var nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n```\n\n## Object.create(proto, propertiesObject)\n- 用法\n使用`Object.create`可以很方便的解决继承问题，也可以用`extends`语法糖解决。\n```\nlet Parent = {\n    sayWord: function() {\n        return this.word;\n    }\n}\nlet child = Object.create(Parent, {\n    word: { \n        value: \"foo\",\n        // writable: true,\n        // configurable: true,\n        // enumerable: true\n        // set\n        // get\n    }\n});\nconsole.log(child); // {word: foo}/__proto__.sayWord()\nconsole.log(child.sayWord()); // foo\n```\n- ployfill\n1. If internalSlotsList is not present, set internalSlotsList to a new empty List.\n2. Let obj be a newly created object with an internal slot for each name in internalSlotsList.\n3. Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.\n4. Set obj.[[Prototype]] to proto.\n5. Set obj.[[Extensible]] to true.\n6. Return obj.\n```\n// 来自MDN\nif (typeof Object.create !== \"function\") {\n    Object.create = function (proto, propertiesObject) {\n        if (typeof proto !== 'object' && typeof proto !== 'function') {\n            throw new TypeError('Object prototype may only be an Object: ' + proto);\n        } else if (proto === null) {\n            throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\");\n        }\n\n        if (typeof propertiesObject != 'undefined') throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support a second argument.\");\n        // 实际上还是继承链写法\n        function F() {}\n        F.prototype = proto;\n\n        return new F();\n    };\n}\n```\n\n## Object.defineProperty((bj, prop, descriptor)\n- 用法\n```\nObject.defineProperty(obj, \"key\", {\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: \"static\",\n});\n// 写set,get访问器时，不能同时写writable,value属性\nObject.defineProperty(obj, \"key\", {\n  enumerable: false,\n  configurable: false,\n  set: function(newValue){\n     console.log(newValue) // foo\n     value = 'bar'; // value存在于全局变量\n  },\n  get: function(){\n     return value;\n  }\n});\nconsole.log(obj); // {}/key,get,set\nobj.key = 'foo'\nconsole.log(obj.key) // bar\n```\n- 几个属性的意义\n1. `writable` : 当writable属性设置为false时，不能对这个属性进行赋值运算。严格模式下会报错，普通模式下设置没有作用。\n2. `enumerable`定义了对象的属性是否可以在`for...in`循环和`Object.keys()` 中被枚举。\n3. `configurable`特性表示对象的属性是否可以被删除，以及除`writable`特性外的其他特性是否可以被修改。","slug":"ES6中Object常用API-Object.assign，Object.create， Object.defineProperty","published":1,"updated":"2019-04-07T09:45:52.987Z","_id":"cju6qrqii001blgv8nzy5ucaq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Object-assign-target-…sources\"><a href=\"#Object-assign-target-…sources\" class=\"headerlink\" title=\"Object.assign(target, …sources)\"></a>Object.assign(target, …sources)</h2><p>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。<code>String</code>类型和<code>Symbol</code>类型的属性都会被拷贝。<code>Object.assign</code> 会跳过那些值为<code>null</code>或<code>undefined</code>的源对象。</p>\n<ul>\n<li><p>用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o1 = &#123; a: 1 &#125;;</span><br><span class=\"line\">var o2 = &#123; b: 2 &#125;;</span><br><span class=\"line\">var o3 = &#123; c: 3 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = Object.assign(o1, o2, o3);</span><br><span class=\"line\">console.log(obj); // &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class=\"line\">console.log(o1);  // &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>避免浅拷贝</p>\n</li>\n</ul>\n<p><code>Object.assign()</code>拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj1 = &#123; a: 0 , b: &#123; c: 0&#125;&#125;;</span><br><span class=\"line\">let obj2 = Object.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a = 1;</span><br><span class=\"line\">obj1.b.c = 1;</span><br><span class=\"line\">console.log(obj2) // &#123;a:0, b: &#123;c:1&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果要进行深度克隆，就要先创建一个源对象的副本，再进行assign。<br>最简单的写法可能是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clone(origin) &#123;</span><br><span class=\"line\">  let originProto = Object.getPrototypeOf(origin);</span><br><span class=\"line\">  return Object.assign(Object.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>ployfill</li>\n</ul>\n<p>根据emca-262规范内对assign过程的描述，可以对这个方法进行ployfill。</p>\n<ol>\n<li>Let to be ? ToObject(target).</li>\n<li>If only one argument was passed, return to.</li>\n<li>Let sources be the List of argument values starting with the second argument.</li>\n<li>For each element nextSource of sources, in ascending index order, do<ol>\n<li>If nextSource is undefined or null, let keys be a new empty List.</li>\n<li>Else,<ol>\n<li>Let from be ! ToObject(nextSource).</li>\n<li>Let keys be ? from.<a href>[OwnPropertyKeys]</a>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>For each element nextKey of keys in List order, do<ol>\n<li>Let desc be ? from.<a href=\"nextKey\">[GetOwnProperty]</a>.</li>\n<li>If desc is not undefined and desc.[[Enumerable]] is true, then<ol>\n<li>Let propValue be ? Get(from, nextKey).</li>\n<li>Perform ? Set(to, nextKey, propValue, true).</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Return to.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 省略前面的对source的判断</span><br><span class=\"line\">// function写法</span><br><span class=\"line\">Object.assign || function (target) &#123;</span><br><span class=\"line\">    for (var i = 1; i &lt; arguments.length; i++) &#123;</span><br><span class=\"line\">        var source = arguments[i];</span><br><span class=\"line\">        for (var key in source) &#123;</span><br><span class=\"line\">          if (Object.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    return target;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// defineProperty写法</span><br><span class=\"line\">Object.defineProperty(Object, &quot;assign&quot;, &#123;</span><br><span class=\"line\">    value: function assign(target, varArgs) &#123;</span><br><span class=\"line\">      if (target == null) &#123; // TypeError if undefined or null</span><br><span class=\"line\">        throw new TypeError(&apos;Cannot convert undefined or null to object&apos;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      var to = Object(target);</span><br><span class=\"line\"></span><br><span class=\"line\">      for (var index = 1; index &lt; arguments.length; index++) &#123;</span><br><span class=\"line\">        var nextSource = arguments[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        if (nextSource != null) &#123;</span><br><span class=\"line\">          for (var nextKey in nextSource) &#123;</span><br><span class=\"line\">            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) &#123;</span><br><span class=\"line\">              to[nextKey] = nextSource[nextKey];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return to;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    writable: true,</span><br><span class=\"line\">    configurable: true</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-create-proto-propertiesObject\"><a href=\"#Object-create-proto-propertiesObject\" class=\"headerlink\" title=\"Object.create(proto, propertiesObject)\"></a>Object.create(proto, propertiesObject)</h2><ul>\n<li><p>用法<br>使用<code>Object.create</code>可以很方便的解决继承问题，也可以用<code>extends</code>语法糖解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let Parent = &#123;</span><br><span class=\"line\">    sayWord: function() &#123;</span><br><span class=\"line\">        return this.word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let child = Object.create(Parent, &#123;</span><br><span class=\"line\">    word: &#123; </span><br><span class=\"line\">        value: &quot;foo&quot;,</span><br><span class=\"line\">        // writable: true,</span><br><span class=\"line\">        // configurable: true,</span><br><span class=\"line\">        // enumerable: true</span><br><span class=\"line\">        // set</span><br><span class=\"line\">        // get</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(child); // &#123;word: foo&#125;/__proto__.sayWord()</span><br><span class=\"line\">console.log(child.sayWord()); // foo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ployfill</p>\n</li>\n</ul>\n<ol>\n<li>If internalSlotsList is not present, set internalSlotsList to a new empty List.</li>\n<li>Let obj be a newly created object with an internal slot for each name in internalSlotsList.</li>\n<li>Set obj’s essential internal methods to the default ordinary object definitions specified in 9.1.</li>\n<li>Set obj.[[Prototype]] to proto.</li>\n<li>Set obj.[[Extensible]] to true.</li>\n<li>Return obj.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 来自MDN</span><br><span class=\"line\">if (typeof Object.create !== &quot;function&quot;) &#123;</span><br><span class=\"line\">    Object.create = function (proto, propertiesObject) &#123;</span><br><span class=\"line\">        if (typeof proto !== &apos;object&apos; &amp;&amp; typeof proto !== &apos;function&apos;) &#123;</span><br><span class=\"line\">            throw new TypeError(&apos;Object prototype may only be an Object: &apos; + proto);</span><br><span class=\"line\">        &#125; else if (proto === null) &#123;</span><br><span class=\"line\">            throw new Error(&quot;This browser&apos;s implementation of Object.create is a shim and doesn&apos;t support &apos;null&apos; as the first argument.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (typeof propertiesObject != &apos;undefined&apos;) throw new Error(&quot;This browser&apos;s implementation of Object.create is a shim and doesn&apos;t support a second argument.&quot;);</span><br><span class=\"line\">        // 实际上还是继承链写法</span><br><span class=\"line\">        function F() &#123;&#125;</span><br><span class=\"line\">        F.prototype = proto;</span><br><span class=\"line\"></span><br><span class=\"line\">        return new F();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Object-defineProperty-bj-prop-descriptor\"><a href=\"#Object-defineProperty-bj-prop-descriptor\" class=\"headerlink\" title=\"Object.defineProperty((bj, prop, descriptor)\"></a>Object.defineProperty((bj, prop, descriptor)</h2><ul>\n<li><p>用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj, &quot;key&quot;, &#123;</span><br><span class=\"line\">  enumerable: false,</span><br><span class=\"line\">  configurable: false,</span><br><span class=\"line\">  writable: false,</span><br><span class=\"line\">  value: &quot;static&quot;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 写set,get访问器时，不能同时写writable,value属性</span><br><span class=\"line\">Object.defineProperty(obj, &quot;key&quot;, &#123;</span><br><span class=\"line\">  enumerable: false,</span><br><span class=\"line\">  configurable: false,</span><br><span class=\"line\">  set: function(newValue)&#123;</span><br><span class=\"line\">     console.log(newValue) // foo</span><br><span class=\"line\">     value = &apos;bar&apos;; // value存在于全局变量</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  get: function()&#123;</span><br><span class=\"line\">     return value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(obj); // &#123;&#125;/key,get,set</span><br><span class=\"line\">obj.key = &apos;foo&apos;</span><br><span class=\"line\">console.log(obj.key) // bar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几个属性的意义</p>\n</li>\n</ul>\n<ol>\n<li><code>writable</code> : 当writable属性设置为false时，不能对这个属性进行赋值运算。严格模式下会报错，普通模式下设置没有作用。</li>\n<li><code>enumerable</code>定义了对象的属性是否可以在<code>for...in</code>循环和<code>Object.keys()</code> 中被枚举。</li>\n<li><code>configurable</code>特性表示对象的属性是否可以被删除，以及除<code>writable</code>特性外的其他特性是否可以被修改。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Object-assign-target-…sources\"><a href=\"#Object-assign-target-…sources\" class=\"headerlink\" title=\"Object.assign(target, …sources)\"></a>Object.assign(target, …sources)</h2><p>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。<code>String</code>类型和<code>Symbol</code>类型的属性都会被拷贝。<code>Object.assign</code> 会跳过那些值为<code>null</code>或<code>undefined</code>的源对象。</p>\n<ul>\n<li><p>用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o1 = &#123; a: 1 &#125;;</span><br><span class=\"line\">var o2 = &#123; b: 2 &#125;;</span><br><span class=\"line\">var o3 = &#123; c: 3 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = Object.assign(o1, o2, o3);</span><br><span class=\"line\">console.log(obj); // &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class=\"line\">console.log(o1);  // &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>避免浅拷贝</p>\n</li>\n</ul>\n<p><code>Object.assign()</code>拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj1 = &#123; a: 0 , b: &#123; c: 0&#125;&#125;;</span><br><span class=\"line\">let obj2 = Object.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a = 1;</span><br><span class=\"line\">obj1.b.c = 1;</span><br><span class=\"line\">console.log(obj2) // &#123;a:0, b: &#123;c:1&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果要进行深度克隆，就要先创建一个源对象的副本，再进行assign。<br>最简单的写法可能是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clone(origin) &#123;</span><br><span class=\"line\">  let originProto = Object.getPrototypeOf(origin);</span><br><span class=\"line\">  return Object.assign(Object.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>ployfill</li>\n</ul>\n<p>根据emca-262规范内对assign过程的描述，可以对这个方法进行ployfill。</p>\n<ol>\n<li>Let to be ? ToObject(target).</li>\n<li>If only one argument was passed, return to.</li>\n<li>Let sources be the List of argument values starting with the second argument.</li>\n<li>For each element nextSource of sources, in ascending index order, do<ol>\n<li>If nextSource is undefined or null, let keys be a new empty List.</li>\n<li>Else,<ol>\n<li>Let from be ! ToObject(nextSource).</li>\n<li>Let keys be ? from.<a href>[OwnPropertyKeys]</a>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>For each element nextKey of keys in List order, do<ol>\n<li>Let desc be ? from.<a href=\"nextKey\">[GetOwnProperty]</a>.</li>\n<li>If desc is not undefined and desc.[[Enumerable]] is true, then<ol>\n<li>Let propValue be ? Get(from, nextKey).</li>\n<li>Perform ? Set(to, nextKey, propValue, true).</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Return to.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 省略前面的对source的判断</span><br><span class=\"line\">// function写法</span><br><span class=\"line\">Object.assign || function (target) &#123;</span><br><span class=\"line\">    for (var i = 1; i &lt; arguments.length; i++) &#123;</span><br><span class=\"line\">        var source = arguments[i];</span><br><span class=\"line\">        for (var key in source) &#123;</span><br><span class=\"line\">          if (Object.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    return target;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// defineProperty写法</span><br><span class=\"line\">Object.defineProperty(Object, &quot;assign&quot;, &#123;</span><br><span class=\"line\">    value: function assign(target, varArgs) &#123;</span><br><span class=\"line\">      if (target == null) &#123; // TypeError if undefined or null</span><br><span class=\"line\">        throw new TypeError(&apos;Cannot convert undefined or null to object&apos;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      var to = Object(target);</span><br><span class=\"line\"></span><br><span class=\"line\">      for (var index = 1; index &lt; arguments.length; index++) &#123;</span><br><span class=\"line\">        var nextSource = arguments[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        if (nextSource != null) &#123;</span><br><span class=\"line\">          for (var nextKey in nextSource) &#123;</span><br><span class=\"line\">            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) &#123;</span><br><span class=\"line\">              to[nextKey] = nextSource[nextKey];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return to;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    writable: true,</span><br><span class=\"line\">    configurable: true</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-create-proto-propertiesObject\"><a href=\"#Object-create-proto-propertiesObject\" class=\"headerlink\" title=\"Object.create(proto, propertiesObject)\"></a>Object.create(proto, propertiesObject)</h2><ul>\n<li><p>用法<br>使用<code>Object.create</code>可以很方便的解决继承问题，也可以用<code>extends</code>语法糖解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let Parent = &#123;</span><br><span class=\"line\">    sayWord: function() &#123;</span><br><span class=\"line\">        return this.word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let child = Object.create(Parent, &#123;</span><br><span class=\"line\">    word: &#123; </span><br><span class=\"line\">        value: &quot;foo&quot;,</span><br><span class=\"line\">        // writable: true,</span><br><span class=\"line\">        // configurable: true,</span><br><span class=\"line\">        // enumerable: true</span><br><span class=\"line\">        // set</span><br><span class=\"line\">        // get</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(child); // &#123;word: foo&#125;/__proto__.sayWord()</span><br><span class=\"line\">console.log(child.sayWord()); // foo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ployfill</p>\n</li>\n</ul>\n<ol>\n<li>If internalSlotsList is not present, set internalSlotsList to a new empty List.</li>\n<li>Let obj be a newly created object with an internal slot for each name in internalSlotsList.</li>\n<li>Set obj’s essential internal methods to the default ordinary object definitions specified in 9.1.</li>\n<li>Set obj.[[Prototype]] to proto.</li>\n<li>Set obj.[[Extensible]] to true.</li>\n<li>Return obj.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 来自MDN</span><br><span class=\"line\">if (typeof Object.create !== &quot;function&quot;) &#123;</span><br><span class=\"line\">    Object.create = function (proto, propertiesObject) &#123;</span><br><span class=\"line\">        if (typeof proto !== &apos;object&apos; &amp;&amp; typeof proto !== &apos;function&apos;) &#123;</span><br><span class=\"line\">            throw new TypeError(&apos;Object prototype may only be an Object: &apos; + proto);</span><br><span class=\"line\">        &#125; else if (proto === null) &#123;</span><br><span class=\"line\">            throw new Error(&quot;This browser&apos;s implementation of Object.create is a shim and doesn&apos;t support &apos;null&apos; as the first argument.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (typeof propertiesObject != &apos;undefined&apos;) throw new Error(&quot;This browser&apos;s implementation of Object.create is a shim and doesn&apos;t support a second argument.&quot;);</span><br><span class=\"line\">        // 实际上还是继承链写法</span><br><span class=\"line\">        function F() &#123;&#125;</span><br><span class=\"line\">        F.prototype = proto;</span><br><span class=\"line\"></span><br><span class=\"line\">        return new F();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Object-defineProperty-bj-prop-descriptor\"><a href=\"#Object-defineProperty-bj-prop-descriptor\" class=\"headerlink\" title=\"Object.defineProperty((bj, prop, descriptor)\"></a>Object.defineProperty((bj, prop, descriptor)</h2><ul>\n<li><p>用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj, &quot;key&quot;, &#123;</span><br><span class=\"line\">  enumerable: false,</span><br><span class=\"line\">  configurable: false,</span><br><span class=\"line\">  writable: false,</span><br><span class=\"line\">  value: &quot;static&quot;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 写set,get访问器时，不能同时写writable,value属性</span><br><span class=\"line\">Object.defineProperty(obj, &quot;key&quot;, &#123;</span><br><span class=\"line\">  enumerable: false,</span><br><span class=\"line\">  configurable: false,</span><br><span class=\"line\">  set: function(newValue)&#123;</span><br><span class=\"line\">     console.log(newValue) // foo</span><br><span class=\"line\">     value = &apos;bar&apos;; // value存在于全局变量</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  get: function()&#123;</span><br><span class=\"line\">     return value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(obj); // &#123;&#125;/key,get,set</span><br><span class=\"line\">obj.key = &apos;foo&apos;</span><br><span class=\"line\">console.log(obj.key) // bar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几个属性的意义</p>\n</li>\n</ul>\n<ol>\n<li><code>writable</code> : 当writable属性设置为false时，不能对这个属性进行赋值运算。严格模式下会报错，普通模式下设置没有作用。</li>\n<li><code>enumerable</code>定义了对象的属性是否可以在<code>for...in</code>循环和<code>Object.keys()</code> 中被枚举。</li>\n<li><code>configurable</code>特性表示对象的属性是否可以被删除，以及除<code>writable</code>特性外的其他特性是否可以被修改。</li>\n</ol>\n"},{"title":"ES6的迭代协议-Sympol.iterator","date":"2016-05-19T16:00:00.000Z","_content":"- `Array`和`Map`及`Set`,`String`有内建的可迭代协议，从chrome上可以看出这一点，所以可以使用各类迭代方法对其中的成员进行访问。\n- 如果要让没有迭代功能的对象具有迭代性，需要实现`Sympol.iterator`方法。\n\n有以下方式来实现可迭代。\n1. 传统方式,缺点是无法使用`for-of`，只能用`next()`进行迭代\n```\nfunction Iterator(array){\n    var nextIndex = 0;\n    \n    return {\n       next: function(){\n           return nextIndex < array.length ?\n               {value: array[nextIndex++], done: false} :\n               {done: true};\n       }\n    };\n}\n\nlet it = Iterator(['foo', 'bar']);\n\nconsole.log(it.next().value); // 'foo'\nconsole.log(it.next().value); // 'bar'\nconsole.log(it.next().done);  // true\n```\n2. Sympol.iterator方式，在这种方式下，没有办法使用类似next()方法来进行迭代\n```\nconst Iterator = {\n    [Symbol.iterator]() {\n        let step = 0;\n        const iterator = {\n            next() {\n                if (step <= 2) {\n                    step++;\n                }\n                switch (step) {\n                    case 1:\n                        return { value: 'foo', done: false };\n                    case 2:\n                        return { value: 'bar', done: false };\n                    default:\n                        return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n};\n// 解构为 foo bar\nconsole.log(...Iterator);\n// 迭代为 foo bar\nfor(let c of Iterator){\n   console.log(c);\n}\n// 得到 ['f','o','o','b','a','r']\nArray.from(Iterator);     \n```\n3. Generator形式，与es6配合最为紧密，支持方法最多\n```\nfunction* Iterator(array){\n    var nextIndex = 0;\n    \n    while(nextIndex < array.length){\n        yield array[nextIndex++];\n    }\n}\n\nvar gen = Iterator(['foo', 'bar']);\n// 得到IteratorResult（chrome,firefxo) {value: 'foo', done: false}\nconsole.log(gen.next()); \nconsole.log(gen.next().value); // bar\n// 得到 'foo', 'bar'\nconsole.log(...Iterator(['foo', 'bar']));\n// 得到 'foo', 'bar'\nfor(let c of gen){\n    console.log(c);\n}\n// 得到 ['foo', 'bar']\nArray.from(gen);\n```\n另外还有一种无限迭代方式\n```\nfunction* idMaker(){\n    var index = 0;\n    while(true)\n        yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // '0'\nconsole.log(gen.next().value); // '1'\nconsole.log(gen.next().value); // '2'\n```","source":"_posts/ES6中的迭代协议-Sympol.iterator.md","raw":"---\ntitle: ES6的迭代协议-Sympol.iterator\ndate: 2016-5-20\ncategories:\n- 前端\n- js\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n---\n- `Array`和`Map`及`Set`,`String`有内建的可迭代协议，从chrome上可以看出这一点，所以可以使用各类迭代方法对其中的成员进行访问。\n- 如果要让没有迭代功能的对象具有迭代性，需要实现`Sympol.iterator`方法。\n\n有以下方式来实现可迭代。\n1. 传统方式,缺点是无法使用`for-of`，只能用`next()`进行迭代\n```\nfunction Iterator(array){\n    var nextIndex = 0;\n    \n    return {\n       next: function(){\n           return nextIndex < array.length ?\n               {value: array[nextIndex++], done: false} :\n               {done: true};\n       }\n    };\n}\n\nlet it = Iterator(['foo', 'bar']);\n\nconsole.log(it.next().value); // 'foo'\nconsole.log(it.next().value); // 'bar'\nconsole.log(it.next().done);  // true\n```\n2. Sympol.iterator方式，在这种方式下，没有办法使用类似next()方法来进行迭代\n```\nconst Iterator = {\n    [Symbol.iterator]() {\n        let step = 0;\n        const iterator = {\n            next() {\n                if (step <= 2) {\n                    step++;\n                }\n                switch (step) {\n                    case 1:\n                        return { value: 'foo', done: false };\n                    case 2:\n                        return { value: 'bar', done: false };\n                    default:\n                        return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n};\n// 解构为 foo bar\nconsole.log(...Iterator);\n// 迭代为 foo bar\nfor(let c of Iterator){\n   console.log(c);\n}\n// 得到 ['f','o','o','b','a','r']\nArray.from(Iterator);     \n```\n3. Generator形式，与es6配合最为紧密，支持方法最多\n```\nfunction* Iterator(array){\n    var nextIndex = 0;\n    \n    while(nextIndex < array.length){\n        yield array[nextIndex++];\n    }\n}\n\nvar gen = Iterator(['foo', 'bar']);\n// 得到IteratorResult（chrome,firefxo) {value: 'foo', done: false}\nconsole.log(gen.next()); \nconsole.log(gen.next().value); // bar\n// 得到 'foo', 'bar'\nconsole.log(...Iterator(['foo', 'bar']));\n// 得到 'foo', 'bar'\nfor(let c of gen){\n    console.log(c);\n}\n// 得到 ['foo', 'bar']\nArray.from(gen);\n```\n另外还有一种无限迭代方式\n```\nfunction* idMaker(){\n    var index = 0;\n    while(true)\n        yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // '0'\nconsole.log(gen.next().value); // '1'\nconsole.log(gen.next().value); // '2'\n```","slug":"ES6中的迭代协议-Sympol.iterator","published":1,"updated":"2019-04-07T09:46:09.814Z","_id":"cju6qs3lt001ilgv88y2j0xja","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><code>Array</code>和<code>Map</code>及<code>Set</code>,<code>String</code>有内建的可迭代协议，从chrome上可以看出这一点，所以可以使用各类迭代方法对其中的成员进行访问。</li>\n<li>如果要让没有迭代功能的对象具有迭代性，需要实现<code>Sympol.iterator</code>方法。</li>\n</ul>\n<p>有以下方式来实现可迭代。</p>\n<ol>\n<li><p>传统方式,缺点是无法使用<code>for-of</code>，只能用<code>next()</code>进行迭代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Iterator(array)&#123;</span><br><span class=\"line\">    var nextIndex = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">       next: function()&#123;</span><br><span class=\"line\">           return nextIndex &lt; array.length ?</span><br><span class=\"line\">               &#123;value: array[nextIndex++], done: false&#125; :</span><br><span class=\"line\">               &#123;done: true&#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let it = Iterator([&apos;foo&apos;, &apos;bar&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(it.next().value); // &apos;foo&apos;</span><br><span class=\"line\">console.log(it.next().value); // &apos;bar&apos;</span><br><span class=\"line\">console.log(it.next().done);  // true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Sympol.iterator方式，在这种方式下，没有办法使用类似next()方法来进行迭代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Iterator = &#123;</span><br><span class=\"line\">    [Symbol.iterator]() &#123;</span><br><span class=\"line\">        let step = 0;</span><br><span class=\"line\">        const iterator = &#123;</span><br><span class=\"line\">            next() &#123;</span><br><span class=\"line\">                if (step &lt;= 2) &#123;</span><br><span class=\"line\">                    step++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                switch (step) &#123;</span><br><span class=\"line\">                    case 1:</span><br><span class=\"line\">                        return &#123; value: &apos;foo&apos;, done: false &#125;;</span><br><span class=\"line\">                    case 2:</span><br><span class=\"line\">                        return &#123; value: &apos;bar&apos;, done: false &#125;;</span><br><span class=\"line\">                    default:</span><br><span class=\"line\">                        return &#123; value: undefined, done: true &#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return iterator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 解构为 foo bar</span><br><span class=\"line\">console.log(...Iterator);</span><br><span class=\"line\">// 迭代为 foo bar</span><br><span class=\"line\">for(let c of Iterator)&#123;</span><br><span class=\"line\">   console.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 得到 [&apos;f&apos;,&apos;o&apos;,&apos;o&apos;,&apos;b&apos;,&apos;a&apos;,&apos;r&apos;]</span><br><span class=\"line\">Array.from(Iterator);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Generator形式，与es6配合最为紧密，支持方法最多</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* Iterator(array)&#123;</span><br><span class=\"line\">    var nextIndex = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    while(nextIndex &lt; array.length)&#123;</span><br><span class=\"line\">        yield array[nextIndex++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var gen = Iterator([&apos;foo&apos;, &apos;bar&apos;]);</span><br><span class=\"line\">// 得到IteratorResult（chrome,firefxo) &#123;value: &apos;foo&apos;, done: false&#125;</span><br><span class=\"line\">console.log(gen.next()); </span><br><span class=\"line\">console.log(gen.next().value); // bar</span><br><span class=\"line\">// 得到 &apos;foo&apos;, &apos;bar&apos;</span><br><span class=\"line\">console.log(...Iterator([&apos;foo&apos;, &apos;bar&apos;]));</span><br><span class=\"line\">// 得到 &apos;foo&apos;, &apos;bar&apos;</span><br><span class=\"line\">for(let c of gen)&#123;</span><br><span class=\"line\">    console.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 得到 [&apos;foo&apos;, &apos;bar&apos;]</span><br><span class=\"line\">Array.from(gen);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>另外还有一种无限迭代方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* idMaker()&#123;</span><br><span class=\"line\">    var index = 0;</span><br><span class=\"line\">    while(true)</span><br><span class=\"line\">        yield index++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var gen = idMaker();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(gen.next().value); // &apos;0&apos;</span><br><span class=\"line\">console.log(gen.next().value); // &apos;1&apos;</span><br><span class=\"line\">console.log(gen.next().value); // &apos;2&apos;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><code>Array</code>和<code>Map</code>及<code>Set</code>,<code>String</code>有内建的可迭代协议，从chrome上可以看出这一点，所以可以使用各类迭代方法对其中的成员进行访问。</li>\n<li>如果要让没有迭代功能的对象具有迭代性，需要实现<code>Sympol.iterator</code>方法。</li>\n</ul>\n<p>有以下方式来实现可迭代。</p>\n<ol>\n<li><p>传统方式,缺点是无法使用<code>for-of</code>，只能用<code>next()</code>进行迭代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Iterator(array)&#123;</span><br><span class=\"line\">    var nextIndex = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">       next: function()&#123;</span><br><span class=\"line\">           return nextIndex &lt; array.length ?</span><br><span class=\"line\">               &#123;value: array[nextIndex++], done: false&#125; :</span><br><span class=\"line\">               &#123;done: true&#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let it = Iterator([&apos;foo&apos;, &apos;bar&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(it.next().value); // &apos;foo&apos;</span><br><span class=\"line\">console.log(it.next().value); // &apos;bar&apos;</span><br><span class=\"line\">console.log(it.next().done);  // true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Sympol.iterator方式，在这种方式下，没有办法使用类似next()方法来进行迭代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Iterator = &#123;</span><br><span class=\"line\">    [Symbol.iterator]() &#123;</span><br><span class=\"line\">        let step = 0;</span><br><span class=\"line\">        const iterator = &#123;</span><br><span class=\"line\">            next() &#123;</span><br><span class=\"line\">                if (step &lt;= 2) &#123;</span><br><span class=\"line\">                    step++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                switch (step) &#123;</span><br><span class=\"line\">                    case 1:</span><br><span class=\"line\">                        return &#123; value: &apos;foo&apos;, done: false &#125;;</span><br><span class=\"line\">                    case 2:</span><br><span class=\"line\">                        return &#123; value: &apos;bar&apos;, done: false &#125;;</span><br><span class=\"line\">                    default:</span><br><span class=\"line\">                        return &#123; value: undefined, done: true &#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return iterator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 解构为 foo bar</span><br><span class=\"line\">console.log(...Iterator);</span><br><span class=\"line\">// 迭代为 foo bar</span><br><span class=\"line\">for(let c of Iterator)&#123;</span><br><span class=\"line\">   console.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 得到 [&apos;f&apos;,&apos;o&apos;,&apos;o&apos;,&apos;b&apos;,&apos;a&apos;,&apos;r&apos;]</span><br><span class=\"line\">Array.from(Iterator);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Generator形式，与es6配合最为紧密，支持方法最多</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* Iterator(array)&#123;</span><br><span class=\"line\">    var nextIndex = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    while(nextIndex &lt; array.length)&#123;</span><br><span class=\"line\">        yield array[nextIndex++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var gen = Iterator([&apos;foo&apos;, &apos;bar&apos;]);</span><br><span class=\"line\">// 得到IteratorResult（chrome,firefxo) &#123;value: &apos;foo&apos;, done: false&#125;</span><br><span class=\"line\">console.log(gen.next()); </span><br><span class=\"line\">console.log(gen.next().value); // bar</span><br><span class=\"line\">// 得到 &apos;foo&apos;, &apos;bar&apos;</span><br><span class=\"line\">console.log(...Iterator([&apos;foo&apos;, &apos;bar&apos;]));</span><br><span class=\"line\">// 得到 &apos;foo&apos;, &apos;bar&apos;</span><br><span class=\"line\">for(let c of gen)&#123;</span><br><span class=\"line\">    console.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 得到 [&apos;foo&apos;, &apos;bar&apos;]</span><br><span class=\"line\">Array.from(gen);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>另外还有一种无限迭代方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* idMaker()&#123;</span><br><span class=\"line\">    var index = 0;</span><br><span class=\"line\">    while(true)</span><br><span class=\"line\">        yield index++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var gen = idMaker();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(gen.next().value); // &apos;0&apos;</span><br><span class=\"line\">console.log(gen.next().value); // &apos;1&apos;</span><br><span class=\"line\">console.log(gen.next().value); // &apos;2&apos;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ES6中的新集合类型-map, weakMap,set,weakSet","date":"2016-05-15T16:00:00.000Z","_content":"# Map\n*ecma-262* 规范中，23节 *keyed Collection* 对`Map`有如下定义：\n> Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map's collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.\n\n`Map`对象是key-value的集合，key和value可以是es的任意类型。key值具有唯一性，分辨一个key是不是唯一的，使用的是严格比较法。\n\n> The Map constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified  Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.\n\n`Map`构造函数被设计成可以继承的，子类可以用`extends`语句来进行扩展。子类的构造函数在对`Map`进行继承的时候，必须要包含一个对`Map`构造函数的super call，这样就可以使用`Map.prototype`的内置方法。\n\n### API Methods：\n``` javascript\nMap.prototype.clear\nMap.prototype.delete\nMap.prototype.entries\nMap.prototype.forEach(callbackfn[,thisArg])\nMap.prototype.get(key)\nMap.prototype.has(key)\nMap.prototype.keys\nMap.prototype.set(key,value)\nMap.prototype.size\nMap.prototype.values()\n```\n- key相同的判断：\n\n在内存地址不一样时，值无法被取到\n```\nconst map = new Map();\nmap.set(['a'], 1);\nmap.set(['a'], 2);\nconsole.log(map.get(['a'])); // 此处的['a']的内存地址和之前的都不一样，虽然值相等，仍然get不到值\n```\n严格比较法带来的现象\n```\nconst map = new Map();\nmap.set(-0, 1);\nmap.get(+0); // 是可以get到的\nmap.set(undfined, 1);\nmap.get(null); // get不到\n```\n# WeakMap\n*ecma-262* 规范中，23节 *keyed Collection* 对`WeakMap`有如下定义：\n\n> WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.\n\n`WeakMap`对象是key-value的集合，key必须是object（不能是基本数据类型）而value可以是es支持的任意类型。`WeakMap`可以查询是不是含有特定key，但是没有对key进行枚举的机制。如果一个作为`WeakMap`的key的object只能被WeakMap自己所引用，那这个key-value pair就会被自动移除。`WeakMap`的实现必须自主检测这类key-value pair有没有引用者，并及时清除。\n\n### API Methods：\n```\nWeakMap.prototype.delete\nWeakMap.prototype.get\nWeakMap.prototype.has\nWeakMap.prototype.set\n```\n\n可以看出`WeakMap`和`Map`有以下的不同：\n1. 由于没有枚举，弱引用的特性，`WeakMap`只有四个方法`delete,get,has,set`\n2. `WeakMap`每个键对自己所引用对象的引用是 \"弱引用\",GC在计算对象引用数量的时候并不会把弱引用计算进去。这样当一个对象除了WeakMap没有其他引用的时候就会被GC回收掉。 只要没有外部引用，\n3. `WeakMap`只能接受`object`作为键\n\nWeakMap可以用来避免内存泄漏，存储那些将来可能会消失的对象作为键。\n\n# Set & WeakSet\n*ecma-262* 规范中，23节 *keyed Collection* 对`Set`有如下定义：\n```\nSet objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set's collection. Distinct values are discriminated using the SameValueZero comparison algorithm.\n\nSet objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation model.\n```\n`Set`对象是es任意类型的集合。每个值都都只能出现一次。分辨唯一值用的是严格比较法。\n\n`Set`实现时采用hash表或是其它机制，提供一种随着集合规模扩大而线性发展的访问原则。`Set`对象内的数据结构只是用来反映出必要的可观察的语义，而并不是用来作为一种可行的实现模型。\n\n### API Methods:\n```\nSet.prototype.add\nSet.prototype.clear\nSet.prototype.delete\nSet.prototype.entries\nSet.prototype.forEach\nSet.prototype.has(value)\nSet.prototype.keys Set.prototype.size Set.prototype.values\n```\n特性如同传统编程意义上的`Set`,和`Map`类似有key相同判断特性。\n同样的，`WeakSet`和`WeakMap`也有相同的特性，即:\n1. 只能add对象而不能是其它原始数据类型\n2. `WeakSet`对对象的引用是弱引用，所以`WeakSet`不能枚举，也没有`size`。\n3. 除此之外，以上所说的所有类型，都可以接受可迭代对象作为初始化参数，因为它们都内建了Sympol.iterator方法。","source":"_posts/ES6中的新集合类型-map, weakMap,set,weakSet.md","raw":"---\ntitle: ES6中的新集合类型-map, weakMap,set,weakSet\ndate: 2016-5-16\ncategories:\n- 前端\n- js\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n---\n# Map\n*ecma-262* 规范中，23节 *keyed Collection* 对`Map`有如下定义：\n> Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map's collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.\n\n`Map`对象是key-value的集合，key和value可以是es的任意类型。key值具有唯一性，分辨一个key是不是唯一的，使用的是严格比较法。\n\n> The Map constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified  Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.\n\n`Map`构造函数被设计成可以继承的，子类可以用`extends`语句来进行扩展。子类的构造函数在对`Map`进行继承的时候，必须要包含一个对`Map`构造函数的super call，这样就可以使用`Map.prototype`的内置方法。\n\n### API Methods：\n``` javascript\nMap.prototype.clear\nMap.prototype.delete\nMap.prototype.entries\nMap.prototype.forEach(callbackfn[,thisArg])\nMap.prototype.get(key)\nMap.prototype.has(key)\nMap.prototype.keys\nMap.prototype.set(key,value)\nMap.prototype.size\nMap.prototype.values()\n```\n- key相同的判断：\n\n在内存地址不一样时，值无法被取到\n```\nconst map = new Map();\nmap.set(['a'], 1);\nmap.set(['a'], 2);\nconsole.log(map.get(['a'])); // 此处的['a']的内存地址和之前的都不一样，虽然值相等，仍然get不到值\n```\n严格比较法带来的现象\n```\nconst map = new Map();\nmap.set(-0, 1);\nmap.get(+0); // 是可以get到的\nmap.set(undfined, 1);\nmap.get(null); // get不到\n```\n# WeakMap\n*ecma-262* 规范中，23节 *keyed Collection* 对`WeakMap`有如下定义：\n\n> WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.\n\n`WeakMap`对象是key-value的集合，key必须是object（不能是基本数据类型）而value可以是es支持的任意类型。`WeakMap`可以查询是不是含有特定key，但是没有对key进行枚举的机制。如果一个作为`WeakMap`的key的object只能被WeakMap自己所引用，那这个key-value pair就会被自动移除。`WeakMap`的实现必须自主检测这类key-value pair有没有引用者，并及时清除。\n\n### API Methods：\n```\nWeakMap.prototype.delete\nWeakMap.prototype.get\nWeakMap.prototype.has\nWeakMap.prototype.set\n```\n\n可以看出`WeakMap`和`Map`有以下的不同：\n1. 由于没有枚举，弱引用的特性，`WeakMap`只有四个方法`delete,get,has,set`\n2. `WeakMap`每个键对自己所引用对象的引用是 \"弱引用\",GC在计算对象引用数量的时候并不会把弱引用计算进去。这样当一个对象除了WeakMap没有其他引用的时候就会被GC回收掉。 只要没有外部引用，\n3. `WeakMap`只能接受`object`作为键\n\nWeakMap可以用来避免内存泄漏，存储那些将来可能会消失的对象作为键。\n\n# Set & WeakSet\n*ecma-262* 规范中，23节 *keyed Collection* 对`Set`有如下定义：\n```\nSet objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set's collection. Distinct values are discriminated using the SameValueZero comparison algorithm.\n\nSet objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation model.\n```\n`Set`对象是es任意类型的集合。每个值都都只能出现一次。分辨唯一值用的是严格比较法。\n\n`Set`实现时采用hash表或是其它机制，提供一种随着集合规模扩大而线性发展的访问原则。`Set`对象内的数据结构只是用来反映出必要的可观察的语义，而并不是用来作为一种可行的实现模型。\n\n### API Methods:\n```\nSet.prototype.add\nSet.prototype.clear\nSet.prototype.delete\nSet.prototype.entries\nSet.prototype.forEach\nSet.prototype.has(value)\nSet.prototype.keys Set.prototype.size Set.prototype.values\n```\n特性如同传统编程意义上的`Set`,和`Map`类似有key相同判断特性。\n同样的，`WeakSet`和`WeakMap`也有相同的特性，即:\n1. 只能add对象而不能是其它原始数据类型\n2. `WeakSet`对对象的引用是弱引用，所以`WeakSet`不能枚举，也没有`size`。\n3. 除此之外，以上所说的所有类型，都可以接受可迭代对象作为初始化参数，因为它们都内建了Sympol.iterator方法。","slug":"ES6中的新集合类型-map, weakMap,set,weakSet","published":1,"updated":"2019-04-07T09:46:30.400Z","_id":"cju6qsjdl001plgv88flx8q38","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>Map</code>有如下定义：</p>\n<blockquote>\n<p>Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map’s collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.</p>\n</blockquote>\n<p><code>Map</code>对象是key-value的集合，key和value可以是es的任意类型。key值具有唯一性，分辨一个key是不是唯一的，使用的是严格比较法。</p>\n<blockquote>\n<p>The Map constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified  Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.</p>\n</blockquote>\n<p><code>Map</code>构造函数被设计成可以继承的，子类可以用<code>extends</code>语句来进行扩展。子类的构造函数在对<code>Map</code>进行继承的时候，必须要包含一个对<code>Map</code>构造函数的super call，这样就可以使用<code>Map.prototype</code>的内置方法。</p>\n<h3 id=\"API-Methods：\"><a href=\"#API-Methods：\" class=\"headerlink\" title=\"API Methods：\"></a>API Methods：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.clear</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.delete</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.entries</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.forEach(callbackfn[,thisArg])</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.get(key)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.has(key)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.keys</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.set(key,value)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.size</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.values()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>key相同的判断：</li>\n</ul>\n<p>在内存地址不一样时，值无法被取到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set([&apos;a&apos;], 1);</span><br><span class=\"line\">map.set([&apos;a&apos;], 2);</span><br><span class=\"line\">console.log(map.get([&apos;a&apos;])); // 此处的[&apos;a&apos;]的内存地址和之前的都不一样，虽然值相等，仍然get不到值</span><br></pre></td></tr></table></figure></p>\n<p>严格比较法带来的现象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set(-0, 1);</span><br><span class=\"line\">map.get(+0); // 是可以get到的</span><br><span class=\"line\">map.set(undfined, 1);</span><br><span class=\"line\">map.get(null); // get不到</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>WeakMap</code>有如下定义：</p>\n<blockquote>\n<p>WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.</p>\n</blockquote>\n<p><code>WeakMap</code>对象是key-value的集合，key必须是object（不能是基本数据类型）而value可以是es支持的任意类型。<code>WeakMap</code>可以查询是不是含有特定key，但是没有对key进行枚举的机制。如果一个作为<code>WeakMap</code>的key的object只能被WeakMap自己所引用，那这个key-value pair就会被自动移除。<code>WeakMap</code>的实现必须自主检测这类key-value pair有没有引用者，并及时清除。</p>\n<h3 id=\"API-Methods：-1\"><a href=\"#API-Methods：-1\" class=\"headerlink\" title=\"API Methods：\"></a>API Methods：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakMap.prototype.delete</span><br><span class=\"line\">WeakMap.prototype.get</span><br><span class=\"line\">WeakMap.prototype.has</span><br><span class=\"line\">WeakMap.prototype.set</span><br></pre></td></tr></table></figure>\n<p>可以看出<code>WeakMap</code>和<code>Map</code>有以下的不同：</p>\n<ol>\n<li>由于没有枚举，弱引用的特性，<code>WeakMap</code>只有四个方法<code>delete,get,has,set</code></li>\n<li><code>WeakMap</code>每个键对自己所引用对象的引用是 “弱引用”,GC在计算对象引用数量的时候并不会把弱引用计算进去。这样当一个对象除了WeakMap没有其他引用的时候就会被GC回收掉。 只要没有外部引用，</li>\n<li><code>WeakMap</code>只能接受<code>object</code>作为键</li>\n</ol>\n<p>WeakMap可以用来避免内存泄漏，存储那些将来可能会消失的对象作为键。</p>\n<h1 id=\"Set-amp-WeakSet\"><a href=\"#Set-amp-WeakSet\" class=\"headerlink\" title=\"Set &amp; WeakSet\"></a>Set &amp; WeakSet</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>Set</code>有如下定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set&apos;s collection. Distinct values are discriminated using the SameValueZero comparison algorithm.</span><br><span class=\"line\"></span><br><span class=\"line\">Set objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation model.</span><br></pre></td></tr></table></figure></p>\n<p><code>Set</code>对象是es任意类型的集合。每个值都都只能出现一次。分辨唯一值用的是严格比较法。</p>\n<p><code>Set</code>实现时采用hash表或是其它机制，提供一种随着集合规模扩大而线性发展的访问原则。<code>Set</code>对象内的数据结构只是用来反映出必要的可观察的语义，而并不是用来作为一种可行的实现模型。</p>\n<h3 id=\"API-Methods\"><a href=\"#API-Methods\" class=\"headerlink\" title=\"API Methods:\"></a>API Methods:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set.prototype.add</span><br><span class=\"line\">Set.prototype.clear</span><br><span class=\"line\">Set.prototype.delete</span><br><span class=\"line\">Set.prototype.entries</span><br><span class=\"line\">Set.prototype.forEach</span><br><span class=\"line\">Set.prototype.has(value)</span><br><span class=\"line\">Set.prototype.keys Set.prototype.size Set.prototype.values</span><br></pre></td></tr></table></figure>\n<p>特性如同传统编程意义上的<code>Set</code>,和<code>Map</code>类似有key相同判断特性。<br>同样的，<code>WeakSet</code>和<code>WeakMap</code>也有相同的特性，即:</p>\n<ol>\n<li>只能add对象而不能是其它原始数据类型</li>\n<li><code>WeakSet</code>对对象的引用是弱引用，所以<code>WeakSet</code>不能枚举，也没有<code>size</code>。</li>\n<li>除此之外，以上所说的所有类型，都可以接受可迭代对象作为初始化参数，因为它们都内建了Sympol.iterator方法。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>Map</code>有如下定义：</p>\n<blockquote>\n<p>Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map’s collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.</p>\n</blockquote>\n<p><code>Map</code>对象是key-value的集合，key和value可以是es的任意类型。key值具有唯一性，分辨一个key是不是唯一的，使用的是严格比较法。</p>\n<blockquote>\n<p>The Map constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified  Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.</p>\n</blockquote>\n<p><code>Map</code>构造函数被设计成可以继承的，子类可以用<code>extends</code>语句来进行扩展。子类的构造函数在对<code>Map</code>进行继承的时候，必须要包含一个对<code>Map</code>构造函数的super call，这样就可以使用<code>Map.prototype</code>的内置方法。</p>\n<h3 id=\"API-Methods：\"><a href=\"#API-Methods：\" class=\"headerlink\" title=\"API Methods：\"></a>API Methods：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.clear</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.delete</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.entries</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.forEach(callbackfn[,thisArg])</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.get(key)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.has(key)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.keys</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.set(key,value)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.size</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.values()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>key相同的判断：</li>\n</ul>\n<p>在内存地址不一样时，值无法被取到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set([&apos;a&apos;], 1);</span><br><span class=\"line\">map.set([&apos;a&apos;], 2);</span><br><span class=\"line\">console.log(map.get([&apos;a&apos;])); // 此处的[&apos;a&apos;]的内存地址和之前的都不一样，虽然值相等，仍然get不到值</span><br></pre></td></tr></table></figure></p>\n<p>严格比较法带来的现象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set(-0, 1);</span><br><span class=\"line\">map.get(+0); // 是可以get到的</span><br><span class=\"line\">map.set(undfined, 1);</span><br><span class=\"line\">map.get(null); // get不到</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>WeakMap</code>有如下定义：</p>\n<blockquote>\n<p>WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.</p>\n</blockquote>\n<p><code>WeakMap</code>对象是key-value的集合，key必须是object（不能是基本数据类型）而value可以是es支持的任意类型。<code>WeakMap</code>可以查询是不是含有特定key，但是没有对key进行枚举的机制。如果一个作为<code>WeakMap</code>的key的object只能被WeakMap自己所引用，那这个key-value pair就会被自动移除。<code>WeakMap</code>的实现必须自主检测这类key-value pair有没有引用者，并及时清除。</p>\n<h3 id=\"API-Methods：-1\"><a href=\"#API-Methods：-1\" class=\"headerlink\" title=\"API Methods：\"></a>API Methods：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakMap.prototype.delete</span><br><span class=\"line\">WeakMap.prototype.get</span><br><span class=\"line\">WeakMap.prototype.has</span><br><span class=\"line\">WeakMap.prototype.set</span><br></pre></td></tr></table></figure>\n<p>可以看出<code>WeakMap</code>和<code>Map</code>有以下的不同：</p>\n<ol>\n<li>由于没有枚举，弱引用的特性，<code>WeakMap</code>只有四个方法<code>delete,get,has,set</code></li>\n<li><code>WeakMap</code>每个键对自己所引用对象的引用是 “弱引用”,GC在计算对象引用数量的时候并不会把弱引用计算进去。这样当一个对象除了WeakMap没有其他引用的时候就会被GC回收掉。 只要没有外部引用，</li>\n<li><code>WeakMap</code>只能接受<code>object</code>作为键</li>\n</ol>\n<p>WeakMap可以用来避免内存泄漏，存储那些将来可能会消失的对象作为键。</p>\n<h1 id=\"Set-amp-WeakSet\"><a href=\"#Set-amp-WeakSet\" class=\"headerlink\" title=\"Set &amp; WeakSet\"></a>Set &amp; WeakSet</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>Set</code>有如下定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set&apos;s collection. Distinct values are discriminated using the SameValueZero comparison algorithm.</span><br><span class=\"line\"></span><br><span class=\"line\">Set objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation model.</span><br></pre></td></tr></table></figure></p>\n<p><code>Set</code>对象是es任意类型的集合。每个值都都只能出现一次。分辨唯一值用的是严格比较法。</p>\n<p><code>Set</code>实现时采用hash表或是其它机制，提供一种随着集合规模扩大而线性发展的访问原则。<code>Set</code>对象内的数据结构只是用来反映出必要的可观察的语义，而并不是用来作为一种可行的实现模型。</p>\n<h3 id=\"API-Methods\"><a href=\"#API-Methods\" class=\"headerlink\" title=\"API Methods:\"></a>API Methods:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set.prototype.add</span><br><span class=\"line\">Set.prototype.clear</span><br><span class=\"line\">Set.prototype.delete</span><br><span class=\"line\">Set.prototype.entries</span><br><span class=\"line\">Set.prototype.forEach</span><br><span class=\"line\">Set.prototype.has(value)</span><br><span class=\"line\">Set.prototype.keys Set.prototype.size Set.prototype.values</span><br></pre></td></tr></table></figure>\n<p>特性如同传统编程意义上的<code>Set</code>,和<code>Map</code>类似有key相同判断特性。<br>同样的，<code>WeakSet</code>和<code>WeakMap</code>也有相同的特性，即:</p>\n<ol>\n<li>只能add对象而不能是其它原始数据类型</li>\n<li><code>WeakSet</code>对对象的引用是弱引用，所以<code>WeakSet</code>不能枚举，也没有<code>size</code>。</li>\n<li>除此之外，以上所说的所有类型，都可以接受可迭代对象作为初始化参数，因为它们都内建了Sympol.iterator方法。</li>\n</ol>\n"},{"title":"ES6中Object密封API-Object.preventExtensions，Object.seal，Object.freeze","date":"2016-05-13T16:00:00.000Z","_content":"## Object.preventExtensions\n可以使得一个对象无法添加新属性，但是可以改变原来的属性\n- 用法\n```\nlet obj = {foo: 'bar'};\nObject.preventExtensions(obj);\nobj.name = 'test';\n// undefined，严格模式下报错\nconsole.log(obj.test);\n```\n另外，Object.isExtensible() 方法可以判断一个对象是否是可扩展的。\n## Object.seal\n密封一个对象是让一个对象不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值。\n- 用法\n```\n'use strict';\nlet obj = {};\nObject.defineProperty(obj, 'foo', {writable: true});\nlet o = Object.seal(obj);\no.key = 'fff'; // 增加新属性报错\no.foo = 'fff'; // 修改既有属性的值\ndelete o.foo; // 删除既有属性报错\nObject.defineProperty(obj, 'foo', {writable: false}); // TODO: writable，configurable从true改成false可以，但是不能反过来\n```\n另外，Object.isSealed() 方法可以判断一个对象是否是被冻结的。\n## Object.freeze\n- 用法\n\nObject.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。\n```\nlet obj = {};\nObject.defineProperty(obj, 'foo', {writable: true});\nlet o = Object.freeze(obj);\no.key = 'fff'; // 增加新属性报错\no.foo = 'fff'; // 修改既有属性的值\ndelete o.foo; // 删除既有属性报错\nObject.defineProperty(obj, 'foo', {writable: false}); // TODO: writable，configurable从true改成false可以，但是不能反过来\n```\n\n\n","source":"_posts/ES6中Object密封API-Object.preventExtensions，Object.seal，Object.freeze.md","raw":"---\ntitle: ES6中Object密封API-Object.preventExtensions，Object.seal，Object.freeze\ndate: 2016-5-14\ncategories:\n- 前端\n- js\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n---\n## Object.preventExtensions\n可以使得一个对象无法添加新属性，但是可以改变原来的属性\n- 用法\n```\nlet obj = {foo: 'bar'};\nObject.preventExtensions(obj);\nobj.name = 'test';\n// undefined，严格模式下报错\nconsole.log(obj.test);\n```\n另外，Object.isExtensible() 方法可以判断一个对象是否是可扩展的。\n## Object.seal\n密封一个对象是让一个对象不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值。\n- 用法\n```\n'use strict';\nlet obj = {};\nObject.defineProperty(obj, 'foo', {writable: true});\nlet o = Object.seal(obj);\no.key = 'fff'; // 增加新属性报错\no.foo = 'fff'; // 修改既有属性的值\ndelete o.foo; // 删除既有属性报错\nObject.defineProperty(obj, 'foo', {writable: false}); // TODO: writable，configurable从true改成false可以，但是不能反过来\n```\n另外，Object.isSealed() 方法可以判断一个对象是否是被冻结的。\n## Object.freeze\n- 用法\n\nObject.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。\n```\nlet obj = {};\nObject.defineProperty(obj, 'foo', {writable: true});\nlet o = Object.freeze(obj);\no.key = 'fff'; // 增加新属性报错\no.foo = 'fff'; // 修改既有属性的值\ndelete o.foo; // 删除既有属性报错\nObject.defineProperty(obj, 'foo', {writable: false}); // TODO: writable，configurable从true改成false可以，但是不能反过来\n```\n\n\n","slug":"ES6中Object密封API-Object.preventExtensions，Object.seal，Object.freeze","published":1,"updated":"2019-04-07T09:46:59.110Z","_id":"cju6qt5lg001wlgv8id3kl82v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Object-preventExtensions\"><a href=\"#Object-preventExtensions\" class=\"headerlink\" title=\"Object.preventExtensions\"></a>Object.preventExtensions</h2><p>可以使得一个对象无法添加新属性，但是可以改变原来的属性</p>\n<ul>\n<li>用法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;foo: &apos;bar&apos;&#125;;</span><br><span class=\"line\">Object.preventExtensions(obj);</span><br><span class=\"line\">obj.name = &apos;test&apos;;</span><br><span class=\"line\">// undefined，严格模式下报错</span><br><span class=\"line\">console.log(obj.test);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外，Object.isExtensible() 方法可以判断一个对象是否是可扩展的。</p>\n<h2 id=\"Object-seal\"><a href=\"#Object-seal\" class=\"headerlink\" title=\"Object.seal\"></a>Object.seal</h2><p>密封一个对象是让一个对象不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值。</p>\n<ul>\n<li>用法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperty(obj, &apos;foo&apos;, &#123;writable: true&#125;);</span><br><span class=\"line\">let o = Object.seal(obj);</span><br><span class=\"line\">o.key = &apos;fff&apos;; // 增加新属性报错</span><br><span class=\"line\">o.foo = &apos;fff&apos;; // 修改既有属性的值</span><br><span class=\"line\">delete o.foo; // 删除既有属性报错</span><br><span class=\"line\">Object.defineProperty(obj, &apos;foo&apos;, &#123;writable: false&#125;); // TODO: writable，configurable从true改成false可以，但是不能反过来</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外，Object.isSealed() 方法可以判断一个对象是否是被冻结的。</p>\n<h2 id=\"Object-freeze\"><a href=\"#Object-freeze\" class=\"headerlink\" title=\"Object.freeze\"></a>Object.freeze</h2><ul>\n<li>用法</li>\n</ul>\n<p>Object.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperty(obj, &apos;foo&apos;, &#123;writable: true&#125;);</span><br><span class=\"line\">let o = Object.freeze(obj);</span><br><span class=\"line\">o.key = &apos;fff&apos;; // 增加新属性报错</span><br><span class=\"line\">o.foo = &apos;fff&apos;; // 修改既有属性的值</span><br><span class=\"line\">delete o.foo; // 删除既有属性报错</span><br><span class=\"line\">Object.defineProperty(obj, &apos;foo&apos;, &#123;writable: false&#125;); // TODO: writable，configurable从true改成false可以，但是不能反过来</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Object-preventExtensions\"><a href=\"#Object-preventExtensions\" class=\"headerlink\" title=\"Object.preventExtensions\"></a>Object.preventExtensions</h2><p>可以使得一个对象无法添加新属性，但是可以改变原来的属性</p>\n<ul>\n<li>用法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;foo: &apos;bar&apos;&#125;;</span><br><span class=\"line\">Object.preventExtensions(obj);</span><br><span class=\"line\">obj.name = &apos;test&apos;;</span><br><span class=\"line\">// undefined，严格模式下报错</span><br><span class=\"line\">console.log(obj.test);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外，Object.isExtensible() 方法可以判断一个对象是否是可扩展的。</p>\n<h2 id=\"Object-seal\"><a href=\"#Object-seal\" class=\"headerlink\" title=\"Object.seal\"></a>Object.seal</h2><p>密封一个对象是让一个对象不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值。</p>\n<ul>\n<li>用法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperty(obj, &apos;foo&apos;, &#123;writable: true&#125;);</span><br><span class=\"line\">let o = Object.seal(obj);</span><br><span class=\"line\">o.key = &apos;fff&apos;; // 增加新属性报错</span><br><span class=\"line\">o.foo = &apos;fff&apos;; // 修改既有属性的值</span><br><span class=\"line\">delete o.foo; // 删除既有属性报错</span><br><span class=\"line\">Object.defineProperty(obj, &apos;foo&apos;, &#123;writable: false&#125;); // TODO: writable，configurable从true改成false可以，但是不能反过来</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外，Object.isSealed() 方法可以判断一个对象是否是被冻结的。</p>\n<h2 id=\"Object-freeze\"><a href=\"#Object-freeze\" class=\"headerlink\" title=\"Object.freeze\"></a>Object.freeze</h2><ul>\n<li>用法</li>\n</ul>\n<p>Object.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperty(obj, &apos;foo&apos;, &#123;writable: true&#125;);</span><br><span class=\"line\">let o = Object.freeze(obj);</span><br><span class=\"line\">o.key = &apos;fff&apos;; // 增加新属性报错</span><br><span class=\"line\">o.foo = &apos;fff&apos;; // 修改既有属性的值</span><br><span class=\"line\">delete o.foo; // 删除既有属性报错</span><br><span class=\"line\">Object.defineProperty(obj, &apos;foo&apos;, &#123;writable: false&#125;); // TODO: writable，configurable从true改成false可以，但是不能反过来</span><br></pre></td></tr></table></figure></p>\n"},{"title":"包模块规范：AMD,Commonjs与ES2015","date":"2016-05-18T16:00:00.000Z","_content":"# AMD\n翻译自[amdjs官方wiki](https://github.com/amdjs/amdjs-api/wiki/AMD)\n\n异步模块定义（AMD）API指定了定义模块的机制，以便模块和它的依赖项可以异步加载。这特别适合于浏览器环境，但其中模块的同步加载会导致性能、可用性、调试和跨域访问问题。实现了AMD的，是requirejs。\n\n### API定义\ndefine(id?, dependencies?, factory);\n\n**id**: 第一个参数id是字符串文字。它指定正在定义的模块的ID。这个参数是可选的，如果它不存在，模块ID应该默认为加载程序请求给定响应脚本的模块的ID。当出现时，模块ID必须是“顶级”或绝对ID（不允许相关ID）。\n\n**dependencies**: 第二个参数依赖项是模块ID的数组文字，它是被定义的模块所需的依赖项。依赖关系必须在模块工厂函数执行之前解决，并且解析的值应该作为参数传递给工厂函数，参数位置对应于依赖数组中的索引。\n\n**factory**: 第三个参数，工厂，是实例化模块或对象时应该执行的函数。如果工厂是一个函数，它应该只执行一次。如果工厂参数是一个对象，则应该将该对象分配为模块的导出值。\n\n例子：\n``` javascript\n define(\"alpha\", [\"require\", \"exports\", \"beta\"], function (require, exports, beta) {\n       exports.verb = function() {\n           return beta.verb();\n           //Or:\n           return require(\"beta\").verb();\n       }\n   });\n```\n\n# CommonJS\n以下翻译自[webpack官方wiki](https://github.com/webpack/docs/wiki/commonjs)。\n\nCommonJS组定义一个模块的格式来解决问题以确保JavaScript范围每个模块是在它自己的命名空间执行。\n\ncommonjs提供了两个工具来做这件事情：\n1. require()方法, 可以使你向当前scope导入模块。\n2. module对象，可以使你从当前scope导出一些东西。\n\n实现了CommonJS的是nodejs,webpack,browserify等。\n\n例子：\n``` javascript\n// moduleA.js\nmodule.exports = function( value ){\n\treturn value*2;\n}\n\n// moduleB.js\nvar multiplyBy2 = require('./moduleA');\nvar result = multiplyBy2( 4 );\n```\n\n# ES2015\n\nES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。对ES2015来说，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。\n\n模块功能主要由两个命令构成：export和import\n\n例子：\n``` javascript\n// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n\nimport * as circle from './circle';\n```","source":"_posts/包模块规范：AMD,Commonjs与ES2015.md","raw":"---\ntitle: 包模块规范：AMD,Commonjs与ES2015\ndate: 2016-5-19\ncategories:\n- 前端\n- js\n- es6\ntags:\n- 前端\n- js\n- amd\n- commonjs\n---\n# AMD\n翻译自[amdjs官方wiki](https://github.com/amdjs/amdjs-api/wiki/AMD)\n\n异步模块定义（AMD）API指定了定义模块的机制，以便模块和它的依赖项可以异步加载。这特别适合于浏览器环境，但其中模块的同步加载会导致性能、可用性、调试和跨域访问问题。实现了AMD的，是requirejs。\n\n### API定义\ndefine(id?, dependencies?, factory);\n\n**id**: 第一个参数id是字符串文字。它指定正在定义的模块的ID。这个参数是可选的，如果它不存在，模块ID应该默认为加载程序请求给定响应脚本的模块的ID。当出现时，模块ID必须是“顶级”或绝对ID（不允许相关ID）。\n\n**dependencies**: 第二个参数依赖项是模块ID的数组文字，它是被定义的模块所需的依赖项。依赖关系必须在模块工厂函数执行之前解决，并且解析的值应该作为参数传递给工厂函数，参数位置对应于依赖数组中的索引。\n\n**factory**: 第三个参数，工厂，是实例化模块或对象时应该执行的函数。如果工厂是一个函数，它应该只执行一次。如果工厂参数是一个对象，则应该将该对象分配为模块的导出值。\n\n例子：\n``` javascript\n define(\"alpha\", [\"require\", \"exports\", \"beta\"], function (require, exports, beta) {\n       exports.verb = function() {\n           return beta.verb();\n           //Or:\n           return require(\"beta\").verb();\n       }\n   });\n```\n\n# CommonJS\n以下翻译自[webpack官方wiki](https://github.com/webpack/docs/wiki/commonjs)。\n\nCommonJS组定义一个模块的格式来解决问题以确保JavaScript范围每个模块是在它自己的命名空间执行。\n\ncommonjs提供了两个工具来做这件事情：\n1. require()方法, 可以使你向当前scope导入模块。\n2. module对象，可以使你从当前scope导出一些东西。\n\n实现了CommonJS的是nodejs,webpack,browserify等。\n\n例子：\n``` javascript\n// moduleA.js\nmodule.exports = function( value ){\n\treturn value*2;\n}\n\n// moduleB.js\nvar multiplyBy2 = require('./moduleA');\nvar result = multiplyBy2( 4 );\n```\n\n# ES2015\n\nES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。对ES2015来说，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。\n\n模块功能主要由两个命令构成：export和import\n\n例子：\n``` javascript\n// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n\nimport * as circle from './circle';\n```","slug":"包模块规范：AMD,Commonjs与ES2015","published":1,"updated":"2019-04-07T09:47:36.620Z","_id":"cju6qty6e0023lgv8jy3ful5e","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>翻译自<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">amdjs官方wiki</a></p>\n<p>异步模块定义（AMD）API指定了定义模块的机制，以便模块和它的依赖项可以异步加载。这特别适合于浏览器环境，但其中模块的同步加载会导致性能、可用性、调试和跨域访问问题。实现了AMD的，是requirejs。</p>\n<h3 id=\"API定义\"><a href=\"#API定义\" class=\"headerlink\" title=\"API定义\"></a>API定义</h3><p>define(id?, dependencies?, factory);</p>\n<p><strong>id</strong>: 第一个参数id是字符串文字。它指定正在定义的模块的ID。这个参数是可选的，如果它不存在，模块ID应该默认为加载程序请求给定响应脚本的模块的ID。当出现时，模块ID必须是“顶级”或绝对ID（不允许相关ID）。</p>\n<p><strong>dependencies</strong>: 第二个参数依赖项是模块ID的数组文字，它是被定义的模块所需的依赖项。依赖关系必须在模块工厂函数执行之前解决，并且解析的值应该作为参数传递给工厂函数，参数位置对应于依赖数组中的索引。</p>\n<p><strong>factory</strong>: 第三个参数，工厂，是实例化模块或对象时应该执行的函数。如果工厂是一个函数，它应该只执行一次。如果工厂参数是一个对象，则应该将该对象分配为模块的导出值。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"alpha\"</span>, [<span class=\"string\">\"require\"</span>, <span class=\"string\">\"exports\"</span>, <span class=\"string\">\"beta\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, exports, beta</span>) </span>&#123;</span><br><span class=\"line\">      exports.verb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> beta.verb();</span><br><span class=\"line\">          <span class=\"comment\">//Or:</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">\"beta\"</span>).verb();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h1><p>以下翻译自<a href=\"https://github.com/webpack/docs/wiki/commonjs\" target=\"_blank\" rel=\"noopener\">webpack官方wiki</a>。</p>\n<p>CommonJS组定义一个模块的格式来解决问题以确保JavaScript范围每个模块是在它自己的命名空间执行。</p>\n<p>commonjs提供了两个工具来做这件事情：</p>\n<ol>\n<li>require()方法, 可以使你向当前scope导入模块。</li>\n<li>module对象，可以使你从当前scope导出一些东西。</li>\n</ol>\n<p>实现了CommonJS的是nodejs,webpack,browserify等。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> multiplyBy2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./moduleA'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = multiplyBy2( <span class=\"number\">4</span> );</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"ES2015\"><a href=\"#ES2015\" class=\"headerlink\" title=\"ES2015\"></a>ES2015</h1><p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。对ES2015来说，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。</p>\n<p>模块功能主要由两个命令构成：export和import</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// circle.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circumference</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>翻译自<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">amdjs官方wiki</a></p>\n<p>异步模块定义（AMD）API指定了定义模块的机制，以便模块和它的依赖项可以异步加载。这特别适合于浏览器环境，但其中模块的同步加载会导致性能、可用性、调试和跨域访问问题。实现了AMD的，是requirejs。</p>\n<h3 id=\"API定义\"><a href=\"#API定义\" class=\"headerlink\" title=\"API定义\"></a>API定义</h3><p>define(id?, dependencies?, factory);</p>\n<p><strong>id</strong>: 第一个参数id是字符串文字。它指定正在定义的模块的ID。这个参数是可选的，如果它不存在，模块ID应该默认为加载程序请求给定响应脚本的模块的ID。当出现时，模块ID必须是“顶级”或绝对ID（不允许相关ID）。</p>\n<p><strong>dependencies</strong>: 第二个参数依赖项是模块ID的数组文字，它是被定义的模块所需的依赖项。依赖关系必须在模块工厂函数执行之前解决，并且解析的值应该作为参数传递给工厂函数，参数位置对应于依赖数组中的索引。</p>\n<p><strong>factory</strong>: 第三个参数，工厂，是实例化模块或对象时应该执行的函数。如果工厂是一个函数，它应该只执行一次。如果工厂参数是一个对象，则应该将该对象分配为模块的导出值。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"alpha\"</span>, [<span class=\"string\">\"require\"</span>, <span class=\"string\">\"exports\"</span>, <span class=\"string\">\"beta\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, exports, beta</span>) </span>&#123;</span><br><span class=\"line\">      exports.verb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> beta.verb();</span><br><span class=\"line\">          <span class=\"comment\">//Or:</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">\"beta\"</span>).verb();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h1><p>以下翻译自<a href=\"https://github.com/webpack/docs/wiki/commonjs\" target=\"_blank\" rel=\"noopener\">webpack官方wiki</a>。</p>\n<p>CommonJS组定义一个模块的格式来解决问题以确保JavaScript范围每个模块是在它自己的命名空间执行。</p>\n<p>commonjs提供了两个工具来做这件事情：</p>\n<ol>\n<li>require()方法, 可以使你向当前scope导入模块。</li>\n<li>module对象，可以使你从当前scope导出一些东西。</li>\n</ol>\n<p>实现了CommonJS的是nodejs,webpack,browserify等。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> multiplyBy2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./moduleA'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = multiplyBy2( <span class=\"number\">4</span> );</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"ES2015\"><a href=\"#ES2015\" class=\"headerlink\" title=\"ES2015\"></a>ES2015</h1><p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。对ES2015来说，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。</p>\n<p>模块功能主要由两个命令构成：export和import</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// circle.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circumference</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ES6中的Promise","date":"2016-04-27T16:00:00.000Z","_content":"Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象\n\n一个 Promise有以下几种状态:\n\n- pending: 初始状态，既不是成功，也不是失败状态。\n- fulfilled: 意味着操作成功完成。\n- rejected: 意味着操作失败。\n## 方法\n``` javascript\nPromise.all(iterable)\nPromise.race(iterable)\nPromise.reject(reason)\nPromise.resolve(value)\nPromise.prototype.catch()\nPromise.prototype.then()\n```\n### Promise.all \n\n等待所有代码的完成（或第一个代码的失败）。它的参数是一组iterable。某个值如果不是promise,也会被按顺序计入结果集中。\n``` javascript\nlet getAblumFromSinger = new Promise((resolve, reject) => {\n    setTimeout(()=>{\n        console.log(\"getAblumFromSinger\");\n    }, 1500);\n    resolve(\"AblumIsHere\");\n});\n\nlet getSongFromAblum = new Promise((resolve, reject)=>{\n    setTimeout(()=>{\n        console.log(\"getSongFromAblum\");\n    }, 1000);\n    resolve(\"SongIsHere\");\n});\n\nlet rejectPromise = new Promise((resolve, reject)=>{\n    reject(\"RejectIsHere\");\n})\n\nPromise.all([getAblumFromSinger,getSongFromAblum]).then(values => { \n    console.log(values); // 执行上异步，getSongFromAblum比getAblumFromSinger先执行，但是结果是按任务顺序排列的，当promise中有reject时，将会立刻失败\n});\n```\n### Promise.prototype.catch\n如果 onRejected 抛出一个错误或返回一个失败的 Promise ，Promise  通过catch()返回失败结果；否则，它将显示为成功。 \n### Promise.prototype.then\nthen() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。\n\n``` javascript\nPromise.resolve()\n  .then( () => {\n    // 使 .then() 返回一个 rejected promise\n    throw 'Oh no!';\n  })\n  .catch( reason => {\n    console.error( 'onRejected function called: ', reason );\n  })\n  .then( () => {\n    console.log( \"I am always called even if the prior then's promise rejects\" );\n  });\n```\n### Promise.race(iterable) \nPromise.race(iterable) 方法返回一个 promise ，并伴随着 promise对象解决的返回值或拒绝的错误原因, 只要 iterable 中有一个 promise 对象\"解决(resolve)\"或\"拒绝(reject)\"。\n``` javascript\nvar p1 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 500, \"one\"); \n});\nvar p2 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 100, \"two\"); \n});\n\nPromise.race([p1, p2]).then(function(value) {\n  console.log(value); // \"two\"\n  // 两个都完成，但 p2 更快，这点与all不同，all会按顺序返回所有的任务结果\n});\n```\n### Promise.resolve\n### Promise.reject\n返回拒绝或接受promise结果","source":"_posts/ES6中的Promise.md","raw":"---\ntitle: ES6中的Promise\ndate: 2016-4-28\ncategories:\n- 前端\n- js\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n- Promise\n---\nPromise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象\n\n一个 Promise有以下几种状态:\n\n- pending: 初始状态，既不是成功，也不是失败状态。\n- fulfilled: 意味着操作成功完成。\n- rejected: 意味着操作失败。\n## 方法\n``` javascript\nPromise.all(iterable)\nPromise.race(iterable)\nPromise.reject(reason)\nPromise.resolve(value)\nPromise.prototype.catch()\nPromise.prototype.then()\n```\n### Promise.all \n\n等待所有代码的完成（或第一个代码的失败）。它的参数是一组iterable。某个值如果不是promise,也会被按顺序计入结果集中。\n``` javascript\nlet getAblumFromSinger = new Promise((resolve, reject) => {\n    setTimeout(()=>{\n        console.log(\"getAblumFromSinger\");\n    }, 1500);\n    resolve(\"AblumIsHere\");\n});\n\nlet getSongFromAblum = new Promise((resolve, reject)=>{\n    setTimeout(()=>{\n        console.log(\"getSongFromAblum\");\n    }, 1000);\n    resolve(\"SongIsHere\");\n});\n\nlet rejectPromise = new Promise((resolve, reject)=>{\n    reject(\"RejectIsHere\");\n})\n\nPromise.all([getAblumFromSinger,getSongFromAblum]).then(values => { \n    console.log(values); // 执行上异步，getSongFromAblum比getAblumFromSinger先执行，但是结果是按任务顺序排列的，当promise中有reject时，将会立刻失败\n});\n```\n### Promise.prototype.catch\n如果 onRejected 抛出一个错误或返回一个失败的 Promise ，Promise  通过catch()返回失败结果；否则，它将显示为成功。 \n### Promise.prototype.then\nthen() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。\n\n``` javascript\nPromise.resolve()\n  .then( () => {\n    // 使 .then() 返回一个 rejected promise\n    throw 'Oh no!';\n  })\n  .catch( reason => {\n    console.error( 'onRejected function called: ', reason );\n  })\n  .then( () => {\n    console.log( \"I am always called even if the prior then's promise rejects\" );\n  });\n```\n### Promise.race(iterable) \nPromise.race(iterable) 方法返回一个 promise ，并伴随着 promise对象解决的返回值或拒绝的错误原因, 只要 iterable 中有一个 promise 对象\"解决(resolve)\"或\"拒绝(reject)\"。\n``` javascript\nvar p1 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 500, \"one\"); \n});\nvar p2 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 100, \"two\"); \n});\n\nPromise.race([p1, p2]).then(function(value) {\n  console.log(value); // \"two\"\n  // 两个都完成，但 p2 更快，这点与all不同，all会按顺序返回所有的任务结果\n});\n```\n### Promise.resolve\n### Promise.reject\n返回拒绝或接受promise结果","slug":"ES6中的Promise","published":1,"updated":"2019-04-07T09:48:12.127Z","_id":"cju6quoet002elgv8xj3vdsbk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p>\n<p>一个 Promise有以下几种状态:</p>\n<ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(iterable)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race(iterable)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(reason)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch()</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>等待所有代码的完成（或第一个代码的失败）。它的参数是一组iterable。某个值如果不是promise,也会被按顺序计入结果集中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> getAblumFromSinger = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"getAblumFromSinger\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"AblumIsHere\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> getSongFromAblum = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"getSongFromAblum\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"SongIsHere\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> rejectPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reject(<span class=\"string\">\"RejectIsHere\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getAblumFromSinger,getSongFromAblum]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// 执行上异步，getSongFromAblum比getAblumFromSinger先执行，但是结果是按任务顺序排列的，当promise中有reject时，将会立刻失败</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h3><p>如果 onRejected 抛出一个错误或返回一个失败的 Promise ，Promise  通过catch()返回失败结果；否则，它将显示为成功。 </p>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then\"></a>Promise.prototype.then</h3><p>then() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使 .then() 返回一个 rejected promise</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'Oh no!'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error( <span class=\"string\">'onRejected function called: '</span>, reason );</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"I am always called even if the prior then's promise rejects\"</span> );</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h3><p>Promise.race(iterable) 方法返回一个 promise ，并伴随着 promise对象解决的返回值或拒绝的错误原因, 只要 iterable 中有一个 promise 对象”解决(resolve)”或”拒绝(reject)”。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">\"one\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"two\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"two\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 两个都完成，但 p2 更快，这点与all不同，all会按顺序返回所有的任务结果</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h3><h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h3><p>返回拒绝或接受promise结果</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p>\n<p>一个 Promise有以下几种状态:</p>\n<ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(iterable)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race(iterable)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(reason)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch()</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>等待所有代码的完成（或第一个代码的失败）。它的参数是一组iterable。某个值如果不是promise,也会被按顺序计入结果集中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> getAblumFromSinger = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"getAblumFromSinger\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"AblumIsHere\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> getSongFromAblum = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"getSongFromAblum\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"SongIsHere\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> rejectPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reject(<span class=\"string\">\"RejectIsHere\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getAblumFromSinger,getSongFromAblum]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// 执行上异步，getSongFromAblum比getAblumFromSinger先执行，但是结果是按任务顺序排列的，当promise中有reject时，将会立刻失败</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h3><p>如果 onRejected 抛出一个错误或返回一个失败的 Promise ，Promise  通过catch()返回失败结果；否则，它将显示为成功。 </p>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then\"></a>Promise.prototype.then</h3><p>then() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使 .then() 返回一个 rejected promise</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'Oh no!'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error( <span class=\"string\">'onRejected function called: '</span>, reason );</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"I am always called even if the prior then's promise rejects\"</span> );</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h3><p>Promise.race(iterable) 方法返回一个 promise ，并伴随着 promise对象解决的返回值或拒绝的错误原因, 只要 iterable 中有一个 promise 对象”解决(resolve)”或”拒绝(reject)”。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">\"one\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"two\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"two\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 两个都完成，但 p2 更快，这点与all不同，all会按顺序返回所有的任务结果</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h3><h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h3><p>返回拒绝或接受promise结果</p>\n"},{"title":"Angular5 jwt验证","date":"2016-05-20T16:00:00.000Z","_content":"首先写一个简单的bootstrap的登陆表单。\n新建loginComponent，然后在hmtl里写:\n``` html\n<div class=\"col-md-6 col-md-offset-3\">\n  <h2>Login</h2>\n  <form name=\"form\" (ngSubmit)=\"f.form.valid && login()\" #f=\"ngForm\" novalidate>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !username.valid }\">\n          <label for=\"username\">Username</label>\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"user.username\" #username=\"ngModel\" required />\n          <div *ngIf=\"f.submitted && !username.valid\" class=\"help-block\">Username is required</div>\n      </div>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !password.valid }\">\n          <label for=\"password\">Password</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"user.password\" #password=\"ngModel\" required />\n          <div *ngIf=\"f.submitted && !password.valid\" class=\"help-block\">Password is required</div>\n      </div>\n      <div class=\"form-group\">\n          <button [disabled]=\"loading\" class=\"btn btn-primary\">Login</button>\n          <i class=\"fa fa-spinner fa-spin\" *ngIf=\"loading\"></i>\n      </div>\n  </form>\n</div>\n```\n在loginComponent内写：\n``` typescript\nexport class LoginComponent implements OnInit {\n    user: User = new User();\n    loading = false;\n    error = '';\n\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService) { }\n\n    ngOnInit() {\n        // reset login status\n        this.authenticationService.logout();\n    }\n\n    login() {\n        this.loading = true;\n        this.authenticationService.login(this.user)\n            .subscribe(result => {\n                if (result === true) {\n                    this.router.navigate(['/']);\n                } else {\n                    this.error = 'Username or password is incorrect';\n                    this.loading = false;\n                }\n            },error=>{\n                this.loading = false;\n            });\n    }\n}\n```\nUserModel的代码：\n``` typescript\nexport class User{\n    id: number;\n    username: string;\n    password: string;\n}\n```\nlogin后，要根据用户名密码来在后台签名，签名结果token返回前台，前台接收到token后，存储到localstorage中，然后以后每次请求时，都要带上token作为头部。\n``` typescript\nconst User = require('../models/user.model');\nconst jwt = require('jsonwebtoken');\nconst secret = require('../secret');\nasync function login(ctx) {\n  const { query } = ctx.request\n  let user = await User.find({where: {id: query.id}});\n  if (query.password === user.password) {\n    ctx.status = 200\n    ctx.body = {\n      message: '登录成功',\n      user: user,\n      token: jwt.sign({\n        data: user,\n        exp: Math.floor(Date.now() / 1000) + (60 * 60), // 60 seconds * 60 minutes = 1 hour\n      }, secret),\n    }\n  } else {\n    let err = new Error('Password Error');\n    err.status = 401;\n    err.message = `密码错误`;\n    throw err;\n  }\n}\n\nmodule.exports = { login };\n```\nkoa-jwt添加进来以后，引入公钥，然后排除login api：\n``` \njwt({ secret: secret }).unless({ path: [/^\\/api\\/login/] })\n```\n这样，当前台发出请求时，就会得到签名过的token，为了统一处理，写一个共通处理的httpinterceptor，这里面用到了``ngx-notify``。\n``` typescript\nexport class DefaultHttpInterceptor implements HttpInterceptor {\n\n    constructor(private auth: AuthenticationService, private notifyService: NotifyService) {\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n\n        let url = req.url;\n        if (!url.startsWith('https://') && !url.startsWith('http://')) {\n            url = environment.api + url;\n        }\n        let options = { url: url };\n        if (!url.includes('login')) {\n            options['setHeaders'] = {\n                Authorization: `Bearer ${this.auth.getToken()}`\n            }\n        }\n        const newReq = req.clone(options);\n        const started = Date.now();\n        return next.handle(newReq).pipe(\n            tap(event => {\n              if (event instanceof HttpResponse) {\n                const elapsed = Date.now() - started;\n                console.log(`Request for ${req.urlWithParams} took ${elapsed} ms.`);\n              }\n            }, error => {\n                switch (error.status) {\n                    case 401:\n                        // 权限处理\n                        this.notifyService.error('401', `错误代码为：${error.message}`);\n                        break;\n                    case 404:\n                        this.notifyService.error('404', `API不存在`);\n                        break;\n                    case 500:\n                        this.notifyService.error('500', error.message);\n                        break;\n                }\n            }));\n    }\n}\n```\n\n过程中遇到的坑：\n1. httpinterceptor只支持httpClient而不支持http。\n2. koa-jwt只支持自动校验，不支持sign。\n","source":"_posts/Angular5 jwt验证.md","raw":"---\ntitle: Angular5 jwt验证\ndate: 2016-5-21\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- angular\n---\n首先写一个简单的bootstrap的登陆表单。\n新建loginComponent，然后在hmtl里写:\n``` html\n<div class=\"col-md-6 col-md-offset-3\">\n  <h2>Login</h2>\n  <form name=\"form\" (ngSubmit)=\"f.form.valid && login()\" #f=\"ngForm\" novalidate>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !username.valid }\">\n          <label for=\"username\">Username</label>\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"user.username\" #username=\"ngModel\" required />\n          <div *ngIf=\"f.submitted && !username.valid\" class=\"help-block\">Username is required</div>\n      </div>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !password.valid }\">\n          <label for=\"password\">Password</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"user.password\" #password=\"ngModel\" required />\n          <div *ngIf=\"f.submitted && !password.valid\" class=\"help-block\">Password is required</div>\n      </div>\n      <div class=\"form-group\">\n          <button [disabled]=\"loading\" class=\"btn btn-primary\">Login</button>\n          <i class=\"fa fa-spinner fa-spin\" *ngIf=\"loading\"></i>\n      </div>\n  </form>\n</div>\n```\n在loginComponent内写：\n``` typescript\nexport class LoginComponent implements OnInit {\n    user: User = new User();\n    loading = false;\n    error = '';\n\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService) { }\n\n    ngOnInit() {\n        // reset login status\n        this.authenticationService.logout();\n    }\n\n    login() {\n        this.loading = true;\n        this.authenticationService.login(this.user)\n            .subscribe(result => {\n                if (result === true) {\n                    this.router.navigate(['/']);\n                } else {\n                    this.error = 'Username or password is incorrect';\n                    this.loading = false;\n                }\n            },error=>{\n                this.loading = false;\n            });\n    }\n}\n```\nUserModel的代码：\n``` typescript\nexport class User{\n    id: number;\n    username: string;\n    password: string;\n}\n```\nlogin后，要根据用户名密码来在后台签名，签名结果token返回前台，前台接收到token后，存储到localstorage中，然后以后每次请求时，都要带上token作为头部。\n``` typescript\nconst User = require('../models/user.model');\nconst jwt = require('jsonwebtoken');\nconst secret = require('../secret');\nasync function login(ctx) {\n  const { query } = ctx.request\n  let user = await User.find({where: {id: query.id}});\n  if (query.password === user.password) {\n    ctx.status = 200\n    ctx.body = {\n      message: '登录成功',\n      user: user,\n      token: jwt.sign({\n        data: user,\n        exp: Math.floor(Date.now() / 1000) + (60 * 60), // 60 seconds * 60 minutes = 1 hour\n      }, secret),\n    }\n  } else {\n    let err = new Error('Password Error');\n    err.status = 401;\n    err.message = `密码错误`;\n    throw err;\n  }\n}\n\nmodule.exports = { login };\n```\nkoa-jwt添加进来以后，引入公钥，然后排除login api：\n``` \njwt({ secret: secret }).unless({ path: [/^\\/api\\/login/] })\n```\n这样，当前台发出请求时，就会得到签名过的token，为了统一处理，写一个共通处理的httpinterceptor，这里面用到了``ngx-notify``。\n``` typescript\nexport class DefaultHttpInterceptor implements HttpInterceptor {\n\n    constructor(private auth: AuthenticationService, private notifyService: NotifyService) {\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n\n        let url = req.url;\n        if (!url.startsWith('https://') && !url.startsWith('http://')) {\n            url = environment.api + url;\n        }\n        let options = { url: url };\n        if (!url.includes('login')) {\n            options['setHeaders'] = {\n                Authorization: `Bearer ${this.auth.getToken()}`\n            }\n        }\n        const newReq = req.clone(options);\n        const started = Date.now();\n        return next.handle(newReq).pipe(\n            tap(event => {\n              if (event instanceof HttpResponse) {\n                const elapsed = Date.now() - started;\n                console.log(`Request for ${req.urlWithParams} took ${elapsed} ms.`);\n              }\n            }, error => {\n                switch (error.status) {\n                    case 401:\n                        // 权限处理\n                        this.notifyService.error('401', `错误代码为：${error.message}`);\n                        break;\n                    case 404:\n                        this.notifyService.error('404', `API不存在`);\n                        break;\n                    case 500:\n                        this.notifyService.error('500', error.message);\n                        break;\n                }\n            }));\n    }\n}\n```\n\n过程中遇到的坑：\n1. httpinterceptor只支持httpClient而不支持http。\n2. koa-jwt只支持自动校验，不支持sign。\n","slug":"Angular5 jwt验证","published":1,"updated":"2019-04-07T09:49:12.325Z","_id":"cju6qw061002rlgv8uk8x0f3r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先写一个简单的bootstrap的登陆表单。<br>新建loginComponent，然后在hmtl里写:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6 col-md-offset-3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"form\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"f.form.valid &amp;&amp; login()\"</span> #<span class=\"attr\">f</span>=<span class=\"string\">\"ngForm\"</span> <span class=\"attr\">novalidate</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'has-error': f.submitted &amp;&amp; !username.valid &#125;\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username\"</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"user.username\"</span> #<span class=\"attr\">username</span>=<span class=\"string\">\"ngModel\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"f.submitted &amp;&amp; !username.valid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Username is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'has-error': f.submitted &amp;&amp; !password.valid &#125;\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"user.password\"</span> #<span class=\"attr\">password</span>=<span class=\"string\">\"ngModel\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"f.submitted &amp;&amp; !password.valid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Password is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"loading\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"loading\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在loginComponent内写：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> LoginComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">    user: User = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    error = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> router: Router,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> authenticationService: AuthenticationService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reset login status</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.authenticationService.logout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    login() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.authenticationService.login(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">            .subscribe(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'/'</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.error = <span class=\"string\">'Username or password is incorrect'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>UserModel的代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> User&#123;</span><br><span class=\"line\">    id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    username: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    password: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>login后，要根据用户名密码来在后台签名，签名结果token返回前台，前台接收到token后，存储到localstorage中，然后以后每次请求时，都要带上token作为头部。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/user.model'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"built_in\">require</span>(<span class=\"string\">'../secret'</span>);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; query &#125; = ctx.request</span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = <span class=\"keyword\">await</span> User.find(&#123;where: &#123;id: query.id&#125;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (query.password === user.password) &#123;</span><br><span class=\"line\">    ctx.status = <span class=\"number\">200</span></span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">      message: <span class=\"string\">'登录成功'</span>,</span><br><span class=\"line\">      user: user,</span><br><span class=\"line\">      token: jwt.sign(&#123;</span><br><span class=\"line\">        data: user,</span><br><span class=\"line\">        exp: <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Date</span>.now() / <span class=\"number\">1000</span>) + (<span class=\"number\">60</span> * <span class=\"number\">60</span>), <span class=\"comment\">// 60 seconds * 60 minutes = 1 hour</span></span><br><span class=\"line\">      &#125;, secret),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Password Error'</span>);</span><br><span class=\"line\">    err.status = <span class=\"number\">401</span>;</span><br><span class=\"line\">    err.message = <span class=\"string\">`密码错误`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; login &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>koa-jwt添加进来以后，引入公钥，然后排除login api：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jwt(&#123; secret: secret &#125;).unless(&#123; path: [/^\\/api\\/login/] &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这样，当前台发出请求时，就会得到签名过的token，为了统一处理，写一个共通处理的httpinterceptor，这里面用到了<code>ngx-notify</code>。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DefaultHttpInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> auth: AuthenticationService, <span class=\"keyword\">private</span> notifyService: NotifyService</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse&lt;<span class=\"built_in\">any</span>&gt; | HttpUserEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> url = req.url;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!url.startsWith(<span class=\"string\">'https://'</span>) &amp;&amp; !url.startsWith(<span class=\"string\">'http://'</span>)) &#123;</span><br><span class=\"line\">            url = environment.api + url;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> options = &#123; url: url &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!url.includes(<span class=\"string\">'login'</span>)) &#123;</span><br><span class=\"line\">            options[<span class=\"string\">'setHeaders'</span>] = &#123;</span><br><span class=\"line\">                Authorization: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;this.auth.getToken()&#125;</span>`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newReq = req.clone(options);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> started = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next.handle(newReq).pipe(</span><br><span class=\"line\">            tap(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> HttpResponse) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> elapsed = <span class=\"built_in\">Date</span>.now() - started;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`Request for <span class=\"subst\">$&#123;req.urlWithParams&#125;</span> took <span class=\"subst\">$&#123;elapsed&#125;</span> ms.`</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (error.status) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">                        <span class=\"comment\">// 权限处理</span></span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'401'</span>, <span class=\"string\">`错误代码为：<span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'404'</span>, <span class=\"string\">`API不存在`</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'500'</span>, error.message);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>过程中遇到的坑：</p>\n<ol>\n<li>httpinterceptor只支持httpClient而不支持http。</li>\n<li>koa-jwt只支持自动校验，不支持sign。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>首先写一个简单的bootstrap的登陆表单。<br>新建loginComponent，然后在hmtl里写:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6 col-md-offset-3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"form\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"f.form.valid &amp;&amp; login()\"</span> #<span class=\"attr\">f</span>=<span class=\"string\">\"ngForm\"</span> <span class=\"attr\">novalidate</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'has-error': f.submitted &amp;&amp; !username.valid &#125;\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username\"</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"user.username\"</span> #<span class=\"attr\">username</span>=<span class=\"string\">\"ngModel\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"f.submitted &amp;&amp; !username.valid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Username is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'has-error': f.submitted &amp;&amp; !password.valid &#125;\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"user.password\"</span> #<span class=\"attr\">password</span>=<span class=\"string\">\"ngModel\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"f.submitted &amp;&amp; !password.valid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Password is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"loading\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"loading\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在loginComponent内写：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> LoginComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">    user: User = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    error = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> router: Router,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> authenticationService: AuthenticationService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reset login status</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.authenticationService.logout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    login() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.authenticationService.login(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">            .subscribe(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'/'</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.error = <span class=\"string\">'Username or password is incorrect'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>UserModel的代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> User&#123;</span><br><span class=\"line\">    id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    username: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    password: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>login后，要根据用户名密码来在后台签名，签名结果token返回前台，前台接收到token后，存储到localstorage中，然后以后每次请求时，都要带上token作为头部。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/user.model'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"built_in\">require</span>(<span class=\"string\">'../secret'</span>);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; query &#125; = ctx.request</span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = <span class=\"keyword\">await</span> User.find(&#123;where: &#123;id: query.id&#125;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (query.password === user.password) &#123;</span><br><span class=\"line\">    ctx.status = <span class=\"number\">200</span></span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">      message: <span class=\"string\">'登录成功'</span>,</span><br><span class=\"line\">      user: user,</span><br><span class=\"line\">      token: jwt.sign(&#123;</span><br><span class=\"line\">        data: user,</span><br><span class=\"line\">        exp: <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Date</span>.now() / <span class=\"number\">1000</span>) + (<span class=\"number\">60</span> * <span class=\"number\">60</span>), <span class=\"comment\">// 60 seconds * 60 minutes = 1 hour</span></span><br><span class=\"line\">      &#125;, secret),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Password Error'</span>);</span><br><span class=\"line\">    err.status = <span class=\"number\">401</span>;</span><br><span class=\"line\">    err.message = <span class=\"string\">`密码错误`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; login &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>koa-jwt添加进来以后，引入公钥，然后排除login api：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jwt(&#123; secret: secret &#125;).unless(&#123; path: [/^\\/api\\/login/] &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这样，当前台发出请求时，就会得到签名过的token，为了统一处理，写一个共通处理的httpinterceptor，这里面用到了<code>ngx-notify</code>。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DefaultHttpInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> auth: AuthenticationService, <span class=\"keyword\">private</span> notifyService: NotifyService</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse&lt;<span class=\"built_in\">any</span>&gt; | HttpUserEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> url = req.url;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!url.startsWith(<span class=\"string\">'https://'</span>) &amp;&amp; !url.startsWith(<span class=\"string\">'http://'</span>)) &#123;</span><br><span class=\"line\">            url = environment.api + url;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> options = &#123; url: url &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!url.includes(<span class=\"string\">'login'</span>)) &#123;</span><br><span class=\"line\">            options[<span class=\"string\">'setHeaders'</span>] = &#123;</span><br><span class=\"line\">                Authorization: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;this.auth.getToken()&#125;</span>`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newReq = req.clone(options);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> started = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next.handle(newReq).pipe(</span><br><span class=\"line\">            tap(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> HttpResponse) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> elapsed = <span class=\"built_in\">Date</span>.now() - started;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`Request for <span class=\"subst\">$&#123;req.urlWithParams&#125;</span> took <span class=\"subst\">$&#123;elapsed&#125;</span> ms.`</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (error.status) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">                        <span class=\"comment\">// 权限处理</span></span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'401'</span>, <span class=\"string\">`错误代码为：<span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'404'</span>, <span class=\"string\">`API不存在`</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'500'</span>, error.message);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>过程中遇到的坑：</p>\n<ol>\n<li>httpinterceptor只支持httpClient而不支持http。</li>\n<li>koa-jwt只支持自动校验，不支持sign。</li>\n</ol>\n"},{"title":"Angular5 自定义管道与指令","date":"2016-05-20T16:00:00.000Z","_content":"Angular有很多内置指令与管道，但有时候还是要添加自定义的管道或指令。\n# 自定义指令\n可以通过``ng g d``选项来创建一个新的指令。\n例如可以定义一个``highlight``指令，并可以在其中应用``@HostListener,@HostBingding,@Input``等装饰器。\n``` typescript\n@Directive({\n  selector: '[highlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private elem: ElementRef, private renderer: Renderer) { }\n  private color :string;\n\n  @Input('highlight') \n  highlightColor: string;\n\n  @HostListener('mouseenter')\n  onMouseEnter() {\n      console.log(this.highlightColor);\n      this.renderer.setElementStyle(this.elem.nativeElement, 'backgroundColor', this.highlightColor);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave() {\n      this.renderer.setElementStyle(this.elem.nativeElement, 'backgroundColor', null);\n  }\n  \n  @HostBinding('attr.role') role = 'button';\n}\n```\n# 自定义管道\n可以使用``ng g p``来创建一个新的自定义管道。\n例如，可以创建一个判断是否为0的管道。\n``` typescript\n@Pipe({\n  name: 'isZeroPipe'\n})\nexport class IsZeroPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if(value){\n      return 'NotZero';\n    }else{\n      return 'Zero';\n    }\n  }\n}\n```\n## 内置管道\n\n\n管道|类型|功能\n---|---|---\nDatePipe|\t纯管道\t|日期管道，格式化日期\nJsonPipe|\t非纯管道|\t将输入数据对象经过JSON.stringify()方法转换后输出对象的字符串\nUpperCasePipe|\t纯管道|\t将文本所有小写字母转换成大写字母\nLowerCasePipe|\t纯管道|\t将文本所有大写字母转换成小写字母\nDecimalPipe|\t纯管道|\t将数值按特定的格式显示文本\nCurrentcyPipe|\t纯管道|\t将数值转百分比格式\nSlicePipe|\t非纯管道|\t将数组或者字符串裁剪成新子集","source":"_posts/Angular5 自定义管道与指令.md","raw":"---\ntitle: Angular5 自定义管道与指令\ndate: 2016-5-21\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- angular\n---\nAngular有很多内置指令与管道，但有时候还是要添加自定义的管道或指令。\n# 自定义指令\n可以通过``ng g d``选项来创建一个新的指令。\n例如可以定义一个``highlight``指令，并可以在其中应用``@HostListener,@HostBingding,@Input``等装饰器。\n``` typescript\n@Directive({\n  selector: '[highlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private elem: ElementRef, private renderer: Renderer) { }\n  private color :string;\n\n  @Input('highlight') \n  highlightColor: string;\n\n  @HostListener('mouseenter')\n  onMouseEnter() {\n      console.log(this.highlightColor);\n      this.renderer.setElementStyle(this.elem.nativeElement, 'backgroundColor', this.highlightColor);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave() {\n      this.renderer.setElementStyle(this.elem.nativeElement, 'backgroundColor', null);\n  }\n  \n  @HostBinding('attr.role') role = 'button';\n}\n```\n# 自定义管道\n可以使用``ng g p``来创建一个新的自定义管道。\n例如，可以创建一个判断是否为0的管道。\n``` typescript\n@Pipe({\n  name: 'isZeroPipe'\n})\nexport class IsZeroPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if(value){\n      return 'NotZero';\n    }else{\n      return 'Zero';\n    }\n  }\n}\n```\n## 内置管道\n\n\n管道|类型|功能\n---|---|---\nDatePipe|\t纯管道\t|日期管道，格式化日期\nJsonPipe|\t非纯管道|\t将输入数据对象经过JSON.stringify()方法转换后输出对象的字符串\nUpperCasePipe|\t纯管道|\t将文本所有小写字母转换成大写字母\nLowerCasePipe|\t纯管道|\t将文本所有大写字母转换成小写字母\nDecimalPipe|\t纯管道|\t将数值按特定的格式显示文本\nCurrentcyPipe|\t纯管道|\t将数值转百分比格式\nSlicePipe|\t非纯管道|\t将数组或者字符串裁剪成新子集","slug":"Angular5 自定义管道与指令","published":1,"updated":"2019-04-07T09:49:37.460Z","_id":"cju6qwfnv002wlgv8c5dfq4bs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Angular有很多内置指令与管道，但有时候还是要添加自定义的管道或指令。</p>\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><p>可以通过<code>ng g d</code>选项来创建一个新的指令。<br>例如可以定义一个<code>highlight</code>指令，并可以在其中应用<code>@HostListener,@HostBingding,@Input</code>等装饰器。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'[highlight]'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HighlightDirective &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> elem: ElementRef, <span class=\"keyword\">private</span> renderer: Renderer</span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> color :<span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>(<span class=\"string\">'highlight'</span>) </span><br><span class=\"line\">  highlightColor: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">'mouseenter'</span>)</span><br><span class=\"line\">  onMouseEnter() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.highlightColor);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.renderer.setElementStyle(<span class=\"keyword\">this</span>.elem.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"keyword\">this</span>.highlightColor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">'mouseleave'</span>)</span><br><span class=\"line\">  onMouseLeave() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.renderer.setElementStyle(<span class=\"keyword\">this</span>.elem.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostBinding</span>(<span class=\"string\">'attr.role'</span>) role = <span class=\"string\">'button'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义管道\"><a href=\"#自定义管道\" class=\"headerlink\" title=\"自定义管道\"></a>自定义管道</h1><p>可以使用<code>ng g p</code>来创建一个新的自定义管道。<br>例如，可以创建一个判断是否为0的管道。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'isZeroPipe'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> IsZeroPipe <span class=\"keyword\">implements</span> PipeTransform &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  transform(value: <span class=\"built_in\">any</span>, args?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'NotZero'</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'Zero'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"内置管道\"><a href=\"#内置管道\" class=\"headerlink\" title=\"内置管道\"></a>内置管道</h2><table>\n<thead>\n<tr>\n<th>管道</th>\n<th>类型</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DatePipe</td>\n<td>纯管道</td>\n<td>日期管道，格式化日期</td>\n</tr>\n<tr>\n<td>JsonPipe</td>\n<td>非纯管道</td>\n<td>将输入数据对象经过JSON.stringify()方法转换后输出对象的字符串</td>\n</tr>\n<tr>\n<td>UpperCasePipe</td>\n<td>纯管道</td>\n<td>将文本所有小写字母转换成大写字母</td>\n</tr>\n<tr>\n<td>LowerCasePipe</td>\n<td>纯管道</td>\n<td>将文本所有大写字母转换成小写字母</td>\n</tr>\n<tr>\n<td>DecimalPipe</td>\n<td>纯管道</td>\n<td>将数值按特定的格式显示文本</td>\n</tr>\n<tr>\n<td>CurrentcyPipe</td>\n<td>纯管道</td>\n<td>将数值转百分比格式</td>\n</tr>\n<tr>\n<td>SlicePipe</td>\n<td>非纯管道</td>\n<td>将数组或者字符串裁剪成新子集</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>Angular有很多内置指令与管道，但有时候还是要添加自定义的管道或指令。</p>\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><p>可以通过<code>ng g d</code>选项来创建一个新的指令。<br>例如可以定义一个<code>highlight</code>指令，并可以在其中应用<code>@HostListener,@HostBingding,@Input</code>等装饰器。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'[highlight]'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HighlightDirective &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> elem: ElementRef, <span class=\"keyword\">private</span> renderer: Renderer</span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> color :<span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>(<span class=\"string\">'highlight'</span>) </span><br><span class=\"line\">  highlightColor: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">'mouseenter'</span>)</span><br><span class=\"line\">  onMouseEnter() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.highlightColor);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.renderer.setElementStyle(<span class=\"keyword\">this</span>.elem.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"keyword\">this</span>.highlightColor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">'mouseleave'</span>)</span><br><span class=\"line\">  onMouseLeave() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.renderer.setElementStyle(<span class=\"keyword\">this</span>.elem.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostBinding</span>(<span class=\"string\">'attr.role'</span>) role = <span class=\"string\">'button'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义管道\"><a href=\"#自定义管道\" class=\"headerlink\" title=\"自定义管道\"></a>自定义管道</h1><p>可以使用<code>ng g p</code>来创建一个新的自定义管道。<br>例如，可以创建一个判断是否为0的管道。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'isZeroPipe'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> IsZeroPipe <span class=\"keyword\">implements</span> PipeTransform &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  transform(value: <span class=\"built_in\">any</span>, args?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'NotZero'</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'Zero'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"内置管道\"><a href=\"#内置管道\" class=\"headerlink\" title=\"内置管道\"></a>内置管道</h2><table>\n<thead>\n<tr>\n<th>管道</th>\n<th>类型</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DatePipe</td>\n<td>纯管道</td>\n<td>日期管道，格式化日期</td>\n</tr>\n<tr>\n<td>JsonPipe</td>\n<td>非纯管道</td>\n<td>将输入数据对象经过JSON.stringify()方法转换后输出对象的字符串</td>\n</tr>\n<tr>\n<td>UpperCasePipe</td>\n<td>纯管道</td>\n<td>将文本所有小写字母转换成大写字母</td>\n</tr>\n<tr>\n<td>LowerCasePipe</td>\n<td>纯管道</td>\n<td>将文本所有大写字母转换成小写字母</td>\n</tr>\n<tr>\n<td>DecimalPipe</td>\n<td>纯管道</td>\n<td>将数值按特定的格式显示文本</td>\n</tr>\n<tr>\n<td>CurrentcyPipe</td>\n<td>纯管道</td>\n<td>将数值转百分比格式</td>\n</tr>\n<tr>\n<td>SlicePipe</td>\n<td>非纯管道</td>\n<td>将数组或者字符串裁剪成新子集</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"CSS居中","date":"2016-02-02T16:00:00.000Z","_content":"# 水平居中\n## 块级元素（宽度固定）\n有宽度的前提下，可以设置这个块级元素的左右margin为auto来实现水平居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n</style>\n<div class=\"container\">\n<div style=\"height:200px;width:200px;margin-left:auto;margin-right:auto;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n另外，可以利用绝对定位来实现水平居中。首先``left:50%``，然后再``margin``到元素宽度一半的地方。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n</style>\n<div class=\"container\">\n<div style=\"position:absolute;left:50%;margin-left:-100px;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n## 块级元素（宽度不定）\n没有指定宽度时，可以通过``translateX``属性来实现。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.inner{\nposition:absolute;\nleft:50%;\ntransform: translateX(-50%);\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。\n</div>\n</div>\n</body>\n</html>\n```\n## 行内元素\n块级元素可以通过设置``display:inline-block``来转换成行内元素来达到相同的效果。\n设置父容器的``text-align``为``center``即可实现行内元素居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  text-align:center;\n}\n</style>\n<div class=\"container\">\n\n<span style=\"background-color:red\">水平居中或者说水平垂直居中的方案很多种,但在实际当中,不一定.....</span>\n</div>\n</body>\n</html>\n```\n## flex布局\n设置父容器的flex布局即可实现各类元素水平居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  display:flex;\n  justify-content: center;\n}\n</style>\n<div class=\"container\">\n<div style=\"height:200px;width:200px;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n\n# 垂直居中\n## 行内元素\ninline 元素的行高与``inline-height``相等，则中间内容居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\nheight:300px;\n}\n.inner{\nline-height:300px;\n}\n</style>\n<div class=\"container\">\n<span class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</span>\n</div>\n</body>\n</html>\n```\n可以利用inline元素的 CSS 属性 ``vertical-align``，将其设置为 middle，父容器设置为``display:table``。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\ndisplay:table;\nheight:300px;\n}\n.inner{\ndisplay:table-cell;\n vertical-align:middle;\n\n}\n</style>\n<div class=\"container\">\n<span class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</span>\n</div>\n</body>\n</html>\n```\n## 块级元素(知道高度)\n有高度的前提下，可以设置这个块级元素的绝对定位实现垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n.inner{\nposition:absolute;\nheight:100px;\ntop:50%;\nmargin-top: -50px;\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</div>\n</div>\n</body>\n</html>\n```\n## 块级元素（高度未知）\n不知道高度时，与水平对齐同理，可以使用``translateY``来实现垂直居中。\n```\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n.inner{\nposition:absolute;\ntop:50%;\ntranform:translateY(-50%);\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</div>\n</div>\n</body>\n</html>\n```\n## flex布局\n设置父容器的flex布局即可实现各类元素垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  height:300px;\n  display:flex;\n  align-items: center;\n}\n</style>\n<div class=\"container\">\n<div>这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</div>\n</div>\n</body>\n</html>\n```\n","source":"_posts/CSS居中.md","raw":"---\ntitle: CSS居中\ndate: 2016-2-3\ncategories:\n- 前端\n- CSS\ntags:\n- 前端\n- CSS\n---\n# 水平居中\n## 块级元素（宽度固定）\n有宽度的前提下，可以设置这个块级元素的左右margin为auto来实现水平居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n</style>\n<div class=\"container\">\n<div style=\"height:200px;width:200px;margin-left:auto;margin-right:auto;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n另外，可以利用绝对定位来实现水平居中。首先``left:50%``，然后再``margin``到元素宽度一半的地方。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n</style>\n<div class=\"container\">\n<div style=\"position:absolute;left:50%;margin-left:-100px;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n## 块级元素（宽度不定）\n没有指定宽度时，可以通过``translateX``属性来实现。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.inner{\nposition:absolute;\nleft:50%;\ntransform: translateX(-50%);\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。\n</div>\n</div>\n</body>\n</html>\n```\n## 行内元素\n块级元素可以通过设置``display:inline-block``来转换成行内元素来达到相同的效果。\n设置父容器的``text-align``为``center``即可实现行内元素居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  text-align:center;\n}\n</style>\n<div class=\"container\">\n\n<span style=\"background-color:red\">水平居中或者说水平垂直居中的方案很多种,但在实际当中,不一定.....</span>\n</div>\n</body>\n</html>\n```\n## flex布局\n设置父容器的flex布局即可实现各类元素水平居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  display:flex;\n  justify-content: center;\n}\n</style>\n<div class=\"container\">\n<div style=\"height:200px;width:200px;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n\n# 垂直居中\n## 行内元素\ninline 元素的行高与``inline-height``相等，则中间内容居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\nheight:300px;\n}\n.inner{\nline-height:300px;\n}\n</style>\n<div class=\"container\">\n<span class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</span>\n</div>\n</body>\n</html>\n```\n可以利用inline元素的 CSS 属性 ``vertical-align``，将其设置为 middle，父容器设置为``display:table``。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\ndisplay:table;\nheight:300px;\n}\n.inner{\ndisplay:table-cell;\n vertical-align:middle;\n\n}\n</style>\n<div class=\"container\">\n<span class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</span>\n</div>\n</body>\n</html>\n```\n## 块级元素(知道高度)\n有高度的前提下，可以设置这个块级元素的绝对定位实现垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n.inner{\nposition:absolute;\nheight:100px;\ntop:50%;\nmargin-top: -50px;\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</div>\n</div>\n</body>\n</html>\n```\n## 块级元素（高度未知）\n不知道高度时，与水平对齐同理，可以使用``translateY``来实现垂直居中。\n```\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n.inner{\nposition:absolute;\ntop:50%;\ntranform:translateY(-50%);\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</div>\n</div>\n</body>\n</html>\n```\n## flex布局\n设置父容器的flex布局即可实现各类元素垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  height:300px;\n  display:flex;\n  align-items: center;\n}\n</style>\n<div class=\"container\">\n<div>这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</div>\n</div>\n</body>\n</html>\n```\n","slug":"CSS居中","published":1,"updated":"2019-04-07T09:54:14.185Z","_id":"cju6qxq8g0038lgv8pdt3h8kl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h1><h2 id=\"块级元素（宽度固定）\"><a href=\"#块级元素（宽度固定）\" class=\"headerlink\" title=\"块级元素（宽度固定）\"></a>块级元素（宽度固定）</h2><p>有宽度的前提下，可以设置这个块级元素的左右margin为auto来实现水平居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:200px;width:200px;margin-left:auto;margin-right:auto;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>另外，可以利用绝对定位来实现水平居中。首先<code>left:50%</code>，然后再<code>margin</code>到元素宽度一半的地方。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;left:50%;margin-left:-100px;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"块级元素（宽度不定）\"><a href=\"#块级元素（宽度不定）\" class=\"headerlink\" title=\"块级元素（宽度不定）\"></a>块级元素（宽度不定）</h2><p>没有指定宽度时，可以通过<code>translateX</code>属性来实现。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">left:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">transform: translateX(-50%);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h2><p>块级元素可以通过设置<code>display:inline-block</code>来转换成行内元素来达到相同的效果。<br>设置父容器的<code>text-align</code>为<code>center</code>即可实现行内元素居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  text-align:center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color:red\"</span>&gt;</span>水平居中或者说水平垂直居中的方案很多种,但在实际当中,不一定.....<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>设置父容器的flex布局即可实现各类元素水平居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  display:flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:200px;width:200px;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h1><h2 id=\"行内元素-1\"><a href=\"#行内元素-1\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h2><p>inline 元素的行高与<code>inline-height</code>相等，则中间内容居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">line-height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以利用inline元素的 CSS 属性 <code>vertical-align</code>，将其设置为 middle，父容器设置为<code>display:table</code>。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">display:table;</span></span><br><span class=\"line\"><span class=\"undefined\">height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">display:table-cell;</span></span><br><span class=\"line\"><span class=\"undefined\"> vertical-align:middle;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"块级元素-知道高度\"><a href=\"#块级元素-知道高度\" class=\"headerlink\" title=\"块级元素(知道高度)\"></a>块级元素(知道高度)</h2><p>有高度的前提下，可以设置这个块级元素的绝对定位实现垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">height:100px;</span></span><br><span class=\"line\"><span class=\"undefined\">top:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">margin-top: -50px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"块级元素（高度未知）\"><a href=\"#块级元素（高度未知）\" class=\"headerlink\" title=\"块级元素（高度未知）\"></a>块级元素（高度未知）</h2><p>不知道高度时，与水平对齐同理，可以使用<code>translateY</code>来实现垂直居中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.inner&#123;</span><br><span class=\"line\">position:absolute;</span><br><span class=\"line\">top:50%;</span><br><span class=\"line\">tranform:translateY(-50%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;inner&quot;&gt;</span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"flex布局-1\"><a href=\"#flex布局-1\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>设置父容器的flex布局即可实现各类元素垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">  display:flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h1><h2 id=\"块级元素（宽度固定）\"><a href=\"#块级元素（宽度固定）\" class=\"headerlink\" title=\"块级元素（宽度固定）\"></a>块级元素（宽度固定）</h2><p>有宽度的前提下，可以设置这个块级元素的左右margin为auto来实现水平居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:200px;width:200px;margin-left:auto;margin-right:auto;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>另外，可以利用绝对定位来实现水平居中。首先<code>left:50%</code>，然后再<code>margin</code>到元素宽度一半的地方。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;left:50%;margin-left:-100px;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"块级元素（宽度不定）\"><a href=\"#块级元素（宽度不定）\" class=\"headerlink\" title=\"块级元素（宽度不定）\"></a>块级元素（宽度不定）</h2><p>没有指定宽度时，可以通过<code>translateX</code>属性来实现。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">left:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">transform: translateX(-50%);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h2><p>块级元素可以通过设置<code>display:inline-block</code>来转换成行内元素来达到相同的效果。<br>设置父容器的<code>text-align</code>为<code>center</code>即可实现行内元素居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  text-align:center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color:red\"</span>&gt;</span>水平居中或者说水平垂直居中的方案很多种,但在实际当中,不一定.....<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>设置父容器的flex布局即可实现各类元素水平居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  display:flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:200px;width:200px;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h1><h2 id=\"行内元素-1\"><a href=\"#行内元素-1\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h2><p>inline 元素的行高与<code>inline-height</code>相等，则中间内容居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">line-height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以利用inline元素的 CSS 属性 <code>vertical-align</code>，将其设置为 middle，父容器设置为<code>display:table</code>。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">display:table;</span></span><br><span class=\"line\"><span class=\"undefined\">height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">display:table-cell;</span></span><br><span class=\"line\"><span class=\"undefined\"> vertical-align:middle;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"块级元素-知道高度\"><a href=\"#块级元素-知道高度\" class=\"headerlink\" title=\"块级元素(知道高度)\"></a>块级元素(知道高度)</h2><p>有高度的前提下，可以设置这个块级元素的绝对定位实现垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">height:100px;</span></span><br><span class=\"line\"><span class=\"undefined\">top:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">margin-top: -50px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"块级元素（高度未知）\"><a href=\"#块级元素（高度未知）\" class=\"headerlink\" title=\"块级元素（高度未知）\"></a>块级元素（高度未知）</h2><p>不知道高度时，与水平对齐同理，可以使用<code>translateY</code>来实现垂直居中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.inner&#123;</span><br><span class=\"line\">position:absolute;</span><br><span class=\"line\">top:50%;</span><br><span class=\"line\">tranform:translateY(-50%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;inner&quot;&gt;</span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"flex布局-1\"><a href=\"#flex布局-1\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>设置父容器的flex布局即可实现各类元素垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">  display:flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"用Docker和angular5及Koa创建MEAN应用","date":"2016-06-18T16:00:00.000Z","_content":"首先要确保angualr-cli和docker都已经安装完毕。\n## client\n创建一个新的angular-cli项目mean-docker/angular-client。\n\n在angular-client目录下，创建一个Dockerfile，并写入如下内容\n```\nFROM node:8\n# 创建工作目录\nRUN mkdir -p /usr/src/app\n# 切换到工作目录\nWORKDIR /usr/src/app\n# 拷贝package.json到工作目录\nCOPY package.json /usr/src/app\n# 运行npm install\nRUN npm install\n# 拷贝所有source到工作目录\nCOPY . /usr/src/app\n# 开放4200端口\nEXPOSE 4200\n# 运行npm start\nCMD [\"npm\", \"start\"]\n```\n为了防止node_modules文件夹也被拷贝，可以新建一个.dockeringore文件把它过滤掉。\n\n为了确保client端由docker image提供host，需要修改package.json中npm start一节为：\n```\n\"start\": \"ng serve -H 0.0.0.0\",\n```\n接下来，build这个镜像：\n```\n docker build -t angular-client:dev .\n```\nbulid好镜像之后，可以使用这个镜像来创建容器：\n```\ndocker run -d --name angular-client -p 4200:4200 angular-client:dev\n```\n## server\n在mean-docker目录下创建一个koa-server目录。执行npm init命令，新建一个npm 项目。安装koa和koa-router等组件。\n\napp.js中写入如下内容：\n``` javascript\nconst compose = require('koa-compose');\nconst Koa = require('koa');\nconst app = new Koa();\nconst router = require('./router');\n\n// x-response-time\nasync function responseTime (ctx, next){\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n};\n\n// logger\nasync function logger (ctx, next) {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n};\n\nconst all = compose([\n    responseTime,\n    logger(),\n    router.routes()\n]);\n\napp.use(all);\n\napp.listen(3000);\n```\nrouter中写入如下内容：\n``` javascript\nconst router = require('koa-router')();\n\nrouter.get('/',  (ctx, next) => {\n    ctx.body = 'api works';\n});\n\nmodule.exports = router;\n```\n在koa-server目录下，创建一个Dockerfile，并写入如下内容：\n```\nFROM node:6\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nCOPY package.json /usr/src/app\nRUN npm install\nCOPY . /usr/src/app\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n同样的，也需要添加一个.dockeringore来忽略node_modules。\n为package.json添加npm start命令\n```\n\"start\": \"node app.js\",\n```\n执行docker build和docker run\n```\ndocker build -t koa-server:dev .\ndocker run -d --name koa-server -p 3000:3000 koa-server:dev\n```\n\n## mongodb\n\n启动一个mongodb容器：\n```\ndocker run -d --name mongodb -p 27017:27017 mongo\n```\n\n## compose\n``` yml\nservices:\n  angular:\n    build: angular-client\n    ports:\n      - \"4200:4200\"\n      \n  koa: \n    build: koa-server\n    ports:\n      - \"3000:3000\"\n\n  database:\n    image: mongo\n    ports:\n      - \"27017:27017\"\n```\n至此，三个容器就创建好了，接下来补充程序中的实质性内容：\n\n## server端内容补充\n首先安装mongoose，为router添加路由和mongoose组件\n``` javascript\n// User model\nconst db = 'mongodb://database/mean-docker';\n\nmongoose.connect(db);\n\nconst userSchema = new mongoose.Schema({\n    name: String,\n    age: Number\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// ...\n\nrouter.get('/users',async (ctx, next) => {\n    await User.find({}, (err, users) => {\n        if (err) {\n            ctx.status = 500;\n            ctx.body = err;\n        }else{\n            ctx.status = 200;\n            ctx.body = users;\n        }\n    });\n});\n\n/* GET one users. */\nrouter.get('/users/:id',async (ctx, next) => {\n    await User.findById(ctx.request.param.id, (err, users) => {\n        if (err) {\n            ctx.status = 500;\n            ctx.body = err;\n        }else{\n            ctx.status = 200;\n            ctx.body = users;\n        }\n    });\n});\n\n/* Create a user. */\nrouter.post('/users',async (ctx, next) => {\n    let user = new User({\n        name: ctx.request.body.name,\n        age: ctx.request.body.age\n    });\n\n    await user.save(error => {\n        if (error) {\n            ctx.status = 500;\n            ctx.body = error;\n        }else{\n            ctx.status = 200;\n            ctx.body = {\n                message: 'User created successfully'\n            };\n        }\n    });\n});\n```\n接下来，连接mongodb和koa-server，在docker-compose中koa-server一节增加这样一句：\n``` yml\nlinks:\n      - database\n```\n\n## 前端内容补充\n在app.component.ts中添加如下内容：\n``` typescript\n  // ...\n  // Link to our api, pointing to localhost\n  API = 'http://localhost:3000';\n\n  // Declare empty list of people\n  people: any[] = [];\n\n  constructor(private http: Http) {}\n\n  // Angular 2 Life Cycle event when component has been initialized\n  ngOnInit() {\n    this.getAllPeople();\n  }\n\n  // Add one person to the API\n  addPerson(name, age) {\n    this.http.post(`${this.API}/users`, {name, age})\n      .map(res => res.json())\n      .subscribe(() => {\n        this.getAllPeople();\n      })\n  }\n\n  // Get all users from the API\n  getAllPeople() {\n    this.http.get(`${this.API}/users`)\n      .map(res => res.json())\n      .subscribe(people => {\n        console.log(people)\n        this.people = people\n      })\n  }\n  // ...\n```\n在app.component.html中增加如下内容：\n``` html\n<div class=\"container\">\n  <div [style.margin-top.px]=\"10\" class=\"row\">\n    <h3>Add new person</h3>\n    <form class=\"form-inline\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" #name>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"age\">Age</label>\n        <input type=\"number\" class=\"form-control\" id=\"age\" #age>\n      </div>\n      <button type=\"button\" (click)=\"addPerson(name.value, age.value)\" class=\"btn btn-primary\">Add person</button>\n    </form>\n  </div>\n  <div [style.margin-top.px]=\"10\" class=\"row\">\n    <h3>People</h3>\n    <div [style.margin-right.px]=\"10\" class=\"card card-block col-md-3\" *ngFor=\"let person of people\">\n      <h4 class=\"card-title\">{{person.name}}  {{person.age}}</h4>\n    </div>\n  </div>\n</div>\n```\n这样，就可以添加用户，查看用户了。\n","source":"_posts/用Docker和angular5及Koa创建MEAN应用.md","raw":"---\ntitle: 用Docker和angular5及Koa创建MEAN应用\ndate: 2016-6-19\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- js\n- angular\n---\n首先要确保angualr-cli和docker都已经安装完毕。\n## client\n创建一个新的angular-cli项目mean-docker/angular-client。\n\n在angular-client目录下，创建一个Dockerfile，并写入如下内容\n```\nFROM node:8\n# 创建工作目录\nRUN mkdir -p /usr/src/app\n# 切换到工作目录\nWORKDIR /usr/src/app\n# 拷贝package.json到工作目录\nCOPY package.json /usr/src/app\n# 运行npm install\nRUN npm install\n# 拷贝所有source到工作目录\nCOPY . /usr/src/app\n# 开放4200端口\nEXPOSE 4200\n# 运行npm start\nCMD [\"npm\", \"start\"]\n```\n为了防止node_modules文件夹也被拷贝，可以新建一个.dockeringore文件把它过滤掉。\n\n为了确保client端由docker image提供host，需要修改package.json中npm start一节为：\n```\n\"start\": \"ng serve -H 0.0.0.0\",\n```\n接下来，build这个镜像：\n```\n docker build -t angular-client:dev .\n```\nbulid好镜像之后，可以使用这个镜像来创建容器：\n```\ndocker run -d --name angular-client -p 4200:4200 angular-client:dev\n```\n## server\n在mean-docker目录下创建一个koa-server目录。执行npm init命令，新建一个npm 项目。安装koa和koa-router等组件。\n\napp.js中写入如下内容：\n``` javascript\nconst compose = require('koa-compose');\nconst Koa = require('koa');\nconst app = new Koa();\nconst router = require('./router');\n\n// x-response-time\nasync function responseTime (ctx, next){\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n};\n\n// logger\nasync function logger (ctx, next) {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n};\n\nconst all = compose([\n    responseTime,\n    logger(),\n    router.routes()\n]);\n\napp.use(all);\n\napp.listen(3000);\n```\nrouter中写入如下内容：\n``` javascript\nconst router = require('koa-router')();\n\nrouter.get('/',  (ctx, next) => {\n    ctx.body = 'api works';\n});\n\nmodule.exports = router;\n```\n在koa-server目录下，创建一个Dockerfile，并写入如下内容：\n```\nFROM node:6\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nCOPY package.json /usr/src/app\nRUN npm install\nCOPY . /usr/src/app\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n同样的，也需要添加一个.dockeringore来忽略node_modules。\n为package.json添加npm start命令\n```\n\"start\": \"node app.js\",\n```\n执行docker build和docker run\n```\ndocker build -t koa-server:dev .\ndocker run -d --name koa-server -p 3000:3000 koa-server:dev\n```\n\n## mongodb\n\n启动一个mongodb容器：\n```\ndocker run -d --name mongodb -p 27017:27017 mongo\n```\n\n## compose\n``` yml\nservices:\n  angular:\n    build: angular-client\n    ports:\n      - \"4200:4200\"\n      \n  koa: \n    build: koa-server\n    ports:\n      - \"3000:3000\"\n\n  database:\n    image: mongo\n    ports:\n      - \"27017:27017\"\n```\n至此，三个容器就创建好了，接下来补充程序中的实质性内容：\n\n## server端内容补充\n首先安装mongoose，为router添加路由和mongoose组件\n``` javascript\n// User model\nconst db = 'mongodb://database/mean-docker';\n\nmongoose.connect(db);\n\nconst userSchema = new mongoose.Schema({\n    name: String,\n    age: Number\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// ...\n\nrouter.get('/users',async (ctx, next) => {\n    await User.find({}, (err, users) => {\n        if (err) {\n            ctx.status = 500;\n            ctx.body = err;\n        }else{\n            ctx.status = 200;\n            ctx.body = users;\n        }\n    });\n});\n\n/* GET one users. */\nrouter.get('/users/:id',async (ctx, next) => {\n    await User.findById(ctx.request.param.id, (err, users) => {\n        if (err) {\n            ctx.status = 500;\n            ctx.body = err;\n        }else{\n            ctx.status = 200;\n            ctx.body = users;\n        }\n    });\n});\n\n/* Create a user. */\nrouter.post('/users',async (ctx, next) => {\n    let user = new User({\n        name: ctx.request.body.name,\n        age: ctx.request.body.age\n    });\n\n    await user.save(error => {\n        if (error) {\n            ctx.status = 500;\n            ctx.body = error;\n        }else{\n            ctx.status = 200;\n            ctx.body = {\n                message: 'User created successfully'\n            };\n        }\n    });\n});\n```\n接下来，连接mongodb和koa-server，在docker-compose中koa-server一节增加这样一句：\n``` yml\nlinks:\n      - database\n```\n\n## 前端内容补充\n在app.component.ts中添加如下内容：\n``` typescript\n  // ...\n  // Link to our api, pointing to localhost\n  API = 'http://localhost:3000';\n\n  // Declare empty list of people\n  people: any[] = [];\n\n  constructor(private http: Http) {}\n\n  // Angular 2 Life Cycle event when component has been initialized\n  ngOnInit() {\n    this.getAllPeople();\n  }\n\n  // Add one person to the API\n  addPerson(name, age) {\n    this.http.post(`${this.API}/users`, {name, age})\n      .map(res => res.json())\n      .subscribe(() => {\n        this.getAllPeople();\n      })\n  }\n\n  // Get all users from the API\n  getAllPeople() {\n    this.http.get(`${this.API}/users`)\n      .map(res => res.json())\n      .subscribe(people => {\n        console.log(people)\n        this.people = people\n      })\n  }\n  // ...\n```\n在app.component.html中增加如下内容：\n``` html\n<div class=\"container\">\n  <div [style.margin-top.px]=\"10\" class=\"row\">\n    <h3>Add new person</h3>\n    <form class=\"form-inline\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" #name>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"age\">Age</label>\n        <input type=\"number\" class=\"form-control\" id=\"age\" #age>\n      </div>\n      <button type=\"button\" (click)=\"addPerson(name.value, age.value)\" class=\"btn btn-primary\">Add person</button>\n    </form>\n  </div>\n  <div [style.margin-top.px]=\"10\" class=\"row\">\n    <h3>People</h3>\n    <div [style.margin-right.px]=\"10\" class=\"card card-block col-md-3\" *ngFor=\"let person of people\">\n      <h4 class=\"card-title\">{{person.name}}  {{person.age}}</h4>\n    </div>\n  </div>\n</div>\n```\n这样，就可以添加用户，查看用户了。\n","slug":"用Docker和angular5及Koa创建MEAN应用","published":1,"updated":"2019-04-07T09:53:36.804Z","_id":"cju6qy2zi0039lgv8ou3k11ue","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先要确保angualr-cli和docker都已经安装完毕。</p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p>创建一个新的angular-cli项目mean-docker/angular-client。</p>\n<p>在angular-client目录下，创建一个Dockerfile，并写入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8</span><br><span class=\"line\"># 创建工作目录</span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\"># 切换到工作目录</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"># 拷贝package.json到工作目录</span><br><span class=\"line\">COPY package.json /usr/src/app</span><br><span class=\"line\"># 运行npm install</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"># 拷贝所有source到工作目录</span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\"># 开放4200端口</span><br><span class=\"line\">EXPOSE 4200</span><br><span class=\"line\"># 运行npm start</span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>为了防止node_modules文件夹也被拷贝，可以新建一个.dockeringore文件把它过滤掉。</p>\n<p>为了确保client端由docker image提供host，需要修改package.json中npm start一节为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;ng serve -H 0.0.0.0&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>接下来，build这个镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t angular-client:dev .</span><br></pre></td></tr></table></figure></p>\n<p>bulid好镜像之后，可以使用这个镜像来创建容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name angular-client -p 4200:4200 angular-client:dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p>在mean-docker目录下创建一个koa-server目录。执行npm init命令，新建一个npm 项目。安装koa和koa-router等组件。</p>\n<p>app.js中写入如下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-compose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x-response-time</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">responseTime</span> (<span class=\"params\">ctx, next</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"built_in\">Date</span>.now() - start;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'X-Response-Time'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;ms&#125;</span>ms`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span> (<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"built_in\">Date</span>.now() - start;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;ctx.method&#125;</span> <span class=\"subst\">$&#123;ctx.url&#125;</span> - <span class=\"subst\">$&#123;ms&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> all = compose([</span><br><span class=\"line\">    responseTime,</span><br><span class=\"line\">    logger(),</span><br><span class=\"line\">    router.routes()</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(all);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>router中写入如下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>,  (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'api works'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p>\n<p>在koa-server目录下，创建一个Dockerfile，并写入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:6</span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\">COPY package.json /usr/src/app</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>同样的，也需要添加一个.dockeringore来忽略node_modules。<br>为package.json添加npm start命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;node app.js&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>执行docker build和docker run<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t koa-server:dev .</span><br><span class=\"line\">docker run -d --name koa-server -p 3000:3000 koa-server:dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h2><p>启动一个mongodb容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mongodb -p 27017:27017 mongo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  angular:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">angular-client</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"4200:4200\"</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">  koa:</span> </span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">koa-server</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"3000:3000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  database:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"27017:27017\"</span></span><br></pre></td></tr></table></figure>\n<p>至此，三个容器就创建好了，接下来补充程序中的实质性内容：</p>\n<h2 id=\"server端内容补充\"><a href=\"#server端内容补充\" class=\"headerlink\" title=\"server端内容补充\"></a>server端内容补充</h2><p>首先安装mongoose，为router添加路由和mongoose组件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// User model</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">'mongodb://database/mean-docker'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(db);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = mongoose.model(<span class=\"string\">'User'</span>, userSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/users'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> User.find(&#123;&#125;, (err, users) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = err;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET one users. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/users/:id'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> User.findById(ctx.request.param.id, (err, users) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = err;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Create a user. */</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/users'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">        name: ctx.request.body.name,</span><br><span class=\"line\">        age: ctx.request.body.age</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> user.save(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = error;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                message: <span class=\"string\">'User created successfully'</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>接下来，连接mongodb和koa-server，在docker-compose中koa-server一节增加这样一句：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">database</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"前端内容补充\"><a href=\"#前端内容补充\" class=\"headerlink\" title=\"前端内容补充\"></a>前端内容补充</h2><p>在app.component.ts中添加如下内容：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// Link to our api, pointing to localhost</span></span><br><span class=\"line\">API = <span class=\"string\">'http://localhost:3000'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare empty list of people</span></span><br><span class=\"line\">people: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Angular 2 Life Cycle event when component has been initialized</span></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getAllPeople();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add one person to the API</span></span><br><span class=\"line\">addPerson(name, age) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.http.post(<span class=\"string\">`<span class=\"subst\">$&#123;this.API&#125;</span>/users`</span>, &#123;name, age&#125;)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getAllPeople();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get all users from the API</span></span><br><span class=\"line\">getAllPeople() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.http.get(<span class=\"string\">`<span class=\"subst\">$&#123;this.API&#125;</span>/users`</span>)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">people</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(people)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.people = people</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p>在app.component.html中增加如下内容：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-top.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Add new person<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-inline\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> #<span class=\"attr\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"age\"</span>&gt;</span>Age<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> #<span class=\"attr\">age</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"addPerson(name.value, age.value)\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Add person<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-top.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>People<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-right.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card card-block col-md-3\"</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let person of people\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card-title\"</span>&gt;</span>&#123;&#123;person.name&#125;&#125;  &#123;&#123;person.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样，就可以添加用户，查看用户了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先要确保angualr-cli和docker都已经安装完毕。</p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p>创建一个新的angular-cli项目mean-docker/angular-client。</p>\n<p>在angular-client目录下，创建一个Dockerfile，并写入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8</span><br><span class=\"line\"># 创建工作目录</span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\"># 切换到工作目录</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"># 拷贝package.json到工作目录</span><br><span class=\"line\">COPY package.json /usr/src/app</span><br><span class=\"line\"># 运行npm install</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"># 拷贝所有source到工作目录</span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\"># 开放4200端口</span><br><span class=\"line\">EXPOSE 4200</span><br><span class=\"line\"># 运行npm start</span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>为了防止node_modules文件夹也被拷贝，可以新建一个.dockeringore文件把它过滤掉。</p>\n<p>为了确保client端由docker image提供host，需要修改package.json中npm start一节为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;ng serve -H 0.0.0.0&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>接下来，build这个镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t angular-client:dev .</span><br></pre></td></tr></table></figure></p>\n<p>bulid好镜像之后，可以使用这个镜像来创建容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name angular-client -p 4200:4200 angular-client:dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p>在mean-docker目录下创建一个koa-server目录。执行npm init命令，新建一个npm 项目。安装koa和koa-router等组件。</p>\n<p>app.js中写入如下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-compose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x-response-time</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">responseTime</span> (<span class=\"params\">ctx, next</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"built_in\">Date</span>.now() - start;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'X-Response-Time'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;ms&#125;</span>ms`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span> (<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"built_in\">Date</span>.now() - start;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;ctx.method&#125;</span> <span class=\"subst\">$&#123;ctx.url&#125;</span> - <span class=\"subst\">$&#123;ms&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> all = compose([</span><br><span class=\"line\">    responseTime,</span><br><span class=\"line\">    logger(),</span><br><span class=\"line\">    router.routes()</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(all);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>router中写入如下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>,  (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'api works'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p>\n<p>在koa-server目录下，创建一个Dockerfile，并写入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:6</span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\">COPY package.json /usr/src/app</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>同样的，也需要添加一个.dockeringore来忽略node_modules。<br>为package.json添加npm start命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;node app.js&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>执行docker build和docker run<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t koa-server:dev .</span><br><span class=\"line\">docker run -d --name koa-server -p 3000:3000 koa-server:dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h2><p>启动一个mongodb容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mongodb -p 27017:27017 mongo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  angular:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">angular-client</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"4200:4200\"</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">  koa:</span> </span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">koa-server</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"3000:3000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  database:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"27017:27017\"</span></span><br></pre></td></tr></table></figure>\n<p>至此，三个容器就创建好了，接下来补充程序中的实质性内容：</p>\n<h2 id=\"server端内容补充\"><a href=\"#server端内容补充\" class=\"headerlink\" title=\"server端内容补充\"></a>server端内容补充</h2><p>首先安装mongoose，为router添加路由和mongoose组件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// User model</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">'mongodb://database/mean-docker'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(db);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = mongoose.model(<span class=\"string\">'User'</span>, userSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/users'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> User.find(&#123;&#125;, (err, users) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = err;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET one users. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/users/:id'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> User.findById(ctx.request.param.id, (err, users) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = err;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Create a user. */</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/users'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">        name: ctx.request.body.name,</span><br><span class=\"line\">        age: ctx.request.body.age</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> user.save(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = error;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                message: <span class=\"string\">'User created successfully'</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>接下来，连接mongodb和koa-server，在docker-compose中koa-server一节增加这样一句：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">database</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"前端内容补充\"><a href=\"#前端内容补充\" class=\"headerlink\" title=\"前端内容补充\"></a>前端内容补充</h2><p>在app.component.ts中添加如下内容：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// Link to our api, pointing to localhost</span></span><br><span class=\"line\">API = <span class=\"string\">'http://localhost:3000'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare empty list of people</span></span><br><span class=\"line\">people: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Angular 2 Life Cycle event when component has been initialized</span></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getAllPeople();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add one person to the API</span></span><br><span class=\"line\">addPerson(name, age) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.http.post(<span class=\"string\">`<span class=\"subst\">$&#123;this.API&#125;</span>/users`</span>, &#123;name, age&#125;)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getAllPeople();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get all users from the API</span></span><br><span class=\"line\">getAllPeople() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.http.get(<span class=\"string\">`<span class=\"subst\">$&#123;this.API&#125;</span>/users`</span>)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">people</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(people)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.people = people</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p>在app.component.html中增加如下内容：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-top.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Add new person<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-inline\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> #<span class=\"attr\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"age\"</span>&gt;</span>Age<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> #<span class=\"attr\">age</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"addPerson(name.value, age.value)\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Add person<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-top.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>People<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-right.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card card-block col-md-3\"</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let person of people\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card-title\"</span>&gt;</span>&#123;&#123;person.name&#125;&#125;  &#123;&#123;person.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样，就可以添加用户，查看用户了。</p>\n"},{"title":"CSS清除浮动","date":"2016-02-01T16:00:00.000Z","_content":"首先定义如下几个div。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  border: 1px solid #c5c5c5;\n}\n</style>\n<div class=\"container clearfix\">\n<div id=\"first\" style=\"width:100px;height:100px;background-color:yellow;float:left;\"></div>\n<div style=\"width:100px;height:200px;background-color:red;float:left\"></div>\n</div>\n</body>\n</html>\n```\n此时可以发现，两个``div``元素行内对齐排列，加了浮动之后的元素脱离了标准流，所以父容器出现了高度塌陷。\n![图片1](CSS清除浮动/1.jpg)\n清除浮动的方法有以下几个：\n- 增加一个空的``div``元素\n``` html\n<div style=\"clear:both\"></div>\n```\n![图片2](CSS清除浮动/2.jpg)\n- 为父级元素增加``overflow:hidden``属性。\n``` css\n.container{\n  border: 1px solid #c5c5c5;\n  overflow: hidden;\n}\n```\n![图片3](CSS清除浮动/3.jpg)\n- 为父级元素增加伪元素。\n``` css\n.clearfix:before,\n.clearfix:after {\n    display: table;\n    content: \" \";\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix{\n    *zoom: 1;\n}\n```\n![图片4](CSS清除浮动/4.jpg)","source":"_posts/CSS清除浮动.md","raw":"---\ntitle: CSS清除浮动\ndate: 2016-2-2\ncategories:\n- 前端\n- CSS\ntags:\n- 前端\n- CSS\n---\n首先定义如下几个div。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  border: 1px solid #c5c5c5;\n}\n</style>\n<div class=\"container clearfix\">\n<div id=\"first\" style=\"width:100px;height:100px;background-color:yellow;float:left;\"></div>\n<div style=\"width:100px;height:200px;background-color:red;float:left\"></div>\n</div>\n</body>\n</html>\n```\n此时可以发现，两个``div``元素行内对齐排列，加了浮动之后的元素脱离了标准流，所以父容器出现了高度塌陷。\n![图片1](CSS清除浮动/1.jpg)\n清除浮动的方法有以下几个：\n- 增加一个空的``div``元素\n``` html\n<div style=\"clear:both\"></div>\n```\n![图片2](CSS清除浮动/2.jpg)\n- 为父级元素增加``overflow:hidden``属性。\n``` css\n.container{\n  border: 1px solid #c5c5c5;\n  overflow: hidden;\n}\n```\n![图片3](CSS清除浮动/3.jpg)\n- 为父级元素增加伪元素。\n``` css\n.clearfix:before,\n.clearfix:after {\n    display: table;\n    content: \" \";\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix{\n    *zoom: 1;\n}\n```\n![图片4](CSS清除浮动/4.jpg)","slug":"CSS清除浮动","published":1,"updated":"2019-04-07T09:54:20.992Z","_id":"cju6r2pj900091wv8zefpwggl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先定义如下几个div。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: 1px solid #c5c5c5;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container clearfix\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"first\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:100px;background-color:yellow;float:left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:200px;background-color:red;float:left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时可以发现，两个<code>div</code>元素行内对齐排列，加了浮动之后的元素脱离了标准流，所以父容器出现了高度塌陷。<br><img src=\"CSS清除浮动/1.jpg\" alt=\"图片1\"><br>清除浮动的方法有以下几个：</p>\n<ul>\n<li>增加一个空的<code>div</code>元素<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear:both\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"CSS清除浮动/2.jpg\" alt=\"图片2\"></p>\n<ul>\n<li>为父级元素增加<code>overflow:hidden</code>属性。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#c5c5c5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"CSS清除浮动/3.jpg\" alt=\"图片3\"></p>\n<ul>\n<li>为父级元素增加伪元素。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"CSS清除浮动/4.jpg\" alt=\"图片4\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先定义如下几个div。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: 1px solid #c5c5c5;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container clearfix\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"first\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:100px;background-color:yellow;float:left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:200px;background-color:red;float:left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时可以发现，两个<code>div</code>元素行内对齐排列，加了浮动之后的元素脱离了标准流，所以父容器出现了高度塌陷。<br><img src=\"CSS清除浮动/1.jpg\" alt=\"图片1\"><br>清除浮动的方法有以下几个：</p>\n<ul>\n<li>增加一个空的<code>div</code>元素<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear:both\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"CSS清除浮动/2.jpg\" alt=\"图片2\"></p>\n<ul>\n<li>为父级元素增加<code>overflow:hidden</code>属性。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#c5c5c5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"CSS清除浮动/3.jpg\" alt=\"图片3\"></p>\n<ul>\n<li>为父级元素增加伪元素。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"CSS清除浮动/4.jpg\" alt=\"图片4\"></p>\n"},{"title":"阿里云乞丐版折腾ebookcoin","date":"2017-02-09T16:00:00.000Z","_content":"阿里云除了ECS外，今年还推出了轻量应用服务器。主要用来部署个人应用，小网站后台，我也申请了一个来玩，三个月135元。\n\n大多数云主机，比如aws，都是没有图形画面的，在网页控制台只能使用简陋的交互式终端来操作。\n\n我的目的是在GUI下，用VSCode调试区块链程序-[Ebookcoin（亿书）](https://github.com/Ebookcoin/ebookcoin)。\n从一无所有的云服务器中建立调试环境，主要有以下几个步骤：\n1. 建立桌面（vncviewer)到云服务器间的连接（vncserver）\n2. 在云服务器上安装，配置GUI环境\n3. 安装git，VSCode等\n\n## 建立桌面（vncviewer)到云服务器间的连接（vncserver）\n首先，要在阿里云防火墙中打开5901和5902端口，否则后面桌面端无法访问。\n\n在远程连接中安装vncserver，执行：\n```\nsudo apt-get update\nsudo apt-get install vnc4server\n```\n然后执行，启动服务，输入访问密码\n```\nvncserver\n```\n在vncviewer中输入公网IP:1即可访问。\n## 在云服务器上安装，配置GUI环境\n阿里云官方推荐的gnome，ubuntu-desktop图形环境很大，对乞丐版20GB的空间太大，所以换成不足300MB的xfce4。\n在远程连接中安装xfce4，执行：\n```\nsudo apt-get install xfce4\n```\n因为要在vncviewer中运行GUI，所以不能简单通过`startx`来运行，需要配置`xstartup`，末尾添加\n```\nsesion-manager & xfdesktop & xfce4-panel &\nxfce4-menu-plugin &\nxfsettingsd &\nxfconfd &\nxfwm4 &\n```\n网上很多文章都说：注释掉`x-window-manager`，但是如果注释掉这一句会导致阿里云浏览器端控制台无法打开，保留并不会影响任何功能。\n\n重新启动vncserver即可。\n```\nvncserver -kill :1\nvncserver\n// 带图形参数启动\nvncserver -geometry 1280x1024 -depth 16:1\n```\nvncviewer重新连接，xfce4就出来了。\nxfce4默认情况下，两个问题的解决方法：\n1. `Tab`失效：修改快捷键设置-Switch window for same application\n2. `sudo`时消除`unable to resolve host`，在host内增加阿里云主机名，也就是那一长串英文\n## 安装git，安装vscode\n```\nsudo apt-get install git\nwget https://vscode.cdn.azure.cn/stable/0759f77bb8d86658bc935a10a64f6182c5a1eeba/code_1.19.1-1513676564_amd64.deb\nsudo dpkg -i code_1.19.1-1513676564_amd64.deb\n```\nVSCode无法启动时，根据github讨论的结果，可以使用如下方法：\n```\nsudo sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/share/code/libxcb.so.1\nsudo sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/share/code/libxcb.so.1.1.0\n```\n## 调试ebookcoin\n现在，基本工具已经具备，开始安装调试工具。\n1. 安装nodejs到桌面文件夹apps中\n```\nwget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz\nxz -d node-v8.9.3-linux-x64.tar.xz\nmkdir apps\ntar -xvf node-v8.9.3-linux-x64.tar\nmv node-v8.9.3-linux-x64 node\nmv node apps\n// 添加path\nexport NODE_HOME=/home/admin/Desktop/node\nexport PATH=$PATH:$NODE_HOME/bin \nexport NODE_PATH=$NODE_HOME/lib/node_modules\n// /root/.bashrc内添加生效\nsource /etc/profile\n```\n2. Clone代码\n```\ngit clone https://github.com/Ebookcoin/ebookcoin.git\n// 使用SSH连接github后，clone submodule\ngit submodule init\ngit submodule update\n```\n3. 构建代码\n```\n// 安装依赖包\ncd ebookcoin\nnpm install\n// 全局安装 grunt-cli:\nnpm install grunt-cli -g\n// 全局安装 bower:\nnpm install bower -g\n// 构建前台\ncd public\nnpm install\nbower install\ngrunt release\n```\n4. 运行\n直接在app.js中进行vscode debug，区块链程序已经跑起来了。\n","source":"_posts/阿里云乞丐版折腾ebook-coin.md","raw":"---\ntitle: 阿里云乞丐版折腾ebookcoin\ndate: 2017-2-10\ncategories:\n- 后端\n- 区块链\n- nodejs\ntags:\n- 后端\n- 区块链\n- nodejs\n- ebookcoin\n---\n阿里云除了ECS外，今年还推出了轻量应用服务器。主要用来部署个人应用，小网站后台，我也申请了一个来玩，三个月135元。\n\n大多数云主机，比如aws，都是没有图形画面的，在网页控制台只能使用简陋的交互式终端来操作。\n\n我的目的是在GUI下，用VSCode调试区块链程序-[Ebookcoin（亿书）](https://github.com/Ebookcoin/ebookcoin)。\n从一无所有的云服务器中建立调试环境，主要有以下几个步骤：\n1. 建立桌面（vncviewer)到云服务器间的连接（vncserver）\n2. 在云服务器上安装，配置GUI环境\n3. 安装git，VSCode等\n\n## 建立桌面（vncviewer)到云服务器间的连接（vncserver）\n首先，要在阿里云防火墙中打开5901和5902端口，否则后面桌面端无法访问。\n\n在远程连接中安装vncserver，执行：\n```\nsudo apt-get update\nsudo apt-get install vnc4server\n```\n然后执行，启动服务，输入访问密码\n```\nvncserver\n```\n在vncviewer中输入公网IP:1即可访问。\n## 在云服务器上安装，配置GUI环境\n阿里云官方推荐的gnome，ubuntu-desktop图形环境很大，对乞丐版20GB的空间太大，所以换成不足300MB的xfce4。\n在远程连接中安装xfce4，执行：\n```\nsudo apt-get install xfce4\n```\n因为要在vncviewer中运行GUI，所以不能简单通过`startx`来运行，需要配置`xstartup`，末尾添加\n```\nsesion-manager & xfdesktop & xfce4-panel &\nxfce4-menu-plugin &\nxfsettingsd &\nxfconfd &\nxfwm4 &\n```\n网上很多文章都说：注释掉`x-window-manager`，但是如果注释掉这一句会导致阿里云浏览器端控制台无法打开，保留并不会影响任何功能。\n\n重新启动vncserver即可。\n```\nvncserver -kill :1\nvncserver\n// 带图形参数启动\nvncserver -geometry 1280x1024 -depth 16:1\n```\nvncviewer重新连接，xfce4就出来了。\nxfce4默认情况下，两个问题的解决方法：\n1. `Tab`失效：修改快捷键设置-Switch window for same application\n2. `sudo`时消除`unable to resolve host`，在host内增加阿里云主机名，也就是那一长串英文\n## 安装git，安装vscode\n```\nsudo apt-get install git\nwget https://vscode.cdn.azure.cn/stable/0759f77bb8d86658bc935a10a64f6182c5a1eeba/code_1.19.1-1513676564_amd64.deb\nsudo dpkg -i code_1.19.1-1513676564_amd64.deb\n```\nVSCode无法启动时，根据github讨论的结果，可以使用如下方法：\n```\nsudo sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/share/code/libxcb.so.1\nsudo sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/share/code/libxcb.so.1.1.0\n```\n## 调试ebookcoin\n现在，基本工具已经具备，开始安装调试工具。\n1. 安装nodejs到桌面文件夹apps中\n```\nwget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz\nxz -d node-v8.9.3-linux-x64.tar.xz\nmkdir apps\ntar -xvf node-v8.9.3-linux-x64.tar\nmv node-v8.9.3-linux-x64 node\nmv node apps\n// 添加path\nexport NODE_HOME=/home/admin/Desktop/node\nexport PATH=$PATH:$NODE_HOME/bin \nexport NODE_PATH=$NODE_HOME/lib/node_modules\n// /root/.bashrc内添加生效\nsource /etc/profile\n```\n2. Clone代码\n```\ngit clone https://github.com/Ebookcoin/ebookcoin.git\n// 使用SSH连接github后，clone submodule\ngit submodule init\ngit submodule update\n```\n3. 构建代码\n```\n// 安装依赖包\ncd ebookcoin\nnpm install\n// 全局安装 grunt-cli:\nnpm install grunt-cli -g\n// 全局安装 bower:\nnpm install bower -g\n// 构建前台\ncd public\nnpm install\nbower install\ngrunt release\n```\n4. 运行\n直接在app.js中进行vscode debug，区块链程序已经跑起来了。\n","slug":"阿里云乞丐版折腾ebook-coin","published":1,"updated":"2019-04-07T10:08:01.611Z","_id":"cju6r5iin000l1wv8haaxq8x4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>阿里云除了ECS外，今年还推出了轻量应用服务器。主要用来部署个人应用，小网站后台，我也申请了一个来玩，三个月135元。</p>\n<p>大多数云主机，比如aws，都是没有图形画面的，在网页控制台只能使用简陋的交互式终端来操作。</p>\n<p>我的目的是在GUI下，用VSCode调试区块链程序-<a href=\"https://github.com/Ebookcoin/ebookcoin\" target=\"_blank\" rel=\"noopener\">Ebookcoin（亿书）</a>。<br>从一无所有的云服务器中建立调试环境，主要有以下几个步骤：</p>\n<ol>\n<li>建立桌面（vncviewer)到云服务器间的连接（vncserver）</li>\n<li>在云服务器上安装，配置GUI环境</li>\n<li>安装git，VSCode等</li>\n</ol>\n<h2 id=\"建立桌面（vncviewer-到云服务器间的连接（vncserver）\"><a href=\"#建立桌面（vncviewer-到云服务器间的连接（vncserver）\" class=\"headerlink\" title=\"建立桌面（vncviewer)到云服务器间的连接（vncserver）\"></a>建立桌面（vncviewer)到云服务器间的连接（vncserver）</h2><p>首先，要在阿里云防火墙中打开5901和5902端口，否则后面桌面端无法访问。</p>\n<p>在远程连接中安装vncserver，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install vnc4server</span><br></pre></td></tr></table></figure></p>\n<p>然后执行，启动服务，输入访问密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver</span><br></pre></td></tr></table></figure></p>\n<p>在vncviewer中输入公网IP:1即可访问。</p>\n<h2 id=\"在云服务器上安装，配置GUI环境\"><a href=\"#在云服务器上安装，配置GUI环境\" class=\"headerlink\" title=\"在云服务器上安装，配置GUI环境\"></a>在云服务器上安装，配置GUI环境</h2><p>阿里云官方推荐的gnome，ubuntu-desktop图形环境很大，对乞丐版20GB的空间太大，所以换成不足300MB的xfce4。<br>在远程连接中安装xfce4，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xfce4</span><br></pre></td></tr></table></figure></p>\n<p>因为要在vncviewer中运行GUI，所以不能简单通过<code>startx</code>来运行，需要配置<code>xstartup</code>，末尾添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;</span><br><span class=\"line\">xfce4-menu-plugin &amp;</span><br><span class=\"line\">xfsettingsd &amp;</span><br><span class=\"line\">xfconfd &amp;</span><br><span class=\"line\">xfwm4 &amp;</span><br></pre></td></tr></table></figure></p>\n<p>网上很多文章都说：注释掉<code>x-window-manager</code>，但是如果注释掉这一句会导致阿里云浏览器端控制台无法打开，保留并不会影响任何功能。</p>\n<p>重新启动vncserver即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver -kill :1</span><br><span class=\"line\">vncserver</span><br><span class=\"line\">// 带图形参数启动</span><br><span class=\"line\">vncserver -geometry 1280x1024 -depth 16:1</span><br></pre></td></tr></table></figure></p>\n<p>vncviewer重新连接，xfce4就出来了。<br>xfce4默认情况下，两个问题的解决方法：</p>\n<ol>\n<li><code>Tab</code>失效：修改快捷键设置-Switch window for same application</li>\n<li><code>sudo</code>时消除<code>unable to resolve host</code>，在host内增加阿里云主机名，也就是那一长串英文<h2 id=\"安装git，安装vscode\"><a href=\"#安装git，安装vscode\" class=\"headerlink\" title=\"安装git，安装vscode\"></a>安装git，安装vscode</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">wget https://vscode.cdn.azure.cn/stable/0759f77bb8d86658bc935a10a64f6182c5a1eeba/code_1.19.1-1513676564_amd64.deb</span><br><span class=\"line\">sudo dpkg -i code_1.19.1-1513676564_amd64.deb</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>VSCode无法启动时，根据github讨论的结果，可以使用如下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sed -i &apos;s/BIG-REQUESTS/_IG-REQUESTS/&apos; /usr/share/code/libxcb.so.1</span><br><span class=\"line\">sudo sed -i &apos;s/BIG-REQUESTS/_IG-REQUESTS/&apos; /usr/share/code/libxcb.so.1.1.0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"调试ebookcoin\"><a href=\"#调试ebookcoin\" class=\"headerlink\" title=\"调试ebookcoin\"></a>调试ebookcoin</h2><p>现在，基本工具已经具备，开始安装调试工具。</p>\n<ol>\n<li><p>安装nodejs到桌面文件夹apps中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">xz -d node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">mkdir apps</span><br><span class=\"line\">tar -xvf node-v8.9.3-linux-x64.tar</span><br><span class=\"line\">mv node-v8.9.3-linux-x64 node</span><br><span class=\"line\">mv node apps</span><br><span class=\"line\">// 添加path</span><br><span class=\"line\">export NODE_HOME=/home/admin/Desktop/node</span><br><span class=\"line\">export PATH=$PATH:$NODE_HOME/bin </span><br><span class=\"line\">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class=\"line\">// /root/.bashrc内添加生效</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Clone代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Ebookcoin/ebookcoin.git</span><br><span class=\"line\">// 使用SSH连接github后，clone submodule</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构建代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装依赖包</span><br><span class=\"line\">cd ebookcoin</span><br><span class=\"line\">npm install</span><br><span class=\"line\">// 全局安装 grunt-cli:</span><br><span class=\"line\">npm install grunt-cli -g</span><br><span class=\"line\">// 全局安装 bower:</span><br><span class=\"line\">npm install bower -g</span><br><span class=\"line\">// 构建前台</span><br><span class=\"line\">cd public</span><br><span class=\"line\">npm install</span><br><span class=\"line\">bower install</span><br><span class=\"line\">grunt release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行<br>直接在app.js中进行vscode debug，区块链程序已经跑起来了。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>阿里云除了ECS外，今年还推出了轻量应用服务器。主要用来部署个人应用，小网站后台，我也申请了一个来玩，三个月135元。</p>\n<p>大多数云主机，比如aws，都是没有图形画面的，在网页控制台只能使用简陋的交互式终端来操作。</p>\n<p>我的目的是在GUI下，用VSCode调试区块链程序-<a href=\"https://github.com/Ebookcoin/ebookcoin\" target=\"_blank\" rel=\"noopener\">Ebookcoin（亿书）</a>。<br>从一无所有的云服务器中建立调试环境，主要有以下几个步骤：</p>\n<ol>\n<li>建立桌面（vncviewer)到云服务器间的连接（vncserver）</li>\n<li>在云服务器上安装，配置GUI环境</li>\n<li>安装git，VSCode等</li>\n</ol>\n<h2 id=\"建立桌面（vncviewer-到云服务器间的连接（vncserver）\"><a href=\"#建立桌面（vncviewer-到云服务器间的连接（vncserver）\" class=\"headerlink\" title=\"建立桌面（vncviewer)到云服务器间的连接（vncserver）\"></a>建立桌面（vncviewer)到云服务器间的连接（vncserver）</h2><p>首先，要在阿里云防火墙中打开5901和5902端口，否则后面桌面端无法访问。</p>\n<p>在远程连接中安装vncserver，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install vnc4server</span><br></pre></td></tr></table></figure></p>\n<p>然后执行，启动服务，输入访问密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver</span><br></pre></td></tr></table></figure></p>\n<p>在vncviewer中输入公网IP:1即可访问。</p>\n<h2 id=\"在云服务器上安装，配置GUI环境\"><a href=\"#在云服务器上安装，配置GUI环境\" class=\"headerlink\" title=\"在云服务器上安装，配置GUI环境\"></a>在云服务器上安装，配置GUI环境</h2><p>阿里云官方推荐的gnome，ubuntu-desktop图形环境很大，对乞丐版20GB的空间太大，所以换成不足300MB的xfce4。<br>在远程连接中安装xfce4，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xfce4</span><br></pre></td></tr></table></figure></p>\n<p>因为要在vncviewer中运行GUI，所以不能简单通过<code>startx</code>来运行，需要配置<code>xstartup</code>，末尾添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;</span><br><span class=\"line\">xfce4-menu-plugin &amp;</span><br><span class=\"line\">xfsettingsd &amp;</span><br><span class=\"line\">xfconfd &amp;</span><br><span class=\"line\">xfwm4 &amp;</span><br></pre></td></tr></table></figure></p>\n<p>网上很多文章都说：注释掉<code>x-window-manager</code>，但是如果注释掉这一句会导致阿里云浏览器端控制台无法打开，保留并不会影响任何功能。</p>\n<p>重新启动vncserver即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver -kill :1</span><br><span class=\"line\">vncserver</span><br><span class=\"line\">// 带图形参数启动</span><br><span class=\"line\">vncserver -geometry 1280x1024 -depth 16:1</span><br></pre></td></tr></table></figure></p>\n<p>vncviewer重新连接，xfce4就出来了。<br>xfce4默认情况下，两个问题的解决方法：</p>\n<ol>\n<li><code>Tab</code>失效：修改快捷键设置-Switch window for same application</li>\n<li><code>sudo</code>时消除<code>unable to resolve host</code>，在host内增加阿里云主机名，也就是那一长串英文<h2 id=\"安装git，安装vscode\"><a href=\"#安装git，安装vscode\" class=\"headerlink\" title=\"安装git，安装vscode\"></a>安装git，安装vscode</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">wget https://vscode.cdn.azure.cn/stable/0759f77bb8d86658bc935a10a64f6182c5a1eeba/code_1.19.1-1513676564_amd64.deb</span><br><span class=\"line\">sudo dpkg -i code_1.19.1-1513676564_amd64.deb</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>VSCode无法启动时，根据github讨论的结果，可以使用如下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sed -i &apos;s/BIG-REQUESTS/_IG-REQUESTS/&apos; /usr/share/code/libxcb.so.1</span><br><span class=\"line\">sudo sed -i &apos;s/BIG-REQUESTS/_IG-REQUESTS/&apos; /usr/share/code/libxcb.so.1.1.0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"调试ebookcoin\"><a href=\"#调试ebookcoin\" class=\"headerlink\" title=\"调试ebookcoin\"></a>调试ebookcoin</h2><p>现在，基本工具已经具备，开始安装调试工具。</p>\n<ol>\n<li><p>安装nodejs到桌面文件夹apps中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">xz -d node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">mkdir apps</span><br><span class=\"line\">tar -xvf node-v8.9.3-linux-x64.tar</span><br><span class=\"line\">mv node-v8.9.3-linux-x64 node</span><br><span class=\"line\">mv node apps</span><br><span class=\"line\">// 添加path</span><br><span class=\"line\">export NODE_HOME=/home/admin/Desktop/node</span><br><span class=\"line\">export PATH=$PATH:$NODE_HOME/bin </span><br><span class=\"line\">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class=\"line\">// /root/.bashrc内添加生效</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Clone代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Ebookcoin/ebookcoin.git</span><br><span class=\"line\">// 使用SSH连接github后，clone submodule</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构建代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装依赖包</span><br><span class=\"line\">cd ebookcoin</span><br><span class=\"line\">npm install</span><br><span class=\"line\">// 全局安装 grunt-cli:</span><br><span class=\"line\">npm install grunt-cli -g</span><br><span class=\"line\">// 全局安装 bower:</span><br><span class=\"line\">npm install bower -g</span><br><span class=\"line\">// 构建前台</span><br><span class=\"line\">cd public</span><br><span class=\"line\">npm install</span><br><span class=\"line\">bower install</span><br><span class=\"line\">grunt release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行<br>直接在app.js中进行vscode debug，区块链程序已经跑起来了。</p>\n</li>\n</ol>\n"},{"title":"nginx配置手册","date":"2017-12-19T16:00:00.000Z","_content":"# 全局配置\n全局配置参数| 解释\n---|---\nuser | 用这个参数来配置worker进程的用户和组，如果忽略group，那么group的名字等于该参数指定用户的用户组\nworker_processes| 指定worker进程启动的数量，选择一个正确的数量取决于服务器环境，一个好的经验法则就是把该参数的值与cpu的核心数量相同，并用1.5~2之间的数乘这个数作为I/O密集型负载\nerror_log | 制定了errorlog的位置，但是要在编译时打开--with-debug选项才可以使用\npid| 指定pid文件的位置\n# event\nevent配置参数 | 解释\n---|---\nuse | 指示采用什么样的连接方法\nworker_connections| 制定接受并发连接的最大数量\n# http\nhttp配置参数| 解释\n---|---\nchunked_transfer_encoding| 允许使用http1.1发送请求\nclient_body_buffer_size| 如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\nclient_body_in_file_only| 指定是否将用户请求体存储到一个文件里。\nclient_body_in_single_buffer|该指令设置NGINX将完整的请求主体存储在单个缓冲区中。 默认情况下，指令值为off。 如果启用，它将优化读取$request_body变量时涉及的I/O操作。\nclient_body_temp_path| 此指令指定存储请求正文的临时文件的位置。 除了位置之外，指令还可以指定文件是否需要最多三个级别的文件夹层次结构。级别指定为用于生成文件夹的位数。默认情况下，NGINX在NGINX安装路径下的client_body_temp文件夹创建临时文件。\nclient_body_timeout|设置用户请求体的超时时间。\nclient_header_buffer_size|设置用户请求头所使用的buffer大小\nclient_header_timeout| 设置用户请求头的超时时间。\nclient_max_body_size| 设置所能接收的最大请求体的大小，也就是上传文件的大小\nkeepalive_timeout| keepalive超时时间，保持连接打开的时间\nkeepalive_request| 连接打开期间，用户可以发送请求的次数\nlarge_client_header_buffers|客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。\n# I/O\nIO配置参数 | 解释\n---|---\naio| 该指令启用异步文件IO\ndirectio| 直接I/O是文件系统的一个功能，其从应用程序到磁盘直接读取和写入，从而绕过所有操作系统缓存。 这使得更好地利用CPU周期和提高缓存效率。\ndirectio_alignment| 该指令设置directio的算法，默认值512\nopen_file_cache| max=65535 inactive=30s可以设置最多缓存多少个文件，缓存多少时间\nopen_file_cache_errors| 按照open_file_cache的设置，启用查询错误缓存\nopen_file_cache_min_uses| 在30S中没有使用到这个配置的次数的话就删除\nopen_file_cache_valid|多少时间检查一次，如果发现30s内没有用过一次的删除\npostpone_output|指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值\nsendfile|当应用程序传输文件时，内核首先缓冲数据，然后将数据发送到应用程序缓冲区。 应用程序反过来将数据发送到目的地。 Sendfile方法是一种改进的数据传输方法，其中数据在操作系统内核空间内的文件描述符之间复制，而不将数据传输到应用程序缓冲区。 这使操作系统资源的利用率提高。\nsendfile_max_chunk|sendfile_max_chunk可以减少阻塞调用sendfile()所花费的最长时间.因为Nginx不会尝试一次将整个文件发送出去,而是每次发送大小为256KB的块数据.\n\n另外：\n启用aio时会自动启用directio,小于directio定义的大小的文件则采用sendfile进行发送,超过或等于directio定义的大小的文件,将采用aio线程池进行发送,也就是说aio和directio适合大文件下载.因为大文件不适合进入操作系统的buffers/cache,这样会浪费内存,而且Linux AIO(异步磁盘IO)也要求使用directio的形式.\n\n# hash\n\nhash指令|\t说明\n---|---\nserver_names_hash_bucket_size|\t指定用于保存server_name哈希表大小的“桶”\nserver_names_hash_max_size|\t指定的server_name哈希表的最大大小\ntypes_hash_bucket_size|\t指定用于存放哈希表的“桶”的大小\ntypes_hash_max_size|\t指定哈希类型表的最大大小\nvariables_hash_bucket_size|\t它指定用于存放保留变量“桶”的大小\nvariables_hash_max_size|\t指定存放保留变量最大哈希值的大小\n\n# Socket\n\n指令|\t说明\n---|---\nlingering_close|\t指定如何保持客户端的连接，以便用于更多数据的传输\nlingering_time|\t在使用 lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间\nlingering_timeout|\t结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久\nreset_timedout_connection|\t使用这个指令之后，超时的连接将会被立即关闭，释放相关的内 存。默认的状态是处于FIN _ WAIT1，这种状态将会一直保持连接\nsend_lowat|\t如果非零，Nginx将会在客户端套接字尝试减少发送操作\nsend_timeout|\t在两次成功的客户端接收响应的写操作之间设置一个超时时间\ntcp_nodelay|\t启用或者禁用TCP _ NODELAY选项，用于keep-alive连接\ntcp_nopush|\t仅依赖于 sendfile的使用。它能够使得Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件\n# server\n指令|说明\n---|---\nserver_name| 虚拟主机名，可以使用正则表达式，也可以使用字符串捕获功能\n## listen\n指令|说明\n---|---\ndefault_server|\t定义这样一个组合： address:port默认的请求被绑定在此\t\nSetfib|为套接字监听设置相应的FIB\t\nbacklog|在listen()的调用中设置backlog参数调用\t\nrcvbuf|在套接字监听中设置 SO_RCVBUF 参数\t\nsndbuf|在套接字监听中设置 SO_SNDBUF参数\t\naccept_filter|\t设置接受的过滤器：dataready或者httpready dataready\t\ndeferred|设置 accept()调用的TCP_DEFER_ACCEPT\t\nbind|为address:port套接字对打开一个单独的 bind()调用\nipv6only|设置 IPV6_V6ONLY参数的值\t\nssl|表明该端口仅接受HttpS的连接 \nso_keepalive|为TCP监听套接字配置keepalive\n## locations\n\n修饰符|\t处理方式\n---|---\n=|\t使用精确匹配并且终止搜索\n～|\t区分大小写的正则表达式匹配\n～*|\t不区分大小写的正则表达式匹配\n^～\t|只匹配uri部分\n/| 通用匹配，任何请求都会匹配到。\nroot| 配置根目录，请求会加根目录的地址\nalias| 配置uri地址更改\nindex| 配置访问首页，按空格分开，先找到哪个就用哪个进行响应\nerror_page| 错误页面，先code后页面，页面也可以被redirect到新的root目录下\ndeny| 禁止访问的地址\nallow| 允许访问的地址\n\n","source":"_posts/Nginx配置手册.md","raw":"---\ntitle: nginx配置手册\ndate: 2017-12-20\ncategories:\n- 后端\n- 服务器\n- nginx\ntags:\n- 后端\n- nginx\n- 配置\n---\n# 全局配置\n全局配置参数| 解释\n---|---\nuser | 用这个参数来配置worker进程的用户和组，如果忽略group，那么group的名字等于该参数指定用户的用户组\nworker_processes| 指定worker进程启动的数量，选择一个正确的数量取决于服务器环境，一个好的经验法则就是把该参数的值与cpu的核心数量相同，并用1.5~2之间的数乘这个数作为I/O密集型负载\nerror_log | 制定了errorlog的位置，但是要在编译时打开--with-debug选项才可以使用\npid| 指定pid文件的位置\n# event\nevent配置参数 | 解释\n---|---\nuse | 指示采用什么样的连接方法\nworker_connections| 制定接受并发连接的最大数量\n# http\nhttp配置参数| 解释\n---|---\nchunked_transfer_encoding| 允许使用http1.1发送请求\nclient_body_buffer_size| 如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\nclient_body_in_file_only| 指定是否将用户请求体存储到一个文件里。\nclient_body_in_single_buffer|该指令设置NGINX将完整的请求主体存储在单个缓冲区中。 默认情况下，指令值为off。 如果启用，它将优化读取$request_body变量时涉及的I/O操作。\nclient_body_temp_path| 此指令指定存储请求正文的临时文件的位置。 除了位置之外，指令还可以指定文件是否需要最多三个级别的文件夹层次结构。级别指定为用于生成文件夹的位数。默认情况下，NGINX在NGINX安装路径下的client_body_temp文件夹创建临时文件。\nclient_body_timeout|设置用户请求体的超时时间。\nclient_header_buffer_size|设置用户请求头所使用的buffer大小\nclient_header_timeout| 设置用户请求头的超时时间。\nclient_max_body_size| 设置所能接收的最大请求体的大小，也就是上传文件的大小\nkeepalive_timeout| keepalive超时时间，保持连接打开的时间\nkeepalive_request| 连接打开期间，用户可以发送请求的次数\nlarge_client_header_buffers|客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。\n# I/O\nIO配置参数 | 解释\n---|---\naio| 该指令启用异步文件IO\ndirectio| 直接I/O是文件系统的一个功能，其从应用程序到磁盘直接读取和写入，从而绕过所有操作系统缓存。 这使得更好地利用CPU周期和提高缓存效率。\ndirectio_alignment| 该指令设置directio的算法，默认值512\nopen_file_cache| max=65535 inactive=30s可以设置最多缓存多少个文件，缓存多少时间\nopen_file_cache_errors| 按照open_file_cache的设置，启用查询错误缓存\nopen_file_cache_min_uses| 在30S中没有使用到这个配置的次数的话就删除\nopen_file_cache_valid|多少时间检查一次，如果发现30s内没有用过一次的删除\npostpone_output|指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值\nsendfile|当应用程序传输文件时，内核首先缓冲数据，然后将数据发送到应用程序缓冲区。 应用程序反过来将数据发送到目的地。 Sendfile方法是一种改进的数据传输方法，其中数据在操作系统内核空间内的文件描述符之间复制，而不将数据传输到应用程序缓冲区。 这使操作系统资源的利用率提高。\nsendfile_max_chunk|sendfile_max_chunk可以减少阻塞调用sendfile()所花费的最长时间.因为Nginx不会尝试一次将整个文件发送出去,而是每次发送大小为256KB的块数据.\n\n另外：\n启用aio时会自动启用directio,小于directio定义的大小的文件则采用sendfile进行发送,超过或等于directio定义的大小的文件,将采用aio线程池进行发送,也就是说aio和directio适合大文件下载.因为大文件不适合进入操作系统的buffers/cache,这样会浪费内存,而且Linux AIO(异步磁盘IO)也要求使用directio的形式.\n\n# hash\n\nhash指令|\t说明\n---|---\nserver_names_hash_bucket_size|\t指定用于保存server_name哈希表大小的“桶”\nserver_names_hash_max_size|\t指定的server_name哈希表的最大大小\ntypes_hash_bucket_size|\t指定用于存放哈希表的“桶”的大小\ntypes_hash_max_size|\t指定哈希类型表的最大大小\nvariables_hash_bucket_size|\t它指定用于存放保留变量“桶”的大小\nvariables_hash_max_size|\t指定存放保留变量最大哈希值的大小\n\n# Socket\n\n指令|\t说明\n---|---\nlingering_close|\t指定如何保持客户端的连接，以便用于更多数据的传输\nlingering_time|\t在使用 lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间\nlingering_timeout|\t结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久\nreset_timedout_connection|\t使用这个指令之后，超时的连接将会被立即关闭，释放相关的内 存。默认的状态是处于FIN _ WAIT1，这种状态将会一直保持连接\nsend_lowat|\t如果非零，Nginx将会在客户端套接字尝试减少发送操作\nsend_timeout|\t在两次成功的客户端接收响应的写操作之间设置一个超时时间\ntcp_nodelay|\t启用或者禁用TCP _ NODELAY选项，用于keep-alive连接\ntcp_nopush|\t仅依赖于 sendfile的使用。它能够使得Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件\n# server\n指令|说明\n---|---\nserver_name| 虚拟主机名，可以使用正则表达式，也可以使用字符串捕获功能\n## listen\n指令|说明\n---|---\ndefault_server|\t定义这样一个组合： address:port默认的请求被绑定在此\t\nSetfib|为套接字监听设置相应的FIB\t\nbacklog|在listen()的调用中设置backlog参数调用\t\nrcvbuf|在套接字监听中设置 SO_RCVBUF 参数\t\nsndbuf|在套接字监听中设置 SO_SNDBUF参数\t\naccept_filter|\t设置接受的过滤器：dataready或者httpready dataready\t\ndeferred|设置 accept()调用的TCP_DEFER_ACCEPT\t\nbind|为address:port套接字对打开一个单独的 bind()调用\nipv6only|设置 IPV6_V6ONLY参数的值\t\nssl|表明该端口仅接受HttpS的连接 \nso_keepalive|为TCP监听套接字配置keepalive\n## locations\n\n修饰符|\t处理方式\n---|---\n=|\t使用精确匹配并且终止搜索\n～|\t区分大小写的正则表达式匹配\n～*|\t不区分大小写的正则表达式匹配\n^～\t|只匹配uri部分\n/| 通用匹配，任何请求都会匹配到。\nroot| 配置根目录，请求会加根目录的地址\nalias| 配置uri地址更改\nindex| 配置访问首页，按空格分开，先找到哪个就用哪个进行响应\nerror_page| 错误页面，先code后页面，页面也可以被redirect到新的root目录下\ndeny| 禁止访问的地址\nallow| 允许访问的地址\n\n","slug":"Nginx配置手册","published":1,"updated":"2019-04-07T09:57:11.659Z","_id":"cju6r6a03000z1wv89ntty0a3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h1><table>\n<thead>\n<tr>\n<th>全局配置参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user</td>\n<td>用这个参数来配置worker进程的用户和组，如果忽略group，那么group的名字等于该参数指定用户的用户组</td>\n</tr>\n<tr>\n<td>worker_processes</td>\n<td>指定worker进程启动的数量，选择一个正确的数量取决于服务器环境，一个好的经验法则就是把该参数的值与cpu的核心数量相同，并用1.5~2之间的数乘这个数作为I/O密集型负载</td>\n</tr>\n<tr>\n<td>error_log</td>\n<td>制定了errorlog的位置，但是要在编译时打开–with-debug选项才可以使用</td>\n</tr>\n<tr>\n<td>pid</td>\n<td>指定pid文件的位置</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"event\"><a href=\"#event\" class=\"headerlink\" title=\"event\"></a>event</h1><table>\n<thead>\n<tr>\n<th>event配置参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>use</td>\n<td>指示采用什么样的连接方法</td>\n</tr>\n<tr>\n<td>worker_connections</td>\n<td>制定接受并发连接的最大数量</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h1><table>\n<thead>\n<tr>\n<th>http配置参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chunked_transfer_encoding</td>\n<td>允许使用http1.1发送请求</td>\n</tr>\n<tr>\n<td>client_body_buffer_size</td>\n<td>如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</td>\n</tr>\n<tr>\n<td>client_body_in_file_only</td>\n<td>指定是否将用户请求体存储到一个文件里。</td>\n</tr>\n<tr>\n<td>client_body_in_single_buffer</td>\n<td>该指令设置NGINX将完整的请求主体存储在单个缓冲区中。 默认情况下，指令值为off。 如果启用，它将优化读取$request_body变量时涉及的I/O操作。</td>\n</tr>\n<tr>\n<td>client_body_temp_path</td>\n<td>此指令指定存储请求正文的临时文件的位置。 除了位置之外，指令还可以指定文件是否需要最多三个级别的文件夹层次结构。级别指定为用于生成文件夹的位数。默认情况下，NGINX在NGINX安装路径下的client_body_temp文件夹创建临时文件。</td>\n</tr>\n<tr>\n<td>client_body_timeout</td>\n<td>设置用户请求体的超时时间。</td>\n</tr>\n<tr>\n<td>client_header_buffer_size</td>\n<td>设置用户请求头所使用的buffer大小</td>\n</tr>\n<tr>\n<td>client_header_timeout</td>\n<td>设置用户请求头的超时时间。</td>\n</tr>\n<tr>\n<td>client_max_body_size</td>\n<td>设置所能接收的最大请求体的大小，也就是上传文件的大小</td>\n</tr>\n<tr>\n<td>keepalive_timeout</td>\n<td>keepalive超时时间，保持连接打开的时间</td>\n</tr>\n<tr>\n<td>keepalive_request</td>\n<td>连接打开期间，用户可以发送请求的次数</td>\n</tr>\n<tr>\n<td>large_client_header_buffers</td>\n<td>客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h1><table>\n<thead>\n<tr>\n<th>IO配置参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aio</td>\n<td>该指令启用异步文件IO</td>\n</tr>\n<tr>\n<td>directio</td>\n<td>直接I/O是文件系统的一个功能，其从应用程序到磁盘直接读取和写入，从而绕过所有操作系统缓存。 这使得更好地利用CPU周期和提高缓存效率。</td>\n</tr>\n<tr>\n<td>directio_alignment</td>\n<td>该指令设置directio的算法，默认值512</td>\n</tr>\n<tr>\n<td>open_file_cache</td>\n<td>max=65535 inactive=30s可以设置最多缓存多少个文件，缓存多少时间</td>\n</tr>\n<tr>\n<td>open_file_cache_errors</td>\n<td>按照open_file_cache的设置，启用查询错误缓存</td>\n</tr>\n<tr>\n<td>open_file_cache_min_uses</td>\n<td>在30S中没有使用到这个配置的次数的话就删除</td>\n</tr>\n<tr>\n<td>open_file_cache_valid</td>\n<td>多少时间检查一次，如果发现30s内没有用过一次的删除</td>\n</tr>\n<tr>\n<td>postpone_output</td>\n<td>指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</td>\n</tr>\n<tr>\n<td>sendfile</td>\n<td>当应用程序传输文件时，内核首先缓冲数据，然后将数据发送到应用程序缓冲区。 应用程序反过来将数据发送到目的地。 Sendfile方法是一种改进的数据传输方法，其中数据在操作系统内核空间内的文件描述符之间复制，而不将数据传输到应用程序缓冲区。 这使操作系统资源的利用率提高。</td>\n</tr>\n<tr>\n<td>sendfile_max_chunk</td>\n<td>sendfile_max_chunk可以减少阻塞调用sendfile()所花费的最长时间.因为Nginx不会尝试一次将整个文件发送出去,而是每次发送大小为256KB的块数据.</td>\n</tr>\n</tbody>\n</table>\n<p>另外：<br>启用aio时会自动启用directio,小于directio定义的大小的文件则采用sendfile进行发送,超过或等于directio定义的大小的文件,将采用aio线程池进行发送,也就是说aio和directio适合大文件下载.因为大文件不适合进入操作系统的buffers/cache,这样会浪费内存,而且Linux AIO(异步磁盘IO)也要求使用directio的形式.</p>\n<h1 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h1><table>\n<thead>\n<tr>\n<th>hash指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>server_names_hash_bucket_size</td>\n<td>指定用于保存server_name哈希表大小的“桶”</td>\n</tr>\n<tr>\n<td>server_names_hash_max_size</td>\n<td>指定的server_name哈希表的最大大小</td>\n</tr>\n<tr>\n<td>types_hash_bucket_size</td>\n<td>指定用于存放哈希表的“桶”的大小</td>\n</tr>\n<tr>\n<td>types_hash_max_size</td>\n<td>指定哈希类型表的最大大小</td>\n</tr>\n<tr>\n<td>variables_hash_bucket_size</td>\n<td>它指定用于存放保留变量“桶”的大小</td>\n</tr>\n<tr>\n<td>variables_hash_max_size</td>\n<td>指定存放保留变量最大哈希值的大小</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h1><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lingering_close</td>\n<td>指定如何保持客户端的连接，以便用于更多数据的传输</td>\n</tr>\n<tr>\n<td>lingering_time</td>\n<td>在使用 lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间</td>\n</tr>\n<tr>\n<td>lingering_timeout</td>\n<td>结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久</td>\n</tr>\n<tr>\n<td>reset_timedout_connection</td>\n<td>使用这个指令之后，超时的连接将会被立即关闭，释放相关的内 存。默认的状态是处于FIN _ WAIT1，这种状态将会一直保持连接</td>\n</tr>\n<tr>\n<td>send_lowat</td>\n<td>如果非零，Nginx将会在客户端套接字尝试减少发送操作</td>\n</tr>\n<tr>\n<td>send_timeout</td>\n<td>在两次成功的客户端接收响应的写操作之间设置一个超时时间</td>\n</tr>\n<tr>\n<td>tcp_nodelay</td>\n<td>启用或者禁用TCP _ NODELAY选项，用于keep-alive连接</td>\n</tr>\n<tr>\n<td>tcp_nopush</td>\n<td>仅依赖于 sendfile的使用。它能够使得Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h1><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>server_name</td>\n<td>虚拟主机名，可以使用正则表达式，也可以使用字符串捕获功能</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"listen\"><a href=\"#listen\" class=\"headerlink\" title=\"listen\"></a>listen</h2><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default_server</td>\n<td>定义这样一个组合： address:port默认的请求被绑定在此    </td>\n</tr>\n<tr>\n<td>Setfib</td>\n<td>为套接字监听设置相应的FIB    </td>\n</tr>\n<tr>\n<td>backlog</td>\n<td>在listen()的调用中设置backlog参数调用    </td>\n</tr>\n<tr>\n<td>rcvbuf</td>\n<td>在套接字监听中设置 SO_RCVBUF 参数    </td>\n</tr>\n<tr>\n<td>sndbuf</td>\n<td>在套接字监听中设置 SO_SNDBUF参数    </td>\n</tr>\n<tr>\n<td>accept_filter</td>\n<td>设置接受的过滤器：dataready或者httpready dataready    </td>\n</tr>\n<tr>\n<td>deferred</td>\n<td>设置 accept()调用的TCP_DEFER_ACCEPT    </td>\n</tr>\n<tr>\n<td>bind</td>\n<td>为address:port套接字对打开一个单独的 bind()调用</td>\n</tr>\n<tr>\n<td>ipv6only</td>\n<td>设置 IPV6_V6ONLY参数的值    </td>\n</tr>\n<tr>\n<td>ssl</td>\n<td>表明该端口仅接受HttpS的连接 </td>\n</tr>\n<tr>\n<td>so_keepalive</td>\n<td>为TCP监听套接字配置keepalive</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"locations\"><a href=\"#locations\" class=\"headerlink\" title=\"locations\"></a>locations</h2><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>处理方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>使用精确匹配并且终止搜索</td>\n</tr>\n<tr>\n<td>～</td>\n<td>区分大小写的正则表达式匹配</td>\n</tr>\n<tr>\n<td>～*</td>\n<td>不区分大小写的正则表达式匹配</td>\n</tr>\n<tr>\n<td>^～</td>\n<td>只匹配uri部分</td>\n</tr>\n<tr>\n<td>/</td>\n<td>通用匹配，任何请求都会匹配到。</td>\n</tr>\n<tr>\n<td>root</td>\n<td>配置根目录，请求会加根目录的地址</td>\n</tr>\n<tr>\n<td>alias</td>\n<td>配置uri地址更改</td>\n</tr>\n<tr>\n<td>index</td>\n<td>配置访问首页，按空格分开，先找到哪个就用哪个进行响应</td>\n</tr>\n<tr>\n<td>error_page</td>\n<td>错误页面，先code后页面，页面也可以被redirect到新的root目录下</td>\n</tr>\n<tr>\n<td>deny</td>\n<td>禁止访问的地址</td>\n</tr>\n<tr>\n<td>allow</td>\n<td>允许访问的地址</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h1><table>\n<thead>\n<tr>\n<th>全局配置参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user</td>\n<td>用这个参数来配置worker进程的用户和组，如果忽略group，那么group的名字等于该参数指定用户的用户组</td>\n</tr>\n<tr>\n<td>worker_processes</td>\n<td>指定worker进程启动的数量，选择一个正确的数量取决于服务器环境，一个好的经验法则就是把该参数的值与cpu的核心数量相同，并用1.5~2之间的数乘这个数作为I/O密集型负载</td>\n</tr>\n<tr>\n<td>error_log</td>\n<td>制定了errorlog的位置，但是要在编译时打开–with-debug选项才可以使用</td>\n</tr>\n<tr>\n<td>pid</td>\n<td>指定pid文件的位置</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"event\"><a href=\"#event\" class=\"headerlink\" title=\"event\"></a>event</h1><table>\n<thead>\n<tr>\n<th>event配置参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>use</td>\n<td>指示采用什么样的连接方法</td>\n</tr>\n<tr>\n<td>worker_connections</td>\n<td>制定接受并发连接的最大数量</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h1><table>\n<thead>\n<tr>\n<th>http配置参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chunked_transfer_encoding</td>\n<td>允许使用http1.1发送请求</td>\n</tr>\n<tr>\n<td>client_body_buffer_size</td>\n<td>如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</td>\n</tr>\n<tr>\n<td>client_body_in_file_only</td>\n<td>指定是否将用户请求体存储到一个文件里。</td>\n</tr>\n<tr>\n<td>client_body_in_single_buffer</td>\n<td>该指令设置NGINX将完整的请求主体存储在单个缓冲区中。 默认情况下，指令值为off。 如果启用，它将优化读取$request_body变量时涉及的I/O操作。</td>\n</tr>\n<tr>\n<td>client_body_temp_path</td>\n<td>此指令指定存储请求正文的临时文件的位置。 除了位置之外，指令还可以指定文件是否需要最多三个级别的文件夹层次结构。级别指定为用于生成文件夹的位数。默认情况下，NGINX在NGINX安装路径下的client_body_temp文件夹创建临时文件。</td>\n</tr>\n<tr>\n<td>client_body_timeout</td>\n<td>设置用户请求体的超时时间。</td>\n</tr>\n<tr>\n<td>client_header_buffer_size</td>\n<td>设置用户请求头所使用的buffer大小</td>\n</tr>\n<tr>\n<td>client_header_timeout</td>\n<td>设置用户请求头的超时时间。</td>\n</tr>\n<tr>\n<td>client_max_body_size</td>\n<td>设置所能接收的最大请求体的大小，也就是上传文件的大小</td>\n</tr>\n<tr>\n<td>keepalive_timeout</td>\n<td>keepalive超时时间，保持连接打开的时间</td>\n</tr>\n<tr>\n<td>keepalive_request</td>\n<td>连接打开期间，用户可以发送请求的次数</td>\n</tr>\n<tr>\n<td>large_client_header_buffers</td>\n<td>客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h1><table>\n<thead>\n<tr>\n<th>IO配置参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aio</td>\n<td>该指令启用异步文件IO</td>\n</tr>\n<tr>\n<td>directio</td>\n<td>直接I/O是文件系统的一个功能，其从应用程序到磁盘直接读取和写入，从而绕过所有操作系统缓存。 这使得更好地利用CPU周期和提高缓存效率。</td>\n</tr>\n<tr>\n<td>directio_alignment</td>\n<td>该指令设置directio的算法，默认值512</td>\n</tr>\n<tr>\n<td>open_file_cache</td>\n<td>max=65535 inactive=30s可以设置最多缓存多少个文件，缓存多少时间</td>\n</tr>\n<tr>\n<td>open_file_cache_errors</td>\n<td>按照open_file_cache的设置，启用查询错误缓存</td>\n</tr>\n<tr>\n<td>open_file_cache_min_uses</td>\n<td>在30S中没有使用到这个配置的次数的话就删除</td>\n</tr>\n<tr>\n<td>open_file_cache_valid</td>\n<td>多少时间检查一次，如果发现30s内没有用过一次的删除</td>\n</tr>\n<tr>\n<td>postpone_output</td>\n<td>指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</td>\n</tr>\n<tr>\n<td>sendfile</td>\n<td>当应用程序传输文件时，内核首先缓冲数据，然后将数据发送到应用程序缓冲区。 应用程序反过来将数据发送到目的地。 Sendfile方法是一种改进的数据传输方法，其中数据在操作系统内核空间内的文件描述符之间复制，而不将数据传输到应用程序缓冲区。 这使操作系统资源的利用率提高。</td>\n</tr>\n<tr>\n<td>sendfile_max_chunk</td>\n<td>sendfile_max_chunk可以减少阻塞调用sendfile()所花费的最长时间.因为Nginx不会尝试一次将整个文件发送出去,而是每次发送大小为256KB的块数据.</td>\n</tr>\n</tbody>\n</table>\n<p>另外：<br>启用aio时会自动启用directio,小于directio定义的大小的文件则采用sendfile进行发送,超过或等于directio定义的大小的文件,将采用aio线程池进行发送,也就是说aio和directio适合大文件下载.因为大文件不适合进入操作系统的buffers/cache,这样会浪费内存,而且Linux AIO(异步磁盘IO)也要求使用directio的形式.</p>\n<h1 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h1><table>\n<thead>\n<tr>\n<th>hash指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>server_names_hash_bucket_size</td>\n<td>指定用于保存server_name哈希表大小的“桶”</td>\n</tr>\n<tr>\n<td>server_names_hash_max_size</td>\n<td>指定的server_name哈希表的最大大小</td>\n</tr>\n<tr>\n<td>types_hash_bucket_size</td>\n<td>指定用于存放哈希表的“桶”的大小</td>\n</tr>\n<tr>\n<td>types_hash_max_size</td>\n<td>指定哈希类型表的最大大小</td>\n</tr>\n<tr>\n<td>variables_hash_bucket_size</td>\n<td>它指定用于存放保留变量“桶”的大小</td>\n</tr>\n<tr>\n<td>variables_hash_max_size</td>\n<td>指定存放保留变量最大哈希值的大小</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h1><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lingering_close</td>\n<td>指定如何保持客户端的连接，以便用于更多数据的传输</td>\n</tr>\n<tr>\n<td>lingering_time</td>\n<td>在使用 lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间</td>\n</tr>\n<tr>\n<td>lingering_timeout</td>\n<td>结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久</td>\n</tr>\n<tr>\n<td>reset_timedout_connection</td>\n<td>使用这个指令之后，超时的连接将会被立即关闭，释放相关的内 存。默认的状态是处于FIN _ WAIT1，这种状态将会一直保持连接</td>\n</tr>\n<tr>\n<td>send_lowat</td>\n<td>如果非零，Nginx将会在客户端套接字尝试减少发送操作</td>\n</tr>\n<tr>\n<td>send_timeout</td>\n<td>在两次成功的客户端接收响应的写操作之间设置一个超时时间</td>\n</tr>\n<tr>\n<td>tcp_nodelay</td>\n<td>启用或者禁用TCP _ NODELAY选项，用于keep-alive连接</td>\n</tr>\n<tr>\n<td>tcp_nopush</td>\n<td>仅依赖于 sendfile的使用。它能够使得Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h1><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>server_name</td>\n<td>虚拟主机名，可以使用正则表达式，也可以使用字符串捕获功能</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"listen\"><a href=\"#listen\" class=\"headerlink\" title=\"listen\"></a>listen</h2><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default_server</td>\n<td>定义这样一个组合： address:port默认的请求被绑定在此    </td>\n</tr>\n<tr>\n<td>Setfib</td>\n<td>为套接字监听设置相应的FIB    </td>\n</tr>\n<tr>\n<td>backlog</td>\n<td>在listen()的调用中设置backlog参数调用    </td>\n</tr>\n<tr>\n<td>rcvbuf</td>\n<td>在套接字监听中设置 SO_RCVBUF 参数    </td>\n</tr>\n<tr>\n<td>sndbuf</td>\n<td>在套接字监听中设置 SO_SNDBUF参数    </td>\n</tr>\n<tr>\n<td>accept_filter</td>\n<td>设置接受的过滤器：dataready或者httpready dataready    </td>\n</tr>\n<tr>\n<td>deferred</td>\n<td>设置 accept()调用的TCP_DEFER_ACCEPT    </td>\n</tr>\n<tr>\n<td>bind</td>\n<td>为address:port套接字对打开一个单独的 bind()调用</td>\n</tr>\n<tr>\n<td>ipv6only</td>\n<td>设置 IPV6_V6ONLY参数的值    </td>\n</tr>\n<tr>\n<td>ssl</td>\n<td>表明该端口仅接受HttpS的连接 </td>\n</tr>\n<tr>\n<td>so_keepalive</td>\n<td>为TCP监听套接字配置keepalive</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"locations\"><a href=\"#locations\" class=\"headerlink\" title=\"locations\"></a>locations</h2><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>处理方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>使用精确匹配并且终止搜索</td>\n</tr>\n<tr>\n<td>～</td>\n<td>区分大小写的正则表达式匹配</td>\n</tr>\n<tr>\n<td>～*</td>\n<td>不区分大小写的正则表达式匹配</td>\n</tr>\n<tr>\n<td>^～</td>\n<td>只匹配uri部分</td>\n</tr>\n<tr>\n<td>/</td>\n<td>通用匹配，任何请求都会匹配到。</td>\n</tr>\n<tr>\n<td>root</td>\n<td>配置根目录，请求会加根目录的地址</td>\n</tr>\n<tr>\n<td>alias</td>\n<td>配置uri地址更改</td>\n</tr>\n<tr>\n<td>index</td>\n<td>配置访问首页，按空格分开，先找到哪个就用哪个进行响应</td>\n</tr>\n<tr>\n<td>error_page</td>\n<td>错误页面，先code后页面，页面也可以被redirect到新的root目录下</td>\n</tr>\n<tr>\n<td>deny</td>\n<td>禁止访问的地址</td>\n</tr>\n<tr>\n<td>allow</td>\n<td>允许访问的地址</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"ng-alain源码解析","date":"2016-05-23T16:00:00.000Z","_content":"\n# 外围配置\n\n## Dockerfile\n```\n# STEP 1: Build\n// copy package.json和lock到当前工作目录\n// node执行install,把创建好的./node_modules复制到新创建的ng-alain文件夹下\n// 设置工作目录为/ng-alain\n// 拷贝所有源文件到工作目录中\nFROM node:8-alpine as builder\n\nLABEL authors=\"cipchk <cipchk@qq.com>\"\n\nCOPY package.json package-lock.json ./\n\nRUN npm set progress=false && npm config set depth 0 && npm cache clean --force\nRUN npm i && mkdir /ng-alain && cp -R ./node_modules ./ng-alain\n\nWORKDIR /ng-alain\n\nCOPY . .\n\nRUN npm run build\n\n# STEP 2: Setup\n// 拷贝nginx配置，ssl配置到nginx中\n// 拷贝/ng-alain下的dist目录到nginx文件夹\n// 运行nginx对页面进行代理\nFROM nginx:1.13.5-alpine\n\nCOPY --from=builder /ng-alain/_nginx/default.conf /etc/nginx/conf.d/default.conf\nCOPY --from=builder /ng-alain/_nginx/ssl/* /etc/nginx/ssl/\n\nRUN rm -rf /usr/share/nginx/html/*\n\nCOPY --from=builder /ng-alain/dist /usr/share/nginx/html\n\nCMD [ \"nginx\", \"-g\", \"daemon off;\"]\n```\n## nginx配置\n配置了端口80，虚拟主机名localhost，主目录/usr/share/nginx/html，首页index.html，错误处理画面50x.html\n``` config\nserver {\n    listen       80;\n    # listen 443;\n    # ssl on;\n    # ssl_certificate /etc/nginx/ssl/server.crt;\n    # ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n## docker compose\n简单的使用上面的dockerfile进行build，并传入环境变量NODE_ENV:production\n\n# 结构\n\nng-alain由以下几大模块组成：\n- core\n- layout\n- routes\n- shared\n\n## core模块\ncore模块首先提供了i18n服务，下面来看ng-alain是如何实现i18n转换的：\n\n1. I18NService实现了AlainI18NService接口，这个接口是这样定义的：\n``` typescript\nexport interface AlainI18NService {\n    [key: string]: any;\n    use(lang: string, firstLoad: boolean): void;\n    getLangs(): any[];\n    fanyi(key: string): any;\n}\n```\n2. 构造方法中调用``ngx-translate``的``addLangs``方法来增加可选语言。``use``方法内设置了ng-zorro的国际化，如果是初次加载时，需要重新刷新页面，也就是重定向到``/``，``use``方法的最后，调用了``ngx-translate``的``use``方法。这样，就可以使用``assets/i18n``中的文件，然后利用模板内的``translate``标识符进行翻译。\n```\nexport function HttpLoaderFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http, `assets/i18n/`, '.json');\n}.\n\n```\n\n接下来，core模块实现了http拦截器，通过对``HttpInterceptor``接口的实现，将错误全部导入``handleData``方法进行处理，然后根据错误代码导向不同的页面。\n\n最后，core模块制作了一个初始化器，用来加载app内必要的数据。然后设置应用信息，用户信息，初始化菜单等，这期间，调用了@delon theme中的几个服务，例如：``MenuService,SettingsService，TitleService``，这几个服务将会贯穿整个app的始终。\n\n## layout模块\n\nlayout模块制定了页面布局，也就是以下几个部分：\n\n-  header \n-  sidebar\n-  passport\n-  default: 页面的标准布局\n\n其中，header，sidebar的每一个部分都是一个独立的组件，这两个模块的详细解析放在专门章节解读。\n\npassport模块定义了路由插槽，login,register两个模块可以在passport模块上来回切换。\n\ndefault页面的布局如下：\n``` html\n<div class=\"wrapper\">\n    <div class=\"router-progress-bar\" *ngIf=\"isFetching\"></div>\n    <app-header class=\"header\"></app-header>\n    <app-sidebar class=\"aside\"></app-sidebar>\n    <section class=\"content\">\n        <!-- 引用自@delon/abc/reuse-tab -->\n        <reuse-tab></reuse-tab>\n        <router-outlet></router-outlet>\n    </section>\n</div>\n```\n\ndefault模块内订阅了router事件，当发生错误时停止``router-progress-bar``的滚动，100毫秒后隐藏``progress-bar``，它的css在@delon/theme/styles/app/router-progress-bar.less中。\n\n## routes模块\n\nroutes模块中定义了整个app的路由表和对应的组件，事实上把路由表与组件分开会让src的结构更加清晰。\n\n## shared模块\n\n将常用模块包装后又导出。跟正常的shared模块的用途一致。","source":"_posts/NG-ALAIN源码解析.md","raw":"---\ntitle: ng-alain源码解析\ndate: 2016-5-24\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- angular\n- NG-ALAIN\n---\n\n# 外围配置\n\n## Dockerfile\n```\n# STEP 1: Build\n// copy package.json和lock到当前工作目录\n// node执行install,把创建好的./node_modules复制到新创建的ng-alain文件夹下\n// 设置工作目录为/ng-alain\n// 拷贝所有源文件到工作目录中\nFROM node:8-alpine as builder\n\nLABEL authors=\"cipchk <cipchk@qq.com>\"\n\nCOPY package.json package-lock.json ./\n\nRUN npm set progress=false && npm config set depth 0 && npm cache clean --force\nRUN npm i && mkdir /ng-alain && cp -R ./node_modules ./ng-alain\n\nWORKDIR /ng-alain\n\nCOPY . .\n\nRUN npm run build\n\n# STEP 2: Setup\n// 拷贝nginx配置，ssl配置到nginx中\n// 拷贝/ng-alain下的dist目录到nginx文件夹\n// 运行nginx对页面进行代理\nFROM nginx:1.13.5-alpine\n\nCOPY --from=builder /ng-alain/_nginx/default.conf /etc/nginx/conf.d/default.conf\nCOPY --from=builder /ng-alain/_nginx/ssl/* /etc/nginx/ssl/\n\nRUN rm -rf /usr/share/nginx/html/*\n\nCOPY --from=builder /ng-alain/dist /usr/share/nginx/html\n\nCMD [ \"nginx\", \"-g\", \"daemon off;\"]\n```\n## nginx配置\n配置了端口80，虚拟主机名localhost，主目录/usr/share/nginx/html，首页index.html，错误处理画面50x.html\n``` config\nserver {\n    listen       80;\n    # listen 443;\n    # ssl on;\n    # ssl_certificate /etc/nginx/ssl/server.crt;\n    # ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n## docker compose\n简单的使用上面的dockerfile进行build，并传入环境变量NODE_ENV:production\n\n# 结构\n\nng-alain由以下几大模块组成：\n- core\n- layout\n- routes\n- shared\n\n## core模块\ncore模块首先提供了i18n服务，下面来看ng-alain是如何实现i18n转换的：\n\n1. I18NService实现了AlainI18NService接口，这个接口是这样定义的：\n``` typescript\nexport interface AlainI18NService {\n    [key: string]: any;\n    use(lang: string, firstLoad: boolean): void;\n    getLangs(): any[];\n    fanyi(key: string): any;\n}\n```\n2. 构造方法中调用``ngx-translate``的``addLangs``方法来增加可选语言。``use``方法内设置了ng-zorro的国际化，如果是初次加载时，需要重新刷新页面，也就是重定向到``/``，``use``方法的最后，调用了``ngx-translate``的``use``方法。这样，就可以使用``assets/i18n``中的文件，然后利用模板内的``translate``标识符进行翻译。\n```\nexport function HttpLoaderFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http, `assets/i18n/`, '.json');\n}.\n\n```\n\n接下来，core模块实现了http拦截器，通过对``HttpInterceptor``接口的实现，将错误全部导入``handleData``方法进行处理，然后根据错误代码导向不同的页面。\n\n最后，core模块制作了一个初始化器，用来加载app内必要的数据。然后设置应用信息，用户信息，初始化菜单等，这期间，调用了@delon theme中的几个服务，例如：``MenuService,SettingsService，TitleService``，这几个服务将会贯穿整个app的始终。\n\n## layout模块\n\nlayout模块制定了页面布局，也就是以下几个部分：\n\n-  header \n-  sidebar\n-  passport\n-  default: 页面的标准布局\n\n其中，header，sidebar的每一个部分都是一个独立的组件，这两个模块的详细解析放在专门章节解读。\n\npassport模块定义了路由插槽，login,register两个模块可以在passport模块上来回切换。\n\ndefault页面的布局如下：\n``` html\n<div class=\"wrapper\">\n    <div class=\"router-progress-bar\" *ngIf=\"isFetching\"></div>\n    <app-header class=\"header\"></app-header>\n    <app-sidebar class=\"aside\"></app-sidebar>\n    <section class=\"content\">\n        <!-- 引用自@delon/abc/reuse-tab -->\n        <reuse-tab></reuse-tab>\n        <router-outlet></router-outlet>\n    </section>\n</div>\n```\n\ndefault模块内订阅了router事件，当发生错误时停止``router-progress-bar``的滚动，100毫秒后隐藏``progress-bar``，它的css在@delon/theme/styles/app/router-progress-bar.less中。\n\n## routes模块\n\nroutes模块中定义了整个app的路由表和对应的组件，事实上把路由表与组件分开会让src的结构更加清晰。\n\n## shared模块\n\n将常用模块包装后又导出。跟正常的shared模块的用途一致。","slug":"NG-ALAIN源码解析","published":1,"updated":"2019-04-07T10:07:20.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju6s2zyr0000mcv87udkbr01","content":"<h1 id=\"外围配置\"><a href=\"#外围配置\" class=\"headerlink\" title=\"外围配置\"></a>外围配置</h1><h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># STEP 1: Build</span><br><span class=\"line\">// copy package.json和lock到当前工作目录</span><br><span class=\"line\">// node执行install,把创建好的./node_modules复制到新创建的ng-alain文件夹下</span><br><span class=\"line\">// 设置工作目录为/ng-alain</span><br><span class=\"line\">// 拷贝所有源文件到工作目录中</span><br><span class=\"line\">FROM node:8-alpine as builder</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL authors=&quot;cipchk &lt;cipchk@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">COPY package.json package-lock.json ./</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm set progress=false &amp;&amp; npm config set depth 0 &amp;&amp; npm cache clean --force</span><br><span class=\"line\">RUN npm i &amp;&amp; mkdir /ng-alain &amp;&amp; cp -R ./node_modules ./ng-alain</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /ng-alain</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"># STEP 2: Setup</span><br><span class=\"line\">// 拷贝nginx配置，ssl配置到nginx中</span><br><span class=\"line\">// 拷贝/ng-alain下的dist目录到nginx文件夹</span><br><span class=\"line\">// 运行nginx对页面进行代理</span><br><span class=\"line\">FROM nginx:1.13.5-alpine</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=builder /ng-alain/_nginx/default.conf /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">COPY --from=builder /ng-alain/_nginx/ssl/* /etc/nginx/ssl/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rm -rf /usr/share/nginx/html/*</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=builder /ng-alain/dist /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [ &quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>配置了端口80，虚拟主机名localhost，主目录/usr/share/nginx/html，首页index.html，错误处理画面50x.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    # listen 443;</span><br><span class=\"line\">    # ssl on;</span><br><span class=\"line\">    # ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class=\"line\">    # ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h2><p>简单的使用上面的dockerfile进行build，并传入环境变量NODE_ENV:production</p>\n<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><p>ng-alain由以下几大模块组成：</p>\n<ul>\n<li>core</li>\n<li>layout</li>\n<li>routes</li>\n<li>shared</li>\n</ul>\n<h2 id=\"core模块\"><a href=\"#core模块\" class=\"headerlink\" title=\"core模块\"></a>core模块</h2><p>core模块首先提供了i18n服务，下面来看ng-alain是如何实现i18n转换的：</p>\n<ol>\n<li><p>I18NService实现了AlainI18NService接口，这个接口是这样定义的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AlainI18NService &#123;</span><br><span class=\"line\">    [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    use(lang: <span class=\"built_in\">string</span>, firstLoad: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    getLangs(): <span class=\"built_in\">any</span>[];</span><br><span class=\"line\">    fanyi(key: <span class=\"built_in\">string</span>): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造方法中调用<code>ngx-translate</code>的<code>addLangs</code>方法来增加可选语言。<code>use</code>方法内设置了ng-zorro的国际化，如果是初次加载时，需要重新刷新页面，也就是重定向到<code>/</code>，<code>use</code>方法的最后，调用了<code>ngx-translate</code>的<code>use</code>方法。这样，就可以使用<code>assets/i18n</code>中的文件，然后利用模板内的<code>translate</code>标识符进行翻译。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function HttpLoaderFactory(http: HttpClient) &#123;</span><br><span class=\"line\">    return new TranslateHttpLoader(http, `assets/i18n/`, &apos;.json&apos;);</span><br><span class=\"line\">&#125;.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>接下来，core模块实现了http拦截器，通过对<code>HttpInterceptor</code>接口的实现，将错误全部导入<code>handleData</code>方法进行处理，然后根据错误代码导向不同的页面。</p>\n<p>最后，core模块制作了一个初始化器，用来加载app内必要的数据。然后设置应用信息，用户信息，初始化菜单等，这期间，调用了@delon theme中的几个服务，例如：<code>MenuService,SettingsService，TitleService</code>，这几个服务将会贯穿整个app的始终。</p>\n<h2 id=\"layout模块\"><a href=\"#layout模块\" class=\"headerlink\" title=\"layout模块\"></a>layout模块</h2><p>layout模块制定了页面布局，也就是以下几个部分：</p>\n<ul>\n<li>header </li>\n<li>sidebar</li>\n<li>passport</li>\n<li>default: 页面的标准布局</li>\n</ul>\n<p>其中，header，sidebar的每一个部分都是一个独立的组件，这两个模块的详细解析放在专门章节解读。</p>\n<p>passport模块定义了路由插槽，login,register两个模块可以在passport模块上来回切换。</p>\n<p>default页面的布局如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"router-progress-bar\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"isFetching\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-sidebar</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sidebar</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 引用自@delon/abc/reuse-tab --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">reuse-tab</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">reuse-tab</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>default模块内订阅了router事件，当发生错误时停止<code>router-progress-bar</code>的滚动，100毫秒后隐藏<code>progress-bar</code>，它的css在@delon/theme/styles/app/router-progress-bar.less中。</p>\n<h2 id=\"routes模块\"><a href=\"#routes模块\" class=\"headerlink\" title=\"routes模块\"></a>routes模块</h2><p>routes模块中定义了整个app的路由表和对应的组件，事实上把路由表与组件分开会让src的结构更加清晰。</p>\n<h2 id=\"shared模块\"><a href=\"#shared模块\" class=\"headerlink\" title=\"shared模块\"></a>shared模块</h2><p>将常用模块包装后又导出。跟正常的shared模块的用途一致。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"外围配置\"><a href=\"#外围配置\" class=\"headerlink\" title=\"外围配置\"></a>外围配置</h1><h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># STEP 1: Build</span><br><span class=\"line\">// copy package.json和lock到当前工作目录</span><br><span class=\"line\">// node执行install,把创建好的./node_modules复制到新创建的ng-alain文件夹下</span><br><span class=\"line\">// 设置工作目录为/ng-alain</span><br><span class=\"line\">// 拷贝所有源文件到工作目录中</span><br><span class=\"line\">FROM node:8-alpine as builder</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL authors=&quot;cipchk &lt;cipchk@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">COPY package.json package-lock.json ./</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm set progress=false &amp;&amp; npm config set depth 0 &amp;&amp; npm cache clean --force</span><br><span class=\"line\">RUN npm i &amp;&amp; mkdir /ng-alain &amp;&amp; cp -R ./node_modules ./ng-alain</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /ng-alain</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"># STEP 2: Setup</span><br><span class=\"line\">// 拷贝nginx配置，ssl配置到nginx中</span><br><span class=\"line\">// 拷贝/ng-alain下的dist目录到nginx文件夹</span><br><span class=\"line\">// 运行nginx对页面进行代理</span><br><span class=\"line\">FROM nginx:1.13.5-alpine</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=builder /ng-alain/_nginx/default.conf /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">COPY --from=builder /ng-alain/_nginx/ssl/* /etc/nginx/ssl/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rm -rf /usr/share/nginx/html/*</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=builder /ng-alain/dist /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [ &quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>配置了端口80，虚拟主机名localhost，主目录/usr/share/nginx/html，首页index.html，错误处理画面50x.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    # listen 443;</span><br><span class=\"line\">    # ssl on;</span><br><span class=\"line\">    # ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class=\"line\">    # ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h2><p>简单的使用上面的dockerfile进行build，并传入环境变量NODE_ENV:production</p>\n<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><p>ng-alain由以下几大模块组成：</p>\n<ul>\n<li>core</li>\n<li>layout</li>\n<li>routes</li>\n<li>shared</li>\n</ul>\n<h2 id=\"core模块\"><a href=\"#core模块\" class=\"headerlink\" title=\"core模块\"></a>core模块</h2><p>core模块首先提供了i18n服务，下面来看ng-alain是如何实现i18n转换的：</p>\n<ol>\n<li><p>I18NService实现了AlainI18NService接口，这个接口是这样定义的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AlainI18NService &#123;</span><br><span class=\"line\">    [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    use(lang: <span class=\"built_in\">string</span>, firstLoad: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    getLangs(): <span class=\"built_in\">any</span>[];</span><br><span class=\"line\">    fanyi(key: <span class=\"built_in\">string</span>): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造方法中调用<code>ngx-translate</code>的<code>addLangs</code>方法来增加可选语言。<code>use</code>方法内设置了ng-zorro的国际化，如果是初次加载时，需要重新刷新页面，也就是重定向到<code>/</code>，<code>use</code>方法的最后，调用了<code>ngx-translate</code>的<code>use</code>方法。这样，就可以使用<code>assets/i18n</code>中的文件，然后利用模板内的<code>translate</code>标识符进行翻译。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function HttpLoaderFactory(http: HttpClient) &#123;</span><br><span class=\"line\">    return new TranslateHttpLoader(http, `assets/i18n/`, &apos;.json&apos;);</span><br><span class=\"line\">&#125;.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>接下来，core模块实现了http拦截器，通过对<code>HttpInterceptor</code>接口的实现，将错误全部导入<code>handleData</code>方法进行处理，然后根据错误代码导向不同的页面。</p>\n<p>最后，core模块制作了一个初始化器，用来加载app内必要的数据。然后设置应用信息，用户信息，初始化菜单等，这期间，调用了@delon theme中的几个服务，例如：<code>MenuService,SettingsService，TitleService</code>，这几个服务将会贯穿整个app的始终。</p>\n<h2 id=\"layout模块\"><a href=\"#layout模块\" class=\"headerlink\" title=\"layout模块\"></a>layout模块</h2><p>layout模块制定了页面布局，也就是以下几个部分：</p>\n<ul>\n<li>header </li>\n<li>sidebar</li>\n<li>passport</li>\n<li>default: 页面的标准布局</li>\n</ul>\n<p>其中，header，sidebar的每一个部分都是一个独立的组件，这两个模块的详细解析放在专门章节解读。</p>\n<p>passport模块定义了路由插槽，login,register两个模块可以在passport模块上来回切换。</p>\n<p>default页面的布局如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"router-progress-bar\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"isFetching\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-sidebar</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sidebar</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 引用自@delon/abc/reuse-tab --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">reuse-tab</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">reuse-tab</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>default模块内订阅了router事件，当发生错误时停止<code>router-progress-bar</code>的滚动，100毫秒后隐藏<code>progress-bar</code>，它的css在@delon/theme/styles/app/router-progress-bar.less中。</p>\n<h2 id=\"routes模块\"><a href=\"#routes模块\" class=\"headerlink\" title=\"routes模块\"></a>routes模块</h2><p>routes模块中定义了整个app的路由表和对应的组件，事实上把路由表与组件分开会让src的结构更加清晰。</p>\n<h2 id=\"shared模块\"><a href=\"#shared模块\" class=\"headerlink\" title=\"shared模块\"></a>shared模块</h2><p>将常用模块包装后又导出。跟正常的shared模块的用途一致。</p>\n"},{"title":"angular5 表单","date":"2016-05-20T16:00:00.000Z","_content":"1. 模板式验证\n\n我们把HTML表单控件（比如``<input>``和``<select>``）放进组件模板中，并用ngModel等指令把它们绑定到组件中数据模型的属性上。\n\n不用自己创建Angular表单控件对象。Angular指令会使用数据绑定中的信息创建它们。 我们不用自己推送和拉取数据。Angular使用ngModel来替你管理它们。 当用户做出修改时，Angular会据此更新可变的数据模型。\n\n利用双向绑定，模板引用值，当name为invalid时，表单提示将会出现。对于数据的控制都放在模板内，可用的属性可能包括：required,minLength等。\n``` html\n{{diagnostic}}\n\n<div class=\"form-group\">\n  <label for=\"name\">Name</label>\n<input type=\"text\" class=\"form-control\" required [(ngModel)]=\"model.name\" name=\"name\" #name=\"ngModel\">\n<div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n  Name is required\n</div>\n</div>\n\n<div class=\"form-group\">\n  <label for=\"alterEgo\">Alter Ego</label>\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"model.alterEgo\" miniLength=\"3\" name=\"alterEgo\" #alterEgo>\n</div>\n<div *ngIf=\"alterEgo.errors?.miniLength\" class=\"alert alert-danger\">Should be at least 3 characters</div>\n\n<div class=\"form-group\">\n  <label for=\"power\">Hero Power</label>\n  <select class=\"form-control required\" [(ngModel)]=\"model.power\" name=\"power\">\n    <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{pow}}</option>\n  </select>\n</div>\n```\n2. 响应式验证\n\n把对表单的控制都放在组件一侧，统一控制，不在模板内进行处理。\n``` javascript\n\nconstructor(private fb: FormBuilder) {}\n\nngOnInit(): void {\n  this.heroForm = this.fb.FormGroup({\n    'name': new FormControl(this.hero.name, [\n      Validators.required,\n      Validators.minLength(4),\n      forbiddenNameValidator(/bob/i)\n    ]),\n    'alterEgo': new FormControl(this.hero.alterEgo),\n    'power': new FormControl(this.hero.power, Validators.required)\n  });\n}\n\nget name() { return this.heroForm.get('name'); }\n\nget power() { return this.heroForm.get('power'); }\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n```","source":"_posts/Angular5 表单.md","raw":"---\ntitle: angular5 表单\ndate: 2016-5-21\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- angular\n---\n1. 模板式验证\n\n我们把HTML表单控件（比如``<input>``和``<select>``）放进组件模板中，并用ngModel等指令把它们绑定到组件中数据模型的属性上。\n\n不用自己创建Angular表单控件对象。Angular指令会使用数据绑定中的信息创建它们。 我们不用自己推送和拉取数据。Angular使用ngModel来替你管理它们。 当用户做出修改时，Angular会据此更新可变的数据模型。\n\n利用双向绑定，模板引用值，当name为invalid时，表单提示将会出现。对于数据的控制都放在模板内，可用的属性可能包括：required,minLength等。\n``` html\n{{diagnostic}}\n\n<div class=\"form-group\">\n  <label for=\"name\">Name</label>\n<input type=\"text\" class=\"form-control\" required [(ngModel)]=\"model.name\" name=\"name\" #name=\"ngModel\">\n<div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n  Name is required\n</div>\n</div>\n\n<div class=\"form-group\">\n  <label for=\"alterEgo\">Alter Ego</label>\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"model.alterEgo\" miniLength=\"3\" name=\"alterEgo\" #alterEgo>\n</div>\n<div *ngIf=\"alterEgo.errors?.miniLength\" class=\"alert alert-danger\">Should be at least 3 characters</div>\n\n<div class=\"form-group\">\n  <label for=\"power\">Hero Power</label>\n  <select class=\"form-control required\" [(ngModel)]=\"model.power\" name=\"power\">\n    <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{pow}}</option>\n  </select>\n</div>\n```\n2. 响应式验证\n\n把对表单的控制都放在组件一侧，统一控制，不在模板内进行处理。\n``` javascript\n\nconstructor(private fb: FormBuilder) {}\n\nngOnInit(): void {\n  this.heroForm = this.fb.FormGroup({\n    'name': new FormControl(this.hero.name, [\n      Validators.required,\n      Validators.minLength(4),\n      forbiddenNameValidator(/bob/i)\n    ]),\n    'alterEgo': new FormControl(this.hero.alterEgo),\n    'power': new FormControl(this.hero.power, Validators.required)\n  });\n}\n\nget name() { return this.heroForm.get('name'); }\n\nget power() { return this.heroForm.get('power'); }\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n```","slug":"Angular5 表单","published":1,"updated":"2019-04-07T10:07:01.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju6s2zyx0001mcv8ehc0t2a4","content":"<ol>\n<li>模板式验证</li>\n</ol>\n<p>我们把HTML表单控件（比如<code>&lt;input&gt;</code>和<code>&lt;select&gt;</code>）放进组件模板中，并用ngModel等指令把它们绑定到组件中数据模型的属性上。</p>\n<p>不用自己创建Angular表单控件对象。Angular指令会使用数据绑定中的信息创建它们。 我们不用自己推送和拉取数据。Angular使用ngModel来替你管理它们。 当用户做出修改时，Angular会据此更新可变的数据模型。</p>\n<p>利用双向绑定，模板引用值，当name为invalid时，表单提示将会出现。对于数据的控制都放在模板内，可用的属性可能包括：required,minLength等。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;diagnostic&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">required</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> #<span class=\"attr\">name</span>=<span class=\"string\">\"ngModel\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"name.valid || name.pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-danger\"</span>&gt;</span></span><br><span class=\"line\">  Name is required</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"alterEgo\"</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.alterEgo\"</span> <span class=\"attr\">miniLength</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"alterEgo\"</span> #<span class=\"attr\">alterEgo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"alterEgo.errors?.miniLength\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-danger\"</span>&gt;</span>Should be at least 3 characters<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"power\"</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control required\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.power\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"power\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let pow of powers\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"pow\"</span>&gt;</span>&#123;&#123;pow&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>响应式验证</li>\n</ol>\n<p>把对表单的控制都放在组件一侧，统一控制，不在模板内进行处理。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(private fb: FormBuilder) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.heroForm = <span class=\"keyword\">this</span>.fb.FormGroup(&#123;</span><br><span class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.name, [</span><br><span class=\"line\">      Validators.required,</span><br><span class=\"line\">      Validators.minLength(<span class=\"number\">4</span>),</span><br><span class=\"line\">      forbiddenNameValidator(<span class=\"regexp\">/bob/i</span>)</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    <span class=\"string\">'alterEgo'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.alterEgo),</span><br><span class=\"line\">    <span class=\"string\">'power'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.power, Validators.required)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> name() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.heroForm.get(<span class=\"string\">'name'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> power() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.heroForm.get(<span class=\"string\">'power'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forbiddenNameValidator</span>(<span class=\"params\">nameRe: RegExp</span>): <span class=\"title\">ValidatorFn</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (control: AbstractControl): &#123;[key: string]: any&#125; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forbidden = nameRe.test(control.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forbidden ? &#123;<span class=\"string\">'forbiddenName'</span>: &#123;<span class=\"attr\">value</span>: control.value&#125;&#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>模板式验证</li>\n</ol>\n<p>我们把HTML表单控件（比如<code>&lt;input&gt;</code>和<code>&lt;select&gt;</code>）放进组件模板中，并用ngModel等指令把它们绑定到组件中数据模型的属性上。</p>\n<p>不用自己创建Angular表单控件对象。Angular指令会使用数据绑定中的信息创建它们。 我们不用自己推送和拉取数据。Angular使用ngModel来替你管理它们。 当用户做出修改时，Angular会据此更新可变的数据模型。</p>\n<p>利用双向绑定，模板引用值，当name为invalid时，表单提示将会出现。对于数据的控制都放在模板内，可用的属性可能包括：required,minLength等。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;diagnostic&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">required</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> #<span class=\"attr\">name</span>=<span class=\"string\">\"ngModel\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"name.valid || name.pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-danger\"</span>&gt;</span></span><br><span class=\"line\">  Name is required</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"alterEgo\"</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.alterEgo\"</span> <span class=\"attr\">miniLength</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"alterEgo\"</span> #<span class=\"attr\">alterEgo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"alterEgo.errors?.miniLength\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-danger\"</span>&gt;</span>Should be at least 3 characters<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"power\"</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control required\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.power\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"power\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let pow of powers\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"pow\"</span>&gt;</span>&#123;&#123;pow&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>响应式验证</li>\n</ol>\n<p>把对表单的控制都放在组件一侧，统一控制，不在模板内进行处理。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(private fb: FormBuilder) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.heroForm = <span class=\"keyword\">this</span>.fb.FormGroup(&#123;</span><br><span class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.name, [</span><br><span class=\"line\">      Validators.required,</span><br><span class=\"line\">      Validators.minLength(<span class=\"number\">4</span>),</span><br><span class=\"line\">      forbiddenNameValidator(<span class=\"regexp\">/bob/i</span>)</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    <span class=\"string\">'alterEgo'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.alterEgo),</span><br><span class=\"line\">    <span class=\"string\">'power'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.power, Validators.required)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> name() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.heroForm.get(<span class=\"string\">'name'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> power() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.heroForm.get(<span class=\"string\">'power'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forbiddenNameValidator</span>(<span class=\"params\">nameRe: RegExp</span>): <span class=\"title\">ValidatorFn</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (control: AbstractControl): &#123;[key: string]: any&#125; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forbidden = nameRe.test(control.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forbidden ? &#123;<span class=\"string\">'forbiddenName'</span>: &#123;<span class=\"attr\">value</span>: control.value&#125;&#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"真正理解nodejs中的EventLoop","date":"2016-05-31T16:00:00.000Z","_content":"nodejs是基于的事件的平台。这意味着node中发生的一切都是对事件的反应。事务通过node遍历一个级联的回调。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。\n\n远离开发层面，这些功能都是由一个叫做libuv的库提供的。\n\nEventloop可能是nodejs中最被人所误解的一个概念。\n\n## 一般的错误认识\n### 错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中\n\n- 错误：eventloop运行于一个相对独立于用户代码的线程中。有一个专门运行eventloop的线程，同时有一个运行用户代码的主线程。每当有异步操作时，主线程将工作交给事件循环线程，一旦完成，事件循环线程将ping主线程执行回调。\n- 正确：只有一个线程执行JavaScript代码，这是事件循环运行的线程。回调函数的执行（Node.js中每个用户的代码都是一个回调）是由事件循环做。稍后会更深入地讨论这个问题。\n\n### 错误认识：异步操作由一个线程池处理\n\n- 错误：异步操作，如IO工作，HTTP请求或与数据库总是由libuv线程池来装载。\n- 正确：libuv默认情况下创建一个有四个线程的线程池线来加载异步工作。今天的操作系统已经为许多I/O任务提供异步接口。只要有可能，libuv将使用这些异步接口，避免线程池的使用。这同样适用于像数据库这样的第三方子系统。驱动程序的作者宁愿使用异步接口，也不愿意使用线程池。简言之：只有在没有其他方法的情况下，线程池才会被用于异步I/O。\n\n### 错误认识：eventloop就像栈或队列\n\n- 错误：事件循环按FIFO不断地遍历异步任务，并在任务完成时执行回调。\n- 虽然有类似队列的结构，但事件循环并没有完全类似于栈。事件循环作为一个过程，是一组由特定任务组成的按循环方式处理的过程。\n\n## 理解事件循环处理过程\n\n要真正理解事件循环，我们必须了解哪些工作是在哪个阶段完成的。下图展示了这一过程：\n\n\n这一过程由以下几个部分组成：\n\n### 计时器\n任何由setTimeout()或setInerval()定时的操作都会在这里执行。\n### IO回调\n这里大部分的回调函数将被处理。所有的用户代码在Node.js基本上是在回调（例如一个回调函数传入的HTTP请求会触发一个级联的回调），这是用户的代码。\n### IO轮询\n对下一次运行将要处理的新事件的轮询。\n有两个主要方法：\n- 执行下限时间已经达到的timers的回调\n- 处理poll队列中的事件\n\n当事件循环进入poll阶段，并且没有timers被设定时，将发生两种情况之一：\n\n- 如果poll队列不空，事件循环将遍历其回调执行同步直到队列中的回调都被调用，或者达到系统上限。\n- 如果poll队列是空的，那么两个事件中的一个将会发生：\n- - 如果脚本被setImmdiate()定时器定时，eventloop将会结束poll阶段，并进入下一个阶段\n- - 如果代码不被setimmediate()定时器定时，事件循环会等待回调被添加到队列中，然后立刻执行它们。\n\n如果poll队列为空，eventloop将会检查哪些timers的已经到期。如果有一个或多个timer到期，eventloop将会回到timers阶段去执行回调。\n\n### Set Immediate\n运行所有由setImmediate()发起的操作。\n### Close\n这里是所有的(close)事件回调的处理。\n\n例如有以下代码：\n``` javascript\nconst fs = require('fs');\n\nfunction someAsyncOperation(callback) {\n  // 假设需要95ms\n  fs.readFile('/path/to/file', callback);\n}\n\nconst timeoutScheduled = Date.now();\n\nsetTimeout(() => {\n  const delay = Date.now() - timeoutScheduled;\n\n  console.log(`${delay}ms have passed since I was scheduled`);\n}, 100);\n\nsomeAsyncOperation(() => {\n  const startCallback = Date.now();\n  \n  while (Date.now() - startCallback < 10) {\n    // do nothing\n  }\n});\n```\nconsole最终的输出为105毫秒，它的过程是这样的：\n1. 当eventloop来到poll阶段时，它的队列为空，因为此时readFile还没有结束。所以它将等待最新的timer到期。\n2. 95ms后，readFile结束，callback执行还需要另外的10ms。\n3. callback执行结束，因为队列中已经没有了其他的callback,它将回到timers阶段，setTimeOut()执行callback，得到105ms。\n\n","source":"_posts/真正理解js中的事件循环.md","raw":"---\ntitle: 真正理解nodejs中的EventLoop\ndate: 2016-6-1\ncategories:\n- 前端\n- js\n- nodejs\ntags:\n- 前端\n- js\n- nodejs\n- eventloop\n---\nnodejs是基于的事件的平台。这意味着node中发生的一切都是对事件的反应。事务通过node遍历一个级联的回调。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。\n\n远离开发层面，这些功能都是由一个叫做libuv的库提供的。\n\nEventloop可能是nodejs中最被人所误解的一个概念。\n\n## 一般的错误认识\n### 错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中\n\n- 错误：eventloop运行于一个相对独立于用户代码的线程中。有一个专门运行eventloop的线程，同时有一个运行用户代码的主线程。每当有异步操作时，主线程将工作交给事件循环线程，一旦完成，事件循环线程将ping主线程执行回调。\n- 正确：只有一个线程执行JavaScript代码，这是事件循环运行的线程。回调函数的执行（Node.js中每个用户的代码都是一个回调）是由事件循环做。稍后会更深入地讨论这个问题。\n\n### 错误认识：异步操作由一个线程池处理\n\n- 错误：异步操作，如IO工作，HTTP请求或与数据库总是由libuv线程池来装载。\n- 正确：libuv默认情况下创建一个有四个线程的线程池线来加载异步工作。今天的操作系统已经为许多I/O任务提供异步接口。只要有可能，libuv将使用这些异步接口，避免线程池的使用。这同样适用于像数据库这样的第三方子系统。驱动程序的作者宁愿使用异步接口，也不愿意使用线程池。简言之：只有在没有其他方法的情况下，线程池才会被用于异步I/O。\n\n### 错误认识：eventloop就像栈或队列\n\n- 错误：事件循环按FIFO不断地遍历异步任务，并在任务完成时执行回调。\n- 虽然有类似队列的结构，但事件循环并没有完全类似于栈。事件循环作为一个过程，是一组由特定任务组成的按循环方式处理的过程。\n\n## 理解事件循环处理过程\n\n要真正理解事件循环，我们必须了解哪些工作是在哪个阶段完成的。下图展示了这一过程：\n\n\n这一过程由以下几个部分组成：\n\n### 计时器\n任何由setTimeout()或setInerval()定时的操作都会在这里执行。\n### IO回调\n这里大部分的回调函数将被处理。所有的用户代码在Node.js基本上是在回调（例如一个回调函数传入的HTTP请求会触发一个级联的回调），这是用户的代码。\n### IO轮询\n对下一次运行将要处理的新事件的轮询。\n有两个主要方法：\n- 执行下限时间已经达到的timers的回调\n- 处理poll队列中的事件\n\n当事件循环进入poll阶段，并且没有timers被设定时，将发生两种情况之一：\n\n- 如果poll队列不空，事件循环将遍历其回调执行同步直到队列中的回调都被调用，或者达到系统上限。\n- 如果poll队列是空的，那么两个事件中的一个将会发生：\n- - 如果脚本被setImmdiate()定时器定时，eventloop将会结束poll阶段，并进入下一个阶段\n- - 如果代码不被setimmediate()定时器定时，事件循环会等待回调被添加到队列中，然后立刻执行它们。\n\n如果poll队列为空，eventloop将会检查哪些timers的已经到期。如果有一个或多个timer到期，eventloop将会回到timers阶段去执行回调。\n\n### Set Immediate\n运行所有由setImmediate()发起的操作。\n### Close\n这里是所有的(close)事件回调的处理。\n\n例如有以下代码：\n``` javascript\nconst fs = require('fs');\n\nfunction someAsyncOperation(callback) {\n  // 假设需要95ms\n  fs.readFile('/path/to/file', callback);\n}\n\nconst timeoutScheduled = Date.now();\n\nsetTimeout(() => {\n  const delay = Date.now() - timeoutScheduled;\n\n  console.log(`${delay}ms have passed since I was scheduled`);\n}, 100);\n\nsomeAsyncOperation(() => {\n  const startCallback = Date.now();\n  \n  while (Date.now() - startCallback < 10) {\n    // do nothing\n  }\n});\n```\nconsole最终的输出为105毫秒，它的过程是这样的：\n1. 当eventloop来到poll阶段时，它的队列为空，因为此时readFile还没有结束。所以它将等待最新的timer到期。\n2. 95ms后，readFile结束，callback执行还需要另外的10ms。\n3. callback执行结束，因为队列中已经没有了其他的callback,它将回到timers阶段，setTimeOut()执行callback，得到105ms。\n\n","slug":"真正理解js中的事件循环","published":1,"updated":"2019-04-07T10:07:51.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju6s2zyz0003mcv8wl1rdpa6","content":"<p>nodejs是基于的事件的平台。这意味着node中发生的一切都是对事件的反应。事务通过node遍历一个级联的回调。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。</p>\n<p>远离开发层面，这些功能都是由一个叫做libuv的库提供的。</p>\n<p>Eventloop可能是nodejs中最被人所误解的一个概念。</p>\n<h2 id=\"一般的错误认识\"><a href=\"#一般的错误认识\" class=\"headerlink\" title=\"一般的错误认识\"></a>一般的错误认识</h2><h3 id=\"错误认识-eventloop运行于一个单独的相对独立于用户代码的线程中\"><a href=\"#错误认识-eventloop运行于一个单独的相对独立于用户代码的线程中\" class=\"headerlink\" title=\"错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中\"></a>错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中</h3><ul>\n<li>错误：eventloop运行于一个相对独立于用户代码的线程中。有一个专门运行eventloop的线程，同时有一个运行用户代码的主线程。每当有异步操作时，主线程将工作交给事件循环线程，一旦完成，事件循环线程将ping主线程执行回调。</li>\n<li>正确：只有一个线程执行JavaScript代码，这是事件循环运行的线程。回调函数的执行（Node.js中每个用户的代码都是一个回调）是由事件循环做。稍后会更深入地讨论这个问题。</li>\n</ul>\n<h3 id=\"错误认识：异步操作由一个线程池处理\"><a href=\"#错误认识：异步操作由一个线程池处理\" class=\"headerlink\" title=\"错误认识：异步操作由一个线程池处理\"></a>错误认识：异步操作由一个线程池处理</h3><ul>\n<li>错误：异步操作，如IO工作，HTTP请求或与数据库总是由libuv线程池来装载。</li>\n<li>正确：libuv默认情况下创建一个有四个线程的线程池线来加载异步工作。今天的操作系统已经为许多I/O任务提供异步接口。只要有可能，libuv将使用这些异步接口，避免线程池的使用。这同样适用于像数据库这样的第三方子系统。驱动程序的作者宁愿使用异步接口，也不愿意使用线程池。简言之：只有在没有其他方法的情况下，线程池才会被用于异步I/O。</li>\n</ul>\n<h3 id=\"错误认识：eventloop就像栈或队列\"><a href=\"#错误认识：eventloop就像栈或队列\" class=\"headerlink\" title=\"错误认识：eventloop就像栈或队列\"></a>错误认识：eventloop就像栈或队列</h3><ul>\n<li>错误：事件循环按FIFO不断地遍历异步任务，并在任务完成时执行回调。</li>\n<li>虽然有类似队列的结构，但事件循环并没有完全类似于栈。事件循环作为一个过程，是一组由特定任务组成的按循环方式处理的过程。</li>\n</ul>\n<h2 id=\"理解事件循环处理过程\"><a href=\"#理解事件循环处理过程\" class=\"headerlink\" title=\"理解事件循环处理过程\"></a>理解事件循环处理过程</h2><p>要真正理解事件循环，我们必须了解哪些工作是在哪个阶段完成的。下图展示了这一过程：</p>\n<p>这一过程由以下几个部分组成：</p>\n<h3 id=\"计时器\"><a href=\"#计时器\" class=\"headerlink\" title=\"计时器\"></a>计时器</h3><p>任何由setTimeout()或setInerval()定时的操作都会在这里执行。</p>\n<h3 id=\"IO回调\"><a href=\"#IO回调\" class=\"headerlink\" title=\"IO回调\"></a>IO回调</h3><p>这里大部分的回调函数将被处理。所有的用户代码在Node.js基本上是在回调（例如一个回调函数传入的HTTP请求会触发一个级联的回调），这是用户的代码。</p>\n<h3 id=\"IO轮询\"><a href=\"#IO轮询\" class=\"headerlink\" title=\"IO轮询\"></a>IO轮询</h3><p>对下一次运行将要处理的新事件的轮询。<br>有两个主要方法：</p>\n<ul>\n<li>执行下限时间已经达到的timers的回调</li>\n<li>处理poll队列中的事件</li>\n</ul>\n<p>当事件循环进入poll阶段，并且没有timers被设定时，将发生两种情况之一：</p>\n<ul>\n<li>如果poll队列不空，事件循环将遍历其回调执行同步直到队列中的回调都被调用，或者达到系统上限。</li>\n<li>如果poll队列是空的，那么两个事件中的一个将会发生：</li>\n<li><ul>\n<li>如果脚本被setImmdiate()定时器定时，eventloop将会结束poll阶段，并进入下一个阶段</li>\n</ul>\n</li>\n<li><ul>\n<li>如果代码不被setimmediate()定时器定时，事件循环会等待回调被添加到队列中，然后立刻执行它们。</li>\n</ul>\n</li>\n</ul>\n<p>如果poll队列为空，eventloop将会检查哪些timers的已经到期。如果有一个或多个timer到期，eventloop将会回到timers阶段去执行回调。</p>\n<h3 id=\"Set-Immediate\"><a href=\"#Set-Immediate\" class=\"headerlink\" title=\"Set Immediate\"></a>Set Immediate</h3><p>运行所有由setImmediate()发起的操作。</p>\n<h3 id=\"Close\"><a href=\"#Close\" class=\"headerlink\" title=\"Close\"></a>Close</h3><p>这里是所有的(close)事件回调的处理。</p>\n<p>例如有以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncOperation</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设需要95ms</span></span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'/path/to/file'</span>, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeoutScheduled = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> delay = <span class=\"built_in\">Date</span>.now() - timeoutScheduled;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;delay&#125;</span>ms have passed since I was scheduled`</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">someAsyncOperation(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startCallback = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">Date</span>.now() - startCallback &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>console最终的输出为105毫秒，它的过程是这样的：</p>\n<ol>\n<li>当eventloop来到poll阶段时，它的队列为空，因为此时readFile还没有结束。所以它将等待最新的timer到期。</li>\n<li>95ms后，readFile结束，callback执行还需要另外的10ms。</li>\n<li>callback执行结束，因为队列中已经没有了其他的callback,它将回到timers阶段，setTimeOut()执行callback，得到105ms。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>nodejs是基于的事件的平台。这意味着node中发生的一切都是对事件的反应。事务通过node遍历一个级联的回调。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。</p>\n<p>远离开发层面，这些功能都是由一个叫做libuv的库提供的。</p>\n<p>Eventloop可能是nodejs中最被人所误解的一个概念。</p>\n<h2 id=\"一般的错误认识\"><a href=\"#一般的错误认识\" class=\"headerlink\" title=\"一般的错误认识\"></a>一般的错误认识</h2><h3 id=\"错误认识-eventloop运行于一个单独的相对独立于用户代码的线程中\"><a href=\"#错误认识-eventloop运行于一个单独的相对独立于用户代码的线程中\" class=\"headerlink\" title=\"错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中\"></a>错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中</h3><ul>\n<li>错误：eventloop运行于一个相对独立于用户代码的线程中。有一个专门运行eventloop的线程，同时有一个运行用户代码的主线程。每当有异步操作时，主线程将工作交给事件循环线程，一旦完成，事件循环线程将ping主线程执行回调。</li>\n<li>正确：只有一个线程执行JavaScript代码，这是事件循环运行的线程。回调函数的执行（Node.js中每个用户的代码都是一个回调）是由事件循环做。稍后会更深入地讨论这个问题。</li>\n</ul>\n<h3 id=\"错误认识：异步操作由一个线程池处理\"><a href=\"#错误认识：异步操作由一个线程池处理\" class=\"headerlink\" title=\"错误认识：异步操作由一个线程池处理\"></a>错误认识：异步操作由一个线程池处理</h3><ul>\n<li>错误：异步操作，如IO工作，HTTP请求或与数据库总是由libuv线程池来装载。</li>\n<li>正确：libuv默认情况下创建一个有四个线程的线程池线来加载异步工作。今天的操作系统已经为许多I/O任务提供异步接口。只要有可能，libuv将使用这些异步接口，避免线程池的使用。这同样适用于像数据库这样的第三方子系统。驱动程序的作者宁愿使用异步接口，也不愿意使用线程池。简言之：只有在没有其他方法的情况下，线程池才会被用于异步I/O。</li>\n</ul>\n<h3 id=\"错误认识：eventloop就像栈或队列\"><a href=\"#错误认识：eventloop就像栈或队列\" class=\"headerlink\" title=\"错误认识：eventloop就像栈或队列\"></a>错误认识：eventloop就像栈或队列</h3><ul>\n<li>错误：事件循环按FIFO不断地遍历异步任务，并在任务完成时执行回调。</li>\n<li>虽然有类似队列的结构，但事件循环并没有完全类似于栈。事件循环作为一个过程，是一组由特定任务组成的按循环方式处理的过程。</li>\n</ul>\n<h2 id=\"理解事件循环处理过程\"><a href=\"#理解事件循环处理过程\" class=\"headerlink\" title=\"理解事件循环处理过程\"></a>理解事件循环处理过程</h2><p>要真正理解事件循环，我们必须了解哪些工作是在哪个阶段完成的。下图展示了这一过程：</p>\n<p>这一过程由以下几个部分组成：</p>\n<h3 id=\"计时器\"><a href=\"#计时器\" class=\"headerlink\" title=\"计时器\"></a>计时器</h3><p>任何由setTimeout()或setInerval()定时的操作都会在这里执行。</p>\n<h3 id=\"IO回调\"><a href=\"#IO回调\" class=\"headerlink\" title=\"IO回调\"></a>IO回调</h3><p>这里大部分的回调函数将被处理。所有的用户代码在Node.js基本上是在回调（例如一个回调函数传入的HTTP请求会触发一个级联的回调），这是用户的代码。</p>\n<h3 id=\"IO轮询\"><a href=\"#IO轮询\" class=\"headerlink\" title=\"IO轮询\"></a>IO轮询</h3><p>对下一次运行将要处理的新事件的轮询。<br>有两个主要方法：</p>\n<ul>\n<li>执行下限时间已经达到的timers的回调</li>\n<li>处理poll队列中的事件</li>\n</ul>\n<p>当事件循环进入poll阶段，并且没有timers被设定时，将发生两种情况之一：</p>\n<ul>\n<li>如果poll队列不空，事件循环将遍历其回调执行同步直到队列中的回调都被调用，或者达到系统上限。</li>\n<li>如果poll队列是空的，那么两个事件中的一个将会发生：</li>\n<li><ul>\n<li>如果脚本被setImmdiate()定时器定时，eventloop将会结束poll阶段，并进入下一个阶段</li>\n</ul>\n</li>\n<li><ul>\n<li>如果代码不被setimmediate()定时器定时，事件循环会等待回调被添加到队列中，然后立刻执行它们。</li>\n</ul>\n</li>\n</ul>\n<p>如果poll队列为空，eventloop将会检查哪些timers的已经到期。如果有一个或多个timer到期，eventloop将会回到timers阶段去执行回调。</p>\n<h3 id=\"Set-Immediate\"><a href=\"#Set-Immediate\" class=\"headerlink\" title=\"Set Immediate\"></a>Set Immediate</h3><p>运行所有由setImmediate()发起的操作。</p>\n<h3 id=\"Close\"><a href=\"#Close\" class=\"headerlink\" title=\"Close\"></a>Close</h3><p>这里是所有的(close)事件回调的处理。</p>\n<p>例如有以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncOperation</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设需要95ms</span></span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'/path/to/file'</span>, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeoutScheduled = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> delay = <span class=\"built_in\">Date</span>.now() - timeoutScheduled;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;delay&#125;</span>ms have passed since I was scheduled`</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">someAsyncOperation(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startCallback = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">Date</span>.now() - startCallback &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>console最终的输出为105毫秒，它的过程是这样的：</p>\n<ol>\n<li>当eventloop来到poll阶段时，它的队列为空，因为此时readFile还没有结束。所以它将等待最新的timer到期。</li>\n<li>95ms后，readFile结束，callback执行还需要另外的10ms。</li>\n<li>callback执行结束，因为队列中已经没有了其他的callback,它将回到timers阶段，setTimeOut()执行callback，得到105ms。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cju6qpcm40002lgv8im1owdeg","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qpcmj000olgv8nwziud0o"},{"post_id":"cju6qpcm40002lgv8im1owdeg","category_id":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qpcmj000plgv83w83iqcp"},{"post_id":"cju6qpcm40002lgv8im1owdeg","category_id":"cju6qpcmg000elgv8byu0y3wi","_id":"cju6qpcmj000qlgv87vr7qtxu"},{"post_id":"cju6qr51t000xlgv8qr7abjlf","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qraoi0018lgv8u4qixanw"},{"post_id":"cju6qr51t000xlgv8qr7abjlf","category_id":"cju6qraf9000zlgv8hrzg0wze","_id":"cju6qraoi001algv80ks5qhv5"},{"post_id":"cju6qrqii001blgv8nzy5ucaq","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qrtc9001elgv8dgwbop4z"},{"post_id":"cju6qrqii001blgv8nzy5ucaq","category_id":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qrtca001glgv8d26hkgsa"},{"post_id":"cju6qrqii001blgv8nzy5ucaq","category_id":"cju6qpcmg000elgv8byu0y3wi","_id":"cju6qrtca001hlgv8wjqgbk5o"},{"post_id":"cju6qs3lt001ilgv88y2j0xja","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qs661001llgv8oybv4x22"},{"post_id":"cju6qs3lt001ilgv88y2j0xja","category_id":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qs662001nlgv89tkbtoxb"},{"post_id":"cju6qs3lt001ilgv88y2j0xja","category_id":"cju6qpcmg000elgv8byu0y3wi","_id":"cju6qs662001olgv8uvgou7o0"},{"post_id":"cju6qsjdl001plgv88flx8q38","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qsm03001slgv8bkdu571a"},{"post_id":"cju6qsjdl001plgv88flx8q38","category_id":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qsm04001ulgv8gdj8e4rt"},{"post_id":"cju6qsjdl001plgv88flx8q38","category_id":"cju6qpcmg000elgv8byu0y3wi","_id":"cju6qsm05001vlgv8k5ke5xhf"},{"post_id":"cju6qt5lg001wlgv8id3kl82v","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qt809001zlgv87aajauba"},{"post_id":"cju6qt5lg001wlgv8id3kl82v","category_id":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qt80a0021lgv8st8yjawg"},{"post_id":"cju6qt5lg001wlgv8id3kl82v","category_id":"cju6qpcmg000elgv8byu0y3wi","_id":"cju6qt80a0022lgv8x53t11us"},{"post_id":"cju6qty6e0023lgv8jy3ful5e","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qu1150027lgv8c7u5i0n5"},{"post_id":"cju6qty6e0023lgv8jy3ful5e","category_id":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qu1160029lgv85foufnl5"},{"post_id":"cju6qty6e0023lgv8jy3ful5e","category_id":"cju6qu1140025lgv88ssfg81g","_id":"cju6qu116002blgv89trjgy5q"},{"post_id":"cju6quoet002elgv8xj3vdsbk","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qush9002hlgv8a7uwn0fg"},{"post_id":"cju6quoet002elgv8xj3vdsbk","category_id":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6qusha002jlgv8jedbmb37"},{"post_id":"cju6quoet002elgv8xj3vdsbk","category_id":"cju6qpcmg000elgv8byu0y3wi","_id":"cju6qusha002llgv8ukpefswn"},{"post_id":"cju6qw061002rlgv8uk8x0f3r","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qw2u6002ulgv8qalc0yk8"},{"post_id":"cju6qw061002rlgv8uk8x0f3r","category_id":"cju6qraf9000zlgv8hrzg0wze","_id":"cju6qw2u6002vlgv8egybw5xw"},{"post_id":"cju6qwfnv002wlgv8c5dfq4bs","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6qwmd4002zlgv8zwmhab4d"},{"post_id":"cju6qwfnv002wlgv8c5dfq4bs","category_id":"cju6qraf9000zlgv8hrzg0wze","_id":"cju6qwmd50030lgv82kek9458"},{"post_id":"cju6qy2zi0039lgv8ou3k11ue","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6r1e2s00021wv8aa591z1x"},{"post_id":"cju6qy2zi0039lgv8ou3k11ue","category_id":"cju6qraf9000zlgv8hrzg0wze","_id":"cju6r1e2s00041wv8n049dnmu"},{"post_id":"cju6qxq8g0038lgv8pdt3h8kl","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6r2juf00071wv8ge432egd"},{"post_id":"cju6qxq8g0038lgv8pdt3h8kl","category_id":"cju6qx0490033lgv87b383pxb","_id":"cju6r2juf00081wv8ipabutnr"},{"post_id":"cju6r2pj900091wv8zefpwggl","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6r2pja000c1wv83ati8fix"},{"post_id":"cju6r2pj900091wv8zefpwggl","category_id":"cju6qx0490033lgv87b383pxb","_id":"cju6r2pja000d1wv8ko3d1igf"},{"post_id":"cju6r5iin000l1wv8haaxq8x4","category_id":"cju6r5ncz000m1wv87wzkjqv7","_id":"cju6r5ndb000w1wv8hflg92nw"},{"post_id":"cju6r5iin000l1wv8haaxq8x4","category_id":"cju6r5nd6000p1wv8np745epd","_id":"cju6r5ndb000x1wv81p2ifxac"},{"post_id":"cju6r5iin000l1wv8haaxq8x4","category_id":"cju6r5nd7000r1wv8w4p2tkd5","_id":"cju6r5ndc000y1wv80rxmw59s"},{"post_id":"cju6r6a03000z1wv89ntty0a3","category_id":"cju6r5ncz000m1wv87wzkjqv7","_id":"cju6r6cjx00171wv8kcx8m0tl"},{"post_id":"cju6r6a03000z1wv89ntty0a3","category_id":"cju6r6cjs00111wv89ssttkag","_id":"cju6r6cjx00181wv8fh3pdyf2"},{"post_id":"cju6r6a03000z1wv89ntty0a3","category_id":"cju6r6cju00131wv84h9aa4m2","_id":"cju6r6cjx00191wv89c8weq3d"},{"post_id":"cju6s2zyr0000mcv87udkbr01","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6s2zz10005mcv8d0kdbodd"},{"post_id":"cju6s2zyr0000mcv87udkbr01","category_id":"cju6qraf9000zlgv8hrzg0wze","_id":"cju6s2zz20007mcv8zvd4w55h"},{"post_id":"cju6s2zyx0001mcv8ehc0t2a4","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6s2zz20009mcv8o5syig09"},{"post_id":"cju6s2zyx0001mcv8ehc0t2a4","category_id":"cju6qraf9000zlgv8hrzg0wze","_id":"cju6s2zz3000bmcv8l7ciksg3"},{"post_id":"cju6s2zyz0003mcv8wl1rdpa6","category_id":"cju6qpcm70003lgv8q3wu5pwj","_id":"cju6s2zz3000dmcv87vgxcysv"},{"post_id":"cju6s2zyz0003mcv8wl1rdpa6","category_id":"cju6qpcmd0007lgv8xbf19dtm","_id":"cju6s2zz3000fmcv8xxw9po31"},{"post_id":"cju6s2zyz0003mcv8wl1rdpa6","category_id":"cju6qpcmf000blgv8751vfncp","_id":"cju6s2zz4000hmcv8rr1p1q96"}],"PostTag":[{"post_id":"cju6qpcm40002lgv8im1owdeg","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qpcmk000slgv883n18ne3"},{"post_id":"cju6qpcm40002lgv8im1owdeg","tag_id":"cju6qpcmg000glgv80gsawnto","_id":"cju6qpcmk000tlgv81xbdwvx5"},{"post_id":"cju6qpcm40002lgv8im1owdeg","tag_id":"cju6qpcmi000klgv81a389xq1","_id":"cju6qpcml000ulgv8ggdr5fye"},{"post_id":"cju6qpcm40002lgv8im1owdeg","tag_id":"cju6qpcmj000nlgv86i49ssjk","_id":"cju6qpcml000vlgv8wmuxy9w7"},{"post_id":"cju6qpcm40002lgv8im1owdeg","tag_id":"cju6qpcmk000rlgv8mf2dsy32","_id":"cju6qpcml000wlgv8jyipcu58"},{"post_id":"cju6qr51t000xlgv8qr7abjlf","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qraoh0016lgv89fscwndn"},{"post_id":"cju6qr51t000xlgv8qr7abjlf","tag_id":"cju6qraf8000ylgv8o7badeux","_id":"cju6qraoi0017lgv8w0czuvs9"},{"post_id":"cju6qr51t000xlgv8qr7abjlf","tag_id":"cju6qrafa0010lgv8ckm571t9","_id":"cju6qraoi0019lgv8ipl3o2fo"},{"post_id":"cju6qrqii001blgv8nzy5ucaq","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qrtc7001clgv83lfv1xc1"},{"post_id":"cju6qrqii001blgv8nzy5ucaq","tag_id":"cju6qpcmg000glgv80gsawnto","_id":"cju6qrtc8001dlgv810iz1f4r"},{"post_id":"cju6qrqii001blgv8nzy5ucaq","tag_id":"cju6qpcmi000klgv81a389xq1","_id":"cju6qrtc9001flgv8zbzf9q75"},{"post_id":"cju6qs3lt001ilgv88y2j0xja","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qs660001jlgv8tn9n4mbr"},{"post_id":"cju6qs3lt001ilgv88y2j0xja","tag_id":"cju6qpcmg000glgv80gsawnto","_id":"cju6qs660001klgv8b60gj4an"},{"post_id":"cju6qs3lt001ilgv88y2j0xja","tag_id":"cju6qpcmi000klgv81a389xq1","_id":"cju6qs662001mlgv8z04bbk59"},{"post_id":"cju6qsjdl001plgv88flx8q38","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qsm02001qlgv8fvngrfxz"},{"post_id":"cju6qsjdl001plgv88flx8q38","tag_id":"cju6qpcmg000glgv80gsawnto","_id":"cju6qsm02001rlgv8q0tt7i6d"},{"post_id":"cju6qsjdl001plgv88flx8q38","tag_id":"cju6qpcmi000klgv81a389xq1","_id":"cju6qsm04001tlgv8iok2b5o1"},{"post_id":"cju6qt5lg001wlgv8id3kl82v","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qt808001xlgv86ghm0dnr"},{"post_id":"cju6qt5lg001wlgv8id3kl82v","tag_id":"cju6qpcmg000glgv80gsawnto","_id":"cju6qt808001ylgv89sm4resk"},{"post_id":"cju6qt5lg001wlgv8id3kl82v","tag_id":"cju6qpcmi000klgv81a389xq1","_id":"cju6qt8090020lgv8s5eoa255"},{"post_id":"cju6qty6e0023lgv8jy3ful5e","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qu1160028lgv8yxfdjote"},{"post_id":"cju6qty6e0023lgv8jy3ful5e","tag_id":"cju6qpcmb0006lgv8tnioo8xi","_id":"cju6qu116002algv82glstdv3"},{"post_id":"cju6qty6e0023lgv8jy3ful5e","tag_id":"cju6qu1140024lgv88scep5eg","_id":"cju6qu117002clgv8vt4y01fq"},{"post_id":"cju6qty6e0023lgv8jy3ful5e","tag_id":"cju6qu1150026lgv8qrbdjzqt","_id":"cju6qu117002dlgv8mcefvyr2"},{"post_id":"cju6quoet002elgv8xj3vdsbk","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qush9002flgv8v02thsjd"},{"post_id":"cju6quoet002elgv8xj3vdsbk","tag_id":"cju6qpcmg000glgv80gsawnto","_id":"cju6qush9002glgv83ot1cbiu"},{"post_id":"cju6quoet002elgv8xj3vdsbk","tag_id":"cju6qpcmi000klgv81a389xq1","_id":"cju6qush9002ilgv883v780kq"},{"post_id":"cju6quoet002elgv8xj3vdsbk","tag_id":"cju6qpcmj000nlgv86i49ssjk","_id":"cju6qusha002klgv8b4xlq5jy"},{"post_id":"cju6qw061002rlgv8uk8x0f3r","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qw2u5002slgv8q3ylqo0y"},{"post_id":"cju6qw061002rlgv8uk8x0f3r","tag_id":"cju6qraf8000ylgv8o7badeux","_id":"cju6qw2u6002tlgv8py4m3tho"},{"post_id":"cju6qwfnv002wlgv8c5dfq4bs","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6qwmd4002xlgv895x3mz0s"},{"post_id":"cju6qwfnv002wlgv8c5dfq4bs","tag_id":"cju6qraf8000ylgv8o7badeux","_id":"cju6qwmd4002ylgv8e9tnkls7"},{"post_id":"cju6qy2zi0039lgv8ou3k11ue","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6r1e2p00001wv8ivzilvpc"},{"post_id":"cju6qy2zi0039lgv8ou3k11ue","tag_id":"cju6qpcmb0006lgv8tnioo8xi","_id":"cju6r1e2r00011wv85briqs15"},{"post_id":"cju6qy2zi0039lgv8ou3k11ue","tag_id":"cju6qraf8000ylgv8o7badeux","_id":"cju6r1e2s00031wv8g5ccu7gi"},{"post_id":"cju6qxq8g0038lgv8pdt3h8kl","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6r2juc00051wv847wu0npm"},{"post_id":"cju6qxq8g0038lgv8pdt3h8kl","tag_id":"cju6qx0490032lgv8v1oo49il","_id":"cju6r2jue00061wv8ndjzo1gb"},{"post_id":"cju6r2pj900091wv8zefpwggl","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6r2pja000a1wv8x4mnjeeh"},{"post_id":"cju6r2pj900091wv8zefpwggl","tag_id":"cju6qx0490032lgv8v1oo49il","_id":"cju6r2pja000b1wv80dnd9910"},{"post_id":"cju6r5iin000l1wv8haaxq8x4","tag_id":"cju6r5nd0000n1wv8wm0mdqhl","_id":"cju6r5nd9000s1wv8dzxpj7ie"},{"post_id":"cju6r5iin000l1wv8haaxq8x4","tag_id":"cju6r5nd2000o1wv89ieg04oh","_id":"cju6r5nd9000t1wv8pqt6namd"},{"post_id":"cju6r5iin000l1wv8haaxq8x4","tag_id":"cju6qpcmd0008lgv8fl0jzixz","_id":"cju6r5nd9000u1wv8ukylko7p"},{"post_id":"cju6r5iin000l1wv8haaxq8x4","tag_id":"cju6r5nd7000q1wv8nvklba3u","_id":"cju6r5nda000v1wv8fju37nv6"},{"post_id":"cju6r6a03000z1wv89ntty0a3","tag_id":"cju6r5nd0000n1wv8wm0mdqhl","_id":"cju6r6cjv00141wv8608ouub8"},{"post_id":"cju6r6a03000z1wv89ntty0a3","tag_id":"cju6r6cjs00101wv8iy2ec9a2","_id":"cju6r6cjw00151wv8y5kq6vrn"},{"post_id":"cju6r6a03000z1wv89ntty0a3","tag_id":"cju6r6cjt00121wv8c4zk95ld","_id":"cju6r6cjw00161wv8dfkadu6o"},{"post_id":"cju6s2zyr0000mcv87udkbr01","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6s2zyz0002mcv88wfs396t"},{"post_id":"cju6s2zyr0000mcv87udkbr01","tag_id":"cju6qraf8000ylgv8o7badeux","_id":"cju6s2zz00004mcv8ob5rrmus"},{"post_id":"cju6s2zyr0000mcv87udkbr01","tag_id":"cju6r44e2000j1wv8evk4w944","_id":"cju6s2zz10006mcv8841ln5tu"},{"post_id":"cju6s2zyx0001mcv8ehc0t2a4","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6s2zz20008mcv8raunuyck"},{"post_id":"cju6s2zyx0001mcv8ehc0t2a4","tag_id":"cju6qraf8000ylgv8o7badeux","_id":"cju6s2zz2000amcv8u4elppls"},{"post_id":"cju6s2zyz0003mcv8wl1rdpa6","tag_id":"cju6qpcma0004lgv8tfv2x3s5","_id":"cju6s2zz3000cmcv8lcvicxfp"},{"post_id":"cju6s2zyz0003mcv8wl1rdpa6","tag_id":"cju6qpcmb0006lgv8tnioo8xi","_id":"cju6s2zz3000emcv8ru75zfl2"},{"post_id":"cju6s2zyz0003mcv8wl1rdpa6","tag_id":"cju6qpcmd0008lgv8fl0jzixz","_id":"cju6s2zz4000gmcv81tgs59z5"},{"post_id":"cju6s2zyz0003mcv8wl1rdpa6","tag_id":"cju6qpcme000algv81sjbddo6","_id":"cju6s2zz4000imcv8zt39b7dm"}],"Tag":[{"name":"前端","_id":"cju6qpcma0004lgv8tfv2x3s5"},{"name":"js","_id":"cju6qpcmb0006lgv8tnioo8xi"},{"name":"nodejs","_id":"cju6qpcmd0008lgv8fl0jzixz"},{"name":"eventloop","_id":"cju6qpcme000algv81sjbddo6"},{"name":"javascript","_id":"cju6qpcmg000glgv80gsawnto"},{"name":"ES6","_id":"cju6qpcmi000klgv81a389xq1"},{"name":"Promise","_id":"cju6qpcmj000nlgv86i49ssjk"},{"name":"async/await","_id":"cju6qpcmk000rlgv8mf2dsy32"},{"name":"angular","_id":"cju6qraf8000ylgv8o7badeux"},{"name":"NG-ZORRO","_id":"cju6qrafa0010lgv8ckm571t9"},{"name":"amd","_id":"cju6qu1140024lgv88scep5eg"},{"name":"commonjs","_id":"cju6qu1150026lgv8qrbdjzqt"},{"name":"CSS","_id":"cju6qx0490032lgv8v1oo49il"},{"name":"NG-ALAIN","_id":"cju6r44e2000j1wv8evk4w944"},{"name":"后端","_id":"cju6r5nd0000n1wv8wm0mdqhl"},{"name":"区块链","_id":"cju6r5nd2000o1wv89ieg04oh"},{"name":"ebookcoin","_id":"cju6r5nd7000q1wv8nvklba3u"},{"name":"nginx","_id":"cju6r6cjs00101wv8iy2ec9a2"},{"name":"配置","_id":"cju6r6cjt00121wv8c4zk95ld"}]}}