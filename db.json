{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/images/banner.jpg","path":"images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1554700060976},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1554700060977},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1554700060977},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1554700059475},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1554700060978},{"_id":"themes/next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1554700061006},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1554700061007},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1554700061007},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1554700061008},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1554700061009},{"_id":"themes/next/_config.yml","hash":"9f386e54ea9605d2c630e1c3cf0e5d87bfa44a57","modified":1554702720586},{"_id":"themes/next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1554700061011},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1554700061011},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1554700061012},{"_id":"themes/next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1554700061106},{"_id":"source/_posts/Angular 利用NG-ZORRO实现全局http错误拦截与提示.md","hash":"777ca6eb4563cd3b4550ab673f36d136c37010a1","modified":1554701974032},{"_id":"source/_posts/Angular5 jwt验证.md","hash":"a70cec8f091c69df701836e3761feed6ff933f9f","modified":1554702560741},{"_id":"source/_posts/Angular5 自定义管道与指令.md","hash":"843752506bb69037fbbf69f99996d5d3d64a342d","modified":1519804076098},{"_id":"source/_posts/Angular5 表单.md","hash":"dc13457e97b1aab032cded4994959a876049902c","modified":1554701892085},{"_id":"source/_posts/CSS居中.md","hash":"628106ccd69d662b7f0c20f85eba6bd511f4f744","modified":1554701298068},{"_id":"source/_posts/CSS清除浮动.md","hash":"5c69e97fb5d90c187a8c215e570dca69c009eb81","modified":1554701833571},{"_id":"source/_posts/ES6中Object密封API-Object.preventExtensions,Object.seal,Object.freeze.md","hash":"33b770f1c77eaa99d48a5246021f73c71fe60a09","modified":1554701860337},{"_id":"source/_posts/ES6中Object常用API-Object.assign,Object.create,Object.defineProperty.md","hash":"18ed8b4e190346ddb7a8766561c76125ba3efc37","modified":1554701869479},{"_id":"source/_posts/ES6中的Promise.md","hash":"238745882e45b890aa2c9bfbf3eaf5788692b203","modified":1519804242255},{"_id":"source/_posts/ES6中的新集合类型-map,weakMap,set,weakSet.md","hash":"324be5ddcdc29b072bbf24bceed80595bf059abe","modified":1519804255172},{"_id":"source/_posts/ES6中的迭代协议-Sympol.iterator.md","hash":"e5a8766df18864a9ee77a4ab15e0520c5f7c4251","modified":1519804248582},{"_id":"source/_posts/JAVA中的弱引用.md","hash":"bccccbb9fe3a4da283bf3e2cabc1aaae20926f34","modified":1520310885414},{"_id":"source/_posts/JAVA并发编程之CountDownLatch.md","hash":"d4a92b5407f320447cfe52e4b6a95f64689be51b","modified":1520079690873},{"_id":"source/_posts/JAVA并发编程之CyclicBarrier.md","hash":"5c4959422923c94b611f98336a5983ded4e42cba","modified":1520310770587},{"_id":"source/_posts/JAVA并发编程之Future与CompletionSerivce.md","hash":"6567d0e376b8ca556e0dfd9a075021edb4848bba","modified":1520310829547},{"_id":"source/_posts/JAVA并发编程之ReentrantLock.md","hash":"ff3fc639500c5fdf7719592836c0919ace6dc9c5","modified":1520045638536},{"_id":"source/_posts/JAVA并发编程之ReentrantReadWriteLock.md","hash":"c2905525ae5a2623219731f96fbd3827e62f354b","modified":1520078975852},{"_id":"source/_posts/JAVA并发编程之Synchronized.md","hash":"4d5c5ca46eff86e2d72cda3fc9e1275f3243d564","modified":1519992871129},{"_id":"source/_posts/JAVA并发编程之ThreadLocal.md","hash":"ba5af1297592131778ba0c30d707beffb33c3952","modified":1520168330734},{"_id":"source/_posts/JAVA并发编程之semaphore.md","hash":"60fad544a58cfeb31cc0659388604d82c0b1e892","modified":1520078986520},{"_id":"source/_posts/JAVA并发编程之线程池.md","hash":"87c3503e49d4a2a57470fdc4c7712706d35707bd","modified":1520310805605},{"_id":"source/_posts/MySQL grant命令.md","hash":"ba06b84a55a46940110c1f1a1aa28667a5a120ba","modified":1520310857704},{"_id":"source/_posts/NanoBar源代码分析.md","hash":"08d102abff234eabc71a4d3486b721d8aa96327f","modified":1519804531942},{"_id":"source/_posts/Redis常用命令.md","hash":"1d583647a6047b5a9021cc9dfc31c87abd1f1c55","modified":1554701734757},{"_id":"source/_posts/SpringDataRedis简单使用.md","hash":"d6d79bc97e9ebdb6a33bd2c06de214da82650403","modified":1520506636949},{"_id":"source/_posts/ng-alain源码简析.md","hash":"fcff5d033c971951da17daa075d304da6b267042","modified":1554701998523},{"_id":"source/_posts/nodejs中三种方式执行任务流.md","hash":"3c9b8aef976f722e267a03a25d67ebdc31baf777","modified":1519804317880},{"_id":"source/_posts/nodejs常见坑解决.md","hash":"cd826754776a377d87d0ee0a8dbff170bd9948c8","modified":1519804372580},{"_id":"source/_posts/sequelizejs中model定义方法.md","hash":"ad77688317dcbbdbfb2c25c7fff3e59bf3832561","modified":1519806263743},{"_id":"source/_posts/sequelizejs中关系数据的表示.md","hash":"51dbd076742d9ecff1d8b1beff8b2ac80015797a","modified":1519807601102},{"_id":"source/_posts/sequelizejs中数据持久化的方法.md","hash":"f8ca36853e45092235dafe5ef95e0db39985a06e","modified":1519806255130},{"_id":"source/_posts/sequelizejs中数据查询的方法.md","hash":"22ee486e3ff5b2bbd8af5b6e3e40cfc5ba0bc502","modified":1519807552077},{"_id":"source/_posts/sequelizejs的数据类型.md","hash":"034c3656f503cdd55ea19a510a2c464f0516e4cd","modified":1519806242403},{"_id":"source/_posts/包模块规范：AMD,Commonjs与ES2015.md","hash":"99cb6e3f8cff1e072af44389e8cb205a62d98414","modified":1519804350184},{"_id":"source/_posts/用Docker和angular5及Koa创建MEAN应用.md","hash":"69b63b5ac8b012af6cc31d86751a862091918d40","modified":1520310702607},{"_id":"source/_posts/真正理解nodejs中的EventLoop.md","hash":"dbe30bff318ec6f0d0bce2d3898e80cdc4715d84","modified":1519804340949},{"_id":"source/_posts/阿里云乞丐版折腾ebookcoin.md","hash":"fbf80aac32f61abc182ff6ef33d1da270ac2c1ad","modified":1554702046160},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1554700060979},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"78756d8a45b22bdaa51f12b06907bff44afee83e","modified":1554700060980},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1554700060980},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"66e529edef048f3fab87d9670fa8999f483292bf","modified":1554700060984},{"_id":"themes/next/.github/auto_assign.yml","hash":"d022bc17b84409347cde62c27f232a9f60971f71","modified":1554700060984},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1554700060985},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1554700060986},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1554700060986},{"_id":"themes/next/.github/mergeable.yml","hash":"266c12ef70c20be2928a9feda89b7d4b132dce51","modified":1554700060987},{"_id":"themes/next/.github/release-drafter.yml","hash":"faa53bb565b766a3c14198f595e1e23e68b9e194","modified":1554700060988},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1554700060988},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1554700060989},{"_id":"themes/next/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1554700060990},{"_id":"themes/next/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1554700060992},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1554700061013},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1554700061014},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1554700061014},{"_id":"themes/next/languages/fr.yml","hash":"0393558717065293bdf732866471cebb0c884f6a","modified":1554700061015},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1554700061015},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1554700061016},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1554700061017},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1554700061018},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1554700061018},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1554700061019},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1554700061019},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1554700061020},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1554700061021},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1554700061022},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1554700061021},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1554700061023},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1554700061023},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1554700061024},{"_id":"themes/next/layout/_layout.swig","hash":"843a52ef39d385bb644ddd2e0b84c8014f4bac1b","modified":1554700061027},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1554700061102},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1554700061102},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1554700061103},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1554700061103},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1554700061104},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1554700061104},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1554700061105},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1554700061110},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1554700061111},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1554700061276},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1554700061277},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1554700061278},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554700061224},{"_id":"source/_posts/CSS居中/1.png","hash":"a02f9925d9a84e24c8cef57a1eec88db1a79645c","modified":1519866107435},{"_id":"source/_posts/CSS居中/2.png","hash":"92e0e5871017597d7dbc40285af78f467723d53c","modified":1519961031222},{"_id":"source/_posts/CSS居中/3.png","hash":"335f506778e3d4644eff28fc9506a243ba5d2c4b","modified":1519866212454},{"_id":"source/_posts/CSS居中/4.png","hash":"f2374cb58fabef3ca716f8d89f364f35dc598fad","modified":1519962202315},{"_id":"source/_posts/CSS居中/5.png","hash":"e947ac82470c920797d9c854cb5a2027ea97ac71","modified":1519964832745},{"_id":"source/_posts/CSS清除浮动/1.jpg","hash":"9120815c4038ea36e7a6b5b8a91a6c4d457b5529","modified":1519825178018},{"_id":"source/_posts/CSS清除浮动/2.jpg","hash":"cc85208ed5f99ef005e9eab96f9a6d1395019ce9","modified":1519825229248},{"_id":"source/_posts/CSS清除浮动/3.jpg","hash":"146167ad0b7b067fb764a358fdf4b42af2a72575","modified":1519825966575},{"_id":"source/_posts/CSS清除浮动/4.jpg","hash":"146167ad0b7b067fb764a358fdf4b42af2a72575","modified":1519825966575},{"_id":"source/_posts/阿里云乞丐版折腾ebookcoin/2.png","hash":"ce4de2c7263cae7c2e45c4e1bdea8ba20b4153d1","modified":1513921502045},{"_id":"source/_posts/阿里云乞丐版折腾ebookcoin/3.png","hash":"d28cdac7a3c0e7cc11b2542859c101da873478dd","modified":1513926767094},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1554700060981},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1554700060982},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1554700060983},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1554700060983},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1554700061025},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554700061026},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554700061026},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1554700061029},{"_id":"themes/next/layout/_macro/post.swig","hash":"31ba947998f0c962b04ae7f42f9d3db934209a79","modified":1554700061030},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1554700061035},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1554700061036},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1554700061037},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1554700061048},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1554700061049},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1554700061060},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1554700061060},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1554700061061},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1554700061062},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1554700061067},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1554700061068},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1554700061081},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1554700061082},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1554700061082},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1554700061090},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1554700061094},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1554700061094},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1554700061095},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1554700061095},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1554700061096},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1554700061097},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1554700061098},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1554700061101},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1554700061107},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1554700061108},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1554700061109},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1554700061112},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1554700061113},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1554700061114},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1554700061114},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1554700061115},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1554700061115},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1554700061116},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1554700061117},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1554700061117},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1554700061118},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1554700061119},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1554700061119},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1554700061223},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1554700061225},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"757db0463dbd90fb6f73a710e6f6a1f209f3a46b","modified":1554703188508},{"_id":"themes/next/source/images/avatar.jpg","hash":"ef202373a5ea48aa3f1a1f5b21410140a656b7a3","modified":1554700061226},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1554700061234},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1554700061235},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1554700061236},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1554700061237},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1554700061237},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1554700061238},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1554700061239},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"3488cc53a15dcca0a6ad5eb805f24464c4ffb9a7","modified":1554703059731},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"2cbb8dd8b725190a7bda5fcdf42e090230e37fbe","modified":1554703150103},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554700061240},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1554700061241},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554700061242},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1554700061242},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1554700061244},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554700061245},{"_id":"themes/next/source/images/wechat.jpg","hash":"3c9a4998ecd9da387764e0443986087ba2b7e7fd","modified":1554700061246},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1554700061247},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1554700061248},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1554700061248},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1554700061249},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1554700061250},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1554700061251},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1554700061252},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1554700061254},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1554700061255},{"_id":"themes/next/source/js/utils.js","hash":"6a07990fe4374f8485b7dfa5797d029d8c8a024d","modified":1554700061256},{"_id":"source/_posts/阿里云乞丐版折腾ebookcoin/1.png","hash":"e75186f0daeb0e4b4ae0ecc2a59b85cf1d0f34e0","modified":1519827568357},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554700061179},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554700061179},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554700061185},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554700061221},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554700061222},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1554700061028},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1554700061029},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1554700061038},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1554700061039},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1554700061040},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1554700061043},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1554700061041},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1554700061044},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1554700061045},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1554700061047},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1554700061048},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1554700061050},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1554700061051},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1554700061052},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1554700061052},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1554700061053},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1554700061054},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1554700061055},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1554700061055},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1554700061056},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1554700061057},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1554700061058},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1554700061063},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1554700061064},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1554700061065},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1554700061065},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1554700061066},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1554700061069},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1554700061070},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1554700061071},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1554700061071},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1554700061072},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1554700061073},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1554700061075},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1554700061076},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1554700061076},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1554700061078},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1554700061078},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1554700061079},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1554700061080},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1554700061081},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1554700061084},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1554700061084},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1554700061085},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1554700061086},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1554700061087},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1554700061088},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1554700061089},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1554700061089},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1554700061092},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1554700061092},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1554700061093},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1554700061099},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1554700061099},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1554700061100},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1554700061177},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1554700061179},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1554700061180},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"c5513b49daceeac0909ccfc8c9feb27ac4d0ac85","modified":1554700061184},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1554700061220},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1554700061220},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1554700061221},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1554700061253},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1554700061253},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1554700061257},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1554700061258},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1554700061258},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1554700061259},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1554700061260},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1554700061274},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1554700061275},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28d0eb2ad7a62cdc9691cba39d793c7435f85bc2","modified":1554700061222},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1554700061270},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1554700061275},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"13dfba1fc57ef39e7f2bbe15fe73bca1e47880a9","modified":1554700061121},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"698e4d6d894dd3db14fca5695b84bafcc4b1e4aa","modified":1554700061122},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1554700061123},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1554700061123},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1554700061124},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1554700061136},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1554700061147},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1554700061148},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1554700061171},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1554700061172},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1554700061173},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"97d39280d8f48ae250bb7d0982b37b066e0461ff","modified":1554700061173},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1554700061174},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1554700061174},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"12d23b0a50d12b687886ae8f1ff2073e7313b914","modified":1554700061175},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1554700061205},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1554700061206},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1554700061206},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1554700061207},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1554700061208},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1554700061208},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1554700061209},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1554700061209},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1554700061212},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1554700061213},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1554700061213},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1554700061214},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1554700061214},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1554700061216},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9e20fb99078fccc522e59a279790733937d3ea4c","modified":1554700061216},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1554700061217},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1554700061217},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1554700061218},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1554700061219},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1554700061261},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1554700061262},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1554700061263},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554700061268},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1554700061273},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1554700061125},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"f01b57eab6d7b9d14f57d6593f2eee608b889728","modified":1554700061126},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1554700061127},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1554700061127},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1554700061128},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1554700061129},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1554700061129},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1554700061130},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1554700061131},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1554700061132},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1554700061132},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1554700061133},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1554700061133},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1554700061134},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1554700061135},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1554700061137},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1554700061138},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1554700061138},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1554700061139},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1554700061139},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1554700061140},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1554700061141},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1554700061142},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1554700061142},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1554700061143},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1554700061144},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1554700061144},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1554700061145},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1554700061145},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1554700061146},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1554700061147},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1554700061149},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1554700061149},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1554700061150},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1554700061151},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1554700061151},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1554700061152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1554700061152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"7af79cbbe4013f549799013b9d2146f61eafc85e","modified":1554700061153},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1554700061154},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1554700061154},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1554700061155},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1554700061156},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1554700061157},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1554700061157},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1554700061158},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1554700061159},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1554700061160},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1554700061162},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1554700061164},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1554700061164},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1554700061165},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1554700061166},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1554700061166},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1554700061167},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1554700061168},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1554700061169},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1554700061169},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1554700061170},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1554700061210},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554700061211},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554700061215},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554700061267},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554700061266},{"_id":"themes/next/source/images/banner.jpg","hash":"06bad45e0a7f072ebd30d49ccabf3bbe5f8c5cfb","modified":1554700061232}],"Category":[{"name":"前端","_id":"cju7xv25c0002h0urdrqpr6hf"},{"name":"全栈","_id":"cju7xv25i0007h0urbngglq14"},{"name":"angular","parent":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv25s000fh0ure3fwcbum"},{"name":"CSS","parent":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv265000qh0urknccwyni"},{"name":"angular","parent":"cju7xv25i0007h0urbngglq14","_id":"cju7xv26f0013h0ur6v62n31q"},{"name":"ES6","parent":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv26l001dh0urtpvt5fyl"},{"name":"后端","_id":"cju7xv27h002lh0urofo7ndmj"},{"name":"nodejs","parent":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv28l0046h0urcgiulz97"},{"name":"JAVA","parent":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv296004qh0ur6pbkp1hw"},{"name":"MEAN","parent":"cju7xv25i0007h0urbngglq14","_id":"cju7xv298004th0urjexml16y"},{"name":"区块链","parent":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv29b004yh0urzcazzh7g"},{"name":"MySQL","parent":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ad006fh0urojjialoz"},{"name":"Redis","parent":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ai006mh0urmo8nvjuj"},{"name":"redis","parent":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2al006rh0urlb9trvzu"},{"name":"sequelizejs","parent":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2an006xh0uri41kn495"},{"name":"javascript","parent":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv2dq009zh0ur70n0rpdr"}],"Data":[],"Page":[],"Post":[{"title":"Angular 利用ng-zorro实现全局http错误拦截与提示","date":"2016-05-22T16:00:00.000Z","_content":"# 拦截http错误\n\nhttp全局错误的拦截可以采用先扩展``Http``类，重写请求方法后发出错误，之后实现``ErrorHandler``类来实现。\n下面是部分关键代码：\n<!-- more -->\n``` typescript\nexport class InterceptedHttp extends Http {\n\n    constructor(\n        backend: ConnectionBackend, \n        defaultOptions: RequestOptions) {\n        super(backend, defaultOptions);\n    }\n\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        // 在此处可以写一些拦截请求的操作\n        this.updateUrl(url);\n        return super.request(url, options);\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return super.get(url, this.getRequestOptionArgs(options));\n    }\n    \n    ....\n    // 改写请求url,加上req\n    private updateUrl(req: string) {\n        return  \"/api/\" + req;\n    }\n    // 改写请求头部\n    private getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs {\n        if (options == null) {\n            options = new RequestOptions();\n        }\n        if (options.headers == null) {\n            options.headers = new Headers();\n        }\n        options.headers.append('Content-Type', 'application/json');\n\n        return options;\n    }\n}\n```\n以上是一个简单的http请求拦截器，它可以改写请求参数，改写请求头部，还有一种写法是实现``HttpInterceptor``接口（angular5新添加)。\n``` typescript\nexport class MyHttpInterceptor implements HttpInterceptor {\nconstructor() { }\n\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\nconsole.log(\"intercepted request ... \");\n\n// Clone the request to add the new header.\nconst authReq = req.clone({ headers: req.headers.set(\"headerName\", \"headerValue\")});\n\nconsole.log(\"Sending request with new header now ...\");\n\n//send the newly created request\nreturn next.handle(authReq)\n.catch((error, caught) => {\n    //intercept the respons error and displace it to the console\n    console.log(\"Error Occurred\");\n    console.log(error);\n    //return the error to the method that called it\n    return Observable.throw(error);\n}) as any;\n}\n}\n```\n接下来实现ErrorHandler类，它可以捕捉各种类型的错误，包括Http请求错误。\n``` typescript\nexport class CustomErrorHandler implements ErrorHandler {\n\n    constructor( @Inject(NotificationService) private notificationService: NotificationService) {\n    }\n\n    handleError(error: any): void {\n        let msg = this.httpErrorHandler(error.rejection || error);\n    }\n\n    httpErrorHandler(err): string {\n        let message = '';\n        if (err.status) {\n            switch (err.status) {\n                case 502:\n                case 500:\n                    message = `服务器故障 : \\n详细信息 : ${err.statusText}:${err.json().message}`;\n                    break;\n                case 401:\n                    message = `${err.json().message}`\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            message = err.message;\n        }\n        return message;\n    }\n```\n# 发送错误消息\n捕捉到错误信息以后，需要通知某个服务来显示消息，利用nzMessageService将其显示出来，nzMessageService显示时需要视图载体，这里采用AppComponent作为载体。\n\n为ErrorHandler添加错误通知功能\n``` typescript\n    handleError(error: any): void {\n        let msg = this.httpErrorHandler(error.rejection || error);\n        this.notificationService.error(msg);\n    }\n```\nnotificationService必须类似于EventEmitter一样，收到消息后自动发射到接受方，所以可以采用Subject来作为Message的主体，让Message可以被订阅，也可以被按需求发射。\n\nMessage的模型如下:\n\n``` typescript\nexport class Message{\n    type: string;\n    message: string;\n    constructor(type, message){\n        this.type = type;\n        this.message = message;\n    }\n}\n\nexport class NotificationService {\n    public message: Subject<Message> = new Subject<Message>();\n\n    constructor() {\n    }\n\n    error(message: string): void {\n        this.message.next(new Message('error', message));\n    }\n}\n```\n之后，只要在AppComponent中订阅Message，就可以在前台进行提示了！\n``` typescript\nexport class AppComponent implements OnInit {\n  title = 'app';\n  constructor(private notification: NotificationService,\n    private nzMessageService: NzMessageService) {\n  }\n\n  ngOnInit(){\n    this.notification.message.distinctUntilChanged().subscribe((msg)=>{\n      this.nzMessageService.create(msg.type, msg.message);\n    });\n  }\n}\n```\n最后，注册以上这几个服务到AppModule中。\n``` typescript\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new InterceptedHttp(xhrBackend, requestOptions);\n}\n\nproviders: [\n    {\n      provide: Http,\n      useFactory: httpFactory,\n      deps: [XHRBackend, RequestOptions]\n    },\n    NotificationService, // added\n    { provide: ErrorHandler, useClass: CustomErrorHandler },\n    NzMessageService,\n    { provide: NZ_MESSAGE_CONFIG, useValue: { nzDuration: 7000 } }\n  ],\n```","source":"_posts/Angular 利用NG-ZORRO实现全局http错误拦截与提示.md","raw":"---\ntitle: Angular 利用ng-zorro实现全局http错误拦截与提示\ndate: 2016-5-23\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- angular\n- ng-zorro\n---\n# 拦截http错误\n\nhttp全局错误的拦截可以采用先扩展``Http``类，重写请求方法后发出错误，之后实现``ErrorHandler``类来实现。\n下面是部分关键代码：\n<!-- more -->\n``` typescript\nexport class InterceptedHttp extends Http {\n\n    constructor(\n        backend: ConnectionBackend, \n        defaultOptions: RequestOptions) {\n        super(backend, defaultOptions);\n    }\n\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        // 在此处可以写一些拦截请求的操作\n        this.updateUrl(url);\n        return super.request(url, options);\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return super.get(url, this.getRequestOptionArgs(options));\n    }\n    \n    ....\n    // 改写请求url,加上req\n    private updateUrl(req: string) {\n        return  \"/api/\" + req;\n    }\n    // 改写请求头部\n    private getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs {\n        if (options == null) {\n            options = new RequestOptions();\n        }\n        if (options.headers == null) {\n            options.headers = new Headers();\n        }\n        options.headers.append('Content-Type', 'application/json');\n\n        return options;\n    }\n}\n```\n以上是一个简单的http请求拦截器，它可以改写请求参数，改写请求头部，还有一种写法是实现``HttpInterceptor``接口（angular5新添加)。\n``` typescript\nexport class MyHttpInterceptor implements HttpInterceptor {\nconstructor() { }\n\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\nconsole.log(\"intercepted request ... \");\n\n// Clone the request to add the new header.\nconst authReq = req.clone({ headers: req.headers.set(\"headerName\", \"headerValue\")});\n\nconsole.log(\"Sending request with new header now ...\");\n\n//send the newly created request\nreturn next.handle(authReq)\n.catch((error, caught) => {\n    //intercept the respons error and displace it to the console\n    console.log(\"Error Occurred\");\n    console.log(error);\n    //return the error to the method that called it\n    return Observable.throw(error);\n}) as any;\n}\n}\n```\n接下来实现ErrorHandler类，它可以捕捉各种类型的错误，包括Http请求错误。\n``` typescript\nexport class CustomErrorHandler implements ErrorHandler {\n\n    constructor( @Inject(NotificationService) private notificationService: NotificationService) {\n    }\n\n    handleError(error: any): void {\n        let msg = this.httpErrorHandler(error.rejection || error);\n    }\n\n    httpErrorHandler(err): string {\n        let message = '';\n        if (err.status) {\n            switch (err.status) {\n                case 502:\n                case 500:\n                    message = `服务器故障 : \\n详细信息 : ${err.statusText}:${err.json().message}`;\n                    break;\n                case 401:\n                    message = `${err.json().message}`\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            message = err.message;\n        }\n        return message;\n    }\n```\n# 发送错误消息\n捕捉到错误信息以后，需要通知某个服务来显示消息，利用nzMessageService将其显示出来，nzMessageService显示时需要视图载体，这里采用AppComponent作为载体。\n\n为ErrorHandler添加错误通知功能\n``` typescript\n    handleError(error: any): void {\n        let msg = this.httpErrorHandler(error.rejection || error);\n        this.notificationService.error(msg);\n    }\n```\nnotificationService必须类似于EventEmitter一样，收到消息后自动发射到接受方，所以可以采用Subject来作为Message的主体，让Message可以被订阅，也可以被按需求发射。\n\nMessage的模型如下:\n\n``` typescript\nexport class Message{\n    type: string;\n    message: string;\n    constructor(type, message){\n        this.type = type;\n        this.message = message;\n    }\n}\n\nexport class NotificationService {\n    public message: Subject<Message> = new Subject<Message>();\n\n    constructor() {\n    }\n\n    error(message: string): void {\n        this.message.next(new Message('error', message));\n    }\n}\n```\n之后，只要在AppComponent中订阅Message，就可以在前台进行提示了！\n``` typescript\nexport class AppComponent implements OnInit {\n  title = 'app';\n  constructor(private notification: NotificationService,\n    private nzMessageService: NzMessageService) {\n  }\n\n  ngOnInit(){\n    this.notification.message.distinctUntilChanged().subscribe((msg)=>{\n      this.nzMessageService.create(msg.type, msg.message);\n    });\n  }\n}\n```\n最后，注册以上这几个服务到AppModule中。\n``` typescript\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new InterceptedHttp(xhrBackend, requestOptions);\n}\n\nproviders: [\n    {\n      provide: Http,\n      useFactory: httpFactory,\n      deps: [XHRBackend, RequestOptions]\n    },\n    NotificationService, // added\n    { provide: ErrorHandler, useClass: CustomErrorHandler },\n    NzMessageService,\n    { provide: NZ_MESSAGE_CONFIG, useValue: { nzDuration: 7000 } }\n  ],\n```","slug":"Angular 利用NG-ZORRO实现全局http错误拦截与提示","published":1,"updated":"2019-04-08T05:39:34.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv2510000h0urc5imew98","content":"<h1 id=\"拦截http错误\"><a href=\"#拦截http错误\" class=\"headerlink\" title=\"拦截http错误\"></a>拦截http错误</h1><p>http全局错误的拦截可以采用先扩展<code>Http</code>类，重写请求方法后发出错误，之后实现<code>ErrorHandler</code>类来实现。<br>下面是部分关键代码：<br><a id=\"more\"></a><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> InterceptedHttp <span class=\"keyword\">extends</span> Http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        backend: ConnectionBackend, </span></span><br><span class=\"line\"><span class=\"params\">        defaultOptions: RequestOptions</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(backend, defaultOptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request(url: <span class=\"built_in\">string</span> | Request, options?: RequestOptionsArgs): Observable&lt;Response&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在此处可以写一些拦截请求的操作</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.updateUrl(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.request(url, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span>(url: <span class=\"built_in\">string</span>, options?: RequestOptionsArgs): Observable&lt;Response&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.get(url, <span class=\"keyword\">this</span>.getRequestOptionArgs(options));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"comment\">// 改写请求url,加上req</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> updateUrl(req: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"string\">\"/api/\"</span> + req;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 改写请求头部</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            options = <span class=\"keyword\">new</span> RequestOptions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.headers == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            options.headers = <span class=\"keyword\">new</span> Headers();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        options.headers.append(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上是一个简单的http请求拦截器，它可以改写请求参数，改写请求头部，还有一种写法是实现<code>HttpInterceptor</code>接口（angular5新添加)。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyHttpInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"intercepted request ... \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Clone the request to add the new header.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> authReq = req.clone(&#123; headers: req.headers.set(<span class=\"string\">\"headerName\"</span>, <span class=\"string\">\"headerValue\"</span>)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Sending request with new header now ...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//send the newly created request</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> next.handle(authReq)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">error, caught</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//intercept the respons error and displace it to the console</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Error Occurred\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    <span class=\"comment\">//return the error to the method that called it</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.throw(error);</span><br><span class=\"line\">&#125;) <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来实现ErrorHandler类，它可以捕捉各种类型的错误，包括Http请求错误。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CustomErrorHandler <span class=\"keyword\">implements</span> ErrorHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"> <span class=\"meta\">@Inject</span>(NotificationService) <span class=\"keyword\">private</span> notificationService: NotificationService</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleError(error: <span class=\"built_in\">any</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> msg = <span class=\"keyword\">this</span>.httpErrorHandler(error.rejection || error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    httpErrorHandler(err): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> message = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err.status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (err.status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">502</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">                    message = <span class=\"string\">`服务器故障 : \\n详细信息 : <span class=\"subst\">$&#123;err.statusText&#125;</span>:<span class=\"subst\">$&#123;err.json().message&#125;</span>`</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">                    message = <span class=\"string\">`<span class=\"subst\">$&#123;err.json().message&#125;</span>`</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            message = err.message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"发送错误消息\"><a href=\"#发送错误消息\" class=\"headerlink\" title=\"发送错误消息\"></a>发送错误消息</h1><p>捕捉到错误信息以后，需要通知某个服务来显示消息，利用nzMessageService将其显示出来，nzMessageService显示时需要视图载体，这里采用AppComponent作为载体。</p>\n<p>为ErrorHandler添加错误通知功能<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleError(error: <span class=\"built_in\">any</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = <span class=\"keyword\">this</span>.httpErrorHandler(error.rejection || error);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notificationService.error(msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>notificationService必须类似于EventEmitter一样，收到消息后自动发射到接受方，所以可以采用Subject来作为Message的主体，让Message可以被订阅，也可以被按需求发射。</p>\n<p>Message的模型如下:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Message&#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    message: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">type</span>, message</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = <span class=\"keyword\">type</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NotificationService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> message: Subject&lt;Message&gt; = <span class=\"keyword\">new</span> Subject&lt;Message&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error(message: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message.next(<span class=\"keyword\">new</span> Message(<span class=\"string\">'error'</span>, message));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后，只要在AppComponent中订阅Message，就可以在前台进行提示了！<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  title = <span class=\"string\">'app'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> notification: NotificationService,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> nzMessageService: NzMessageService</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notification.message.distinctUntilChanged().subscribe(<span class=\"function\">(<span class=\"params\">msg</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.nzMessageService.create(msg.type, msg.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，注册以上这几个服务到AppModule中。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpFactory</span>(<span class=\"params\">xhrBackend: XHRBackend, requestOptions: RequestOptions</span>): <span class=\"title\">Http</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InterceptedHttp(xhrBackend, requestOptions);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: Http,</span><br><span class=\"line\">      useFactory: httpFactory,</span><br><span class=\"line\">      deps: [XHRBackend, RequestOptions]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    NotificationService, <span class=\"comment\">// added</span></span><br><span class=\"line\">    &#123; provide: ErrorHandler, useClass: CustomErrorHandler &#125;,</span><br><span class=\"line\">    NzMessageService,</span><br><span class=\"line\">    &#123; provide: NZ_MESSAGE_CONFIG, useValue: &#123; nzDuration: <span class=\"number\">7000</span> &#125; &#125;</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"拦截http错误\"><a href=\"#拦截http错误\" class=\"headerlink\" title=\"拦截http错误\"></a>拦截http错误</h1><p>http全局错误的拦截可以采用先扩展<code>Http</code>类，重写请求方法后发出错误，之后实现<code>ErrorHandler</code>类来实现。<br>下面是部分关键代码：<br>","more":"<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> InterceptedHttp <span class=\"keyword\">extends</span> Http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        backend: ConnectionBackend, </span></span><br><span class=\"line\"><span class=\"params\">        defaultOptions: RequestOptions</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(backend, defaultOptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request(url: <span class=\"built_in\">string</span> | Request, options?: RequestOptionsArgs): Observable&lt;Response&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在此处可以写一些拦截请求的操作</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.updateUrl(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.request(url, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span>(url: <span class=\"built_in\">string</span>, options?: RequestOptionsArgs): Observable&lt;Response&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.get(url, <span class=\"keyword\">this</span>.getRequestOptionArgs(options));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"comment\">// 改写请求url,加上req</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> updateUrl(req: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"string\">\"/api/\"</span> + req;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 改写请求头部</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            options = <span class=\"keyword\">new</span> RequestOptions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.headers == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            options.headers = <span class=\"keyword\">new</span> Headers();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        options.headers.append(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上是一个简单的http请求拦截器，它可以改写请求参数，改写请求头部，还有一种写法是实现<code>HttpInterceptor</code>接口（angular5新添加)。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyHttpInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"intercepted request ... \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Clone the request to add the new header.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> authReq = req.clone(&#123; headers: req.headers.set(<span class=\"string\">\"headerName\"</span>, <span class=\"string\">\"headerValue\"</span>)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Sending request with new header now ...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//send the newly created request</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> next.handle(authReq)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">error, caught</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//intercept the respons error and displace it to the console</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Error Occurred\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    <span class=\"comment\">//return the error to the method that called it</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.throw(error);</span><br><span class=\"line\">&#125;) <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来实现ErrorHandler类，它可以捕捉各种类型的错误，包括Http请求错误。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CustomErrorHandler <span class=\"keyword\">implements</span> ErrorHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"> <span class=\"meta\">@Inject</span>(NotificationService) <span class=\"keyword\">private</span> notificationService: NotificationService</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleError(error: <span class=\"built_in\">any</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> msg = <span class=\"keyword\">this</span>.httpErrorHandler(error.rejection || error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    httpErrorHandler(err): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> message = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err.status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (err.status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">502</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">                    message = <span class=\"string\">`服务器故障 : \\n详细信息 : <span class=\"subst\">$&#123;err.statusText&#125;</span>:<span class=\"subst\">$&#123;err.json().message&#125;</span>`</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">                    message = <span class=\"string\">`<span class=\"subst\">$&#123;err.json().message&#125;</span>`</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            message = err.message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"发送错误消息\"><a href=\"#发送错误消息\" class=\"headerlink\" title=\"发送错误消息\"></a>发送错误消息</h1><p>捕捉到错误信息以后，需要通知某个服务来显示消息，利用nzMessageService将其显示出来，nzMessageService显示时需要视图载体，这里采用AppComponent作为载体。</p>\n<p>为ErrorHandler添加错误通知功能<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleError(error: <span class=\"built_in\">any</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = <span class=\"keyword\">this</span>.httpErrorHandler(error.rejection || error);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notificationService.error(msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>notificationService必须类似于EventEmitter一样，收到消息后自动发射到接受方，所以可以采用Subject来作为Message的主体，让Message可以被订阅，也可以被按需求发射。</p>\n<p>Message的模型如下:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Message&#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    message: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">type</span>, message</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = <span class=\"keyword\">type</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NotificationService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> message: Subject&lt;Message&gt; = <span class=\"keyword\">new</span> Subject&lt;Message&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error(message: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message.next(<span class=\"keyword\">new</span> Message(<span class=\"string\">'error'</span>, message));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后，只要在AppComponent中订阅Message，就可以在前台进行提示了！<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  title = <span class=\"string\">'app'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> notification: NotificationService,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> nzMessageService: NzMessageService</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notification.message.distinctUntilChanged().subscribe(<span class=\"function\">(<span class=\"params\">msg</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.nzMessageService.create(msg.type, msg.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，注册以上这几个服务到AppModule中。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpFactory</span>(<span class=\"params\">xhrBackend: XHRBackend, requestOptions: RequestOptions</span>): <span class=\"title\">Http</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InterceptedHttp(xhrBackend, requestOptions);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: Http,</span><br><span class=\"line\">      useFactory: httpFactory,</span><br><span class=\"line\">      deps: [XHRBackend, RequestOptions]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    NotificationService, <span class=\"comment\">// added</span></span><br><span class=\"line\">    &#123; provide: ErrorHandler, useClass: CustomErrorHandler &#125;,</span><br><span class=\"line\">    NzMessageService,</span><br><span class=\"line\">    &#123; provide: NZ_MESSAGE_CONFIG, useValue: &#123; nzDuration: <span class=\"number\">7000</span> &#125; &#125;</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure></p>"},{"title":"Angular5 jwt验证","date":"2016-05-20T16:00:00.000Z","_content":"首先写一个简单的bootstrap的登陆表单。\n新建loginComponent，然后在hmtl里写:\n<!-- more -->\n``` html\n<div class=\"col-md-6 col-md-offset-3\">\n  <h2>Login</h2>\n  <form name=\"form\" (ngSubmit)=\"f.form.valid && login()\" #f=\"ngForm\" novalidate>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !username.valid }\">\n          <label for=\"username\">Username</label>\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"user.username\" #username=\"ngModel\" required />\n          <div *ngIf=\"f.submitted && !username.valid\" class=\"help-block\">Username is required</div>\n      </div>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !password.valid }\">\n          <label for=\"password\">Password</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"user.password\" #password=\"ngModel\" required />\n          <div *ngIf=\"f.submitted && !password.valid\" class=\"help-block\">Password is required</div>\n      </div>\n      <div class=\"form-group\">\n          <button [disabled]=\"loading\" class=\"btn btn-primary\">Login</button>\n          <i class=\"fa fa-spinner fa-spin\" *ngIf=\"loading\"></i>\n      </div>\n  </form>\n</div>\n```\n在loginComponent内写：\n``` typescript\nexport class LoginComponent implements OnInit {\n    user: User = new User();\n    loading = false;\n    error = '';\n\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService) { }\n\n    ngOnInit() {\n        // reset login status\n        this.authenticationService.logout();\n    }\n\n    login() {\n        this.loading = true;\n        this.authenticationService.login(this.user)\n            .subscribe(result => {\n                if (result === true) {\n                    this.router.navigate(['/']);\n                } else {\n                    this.error = 'Username or password is incorrect';\n                    this.loading = false;\n                }\n            },error=>{\n                this.loading = false;\n            });\n    }\n}\n```\nUserModel的代码：\n``` typescript\nexport class User{\n    id: number;\n    username: string;\n    password: string;\n}\n```\nlogin后，要根据用户名密码来在后台签名，签名结果token返回前台，前台接收到token后，存储到localstorage中，然后以后每次请求时，都要带上token作为头部。\n``` typescript\nconst User = require('../models/user.model');\nconst jwt = require('jsonwebtoken');\nconst secret = require('../secret');\nasync function login(ctx) {\n  const { query } = ctx.request\n  let user = await User.find({where: {id: query.id}});\n  if (query.password === user.password) {\n    ctx.status = 200\n    ctx.body = {\n      message: '登录成功',\n      user: user,\n      token: jwt.sign({\n        data: user,\n        exp: Math.floor(Date.now() / 1000) + (60 * 60), // 60 seconds * 60 minutes = 1 hour\n      }, secret),\n    }\n  } else {\n    let err = new Error('Password Error');\n    err.status = 401;\n    err.message = `密码错误`;\n    throw err;\n  }\n}\n\nmodule.exports = { login };\n```\nkoa-jwt添加进来以后，引入公钥，然后排除login api：\n``` typescript\njwt({ secret: secret }).unless({ path: [/^\\/api\\/login/] })\n```\n这样，当前台发出请求时，就会得到签名过的token，为了统一处理，写一个共通处理的httpinterceptor，这里面用到了``ngx-notify``。\n``` typescript\nexport class DefaultHttpInterceptor implements HttpInterceptor {\n\n    constructor(private auth: AuthenticationService, private notifyService: NotifyService) {\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n\n        let url = req.url;\n        if (!url.startsWith('https://') && !url.startsWith('http://')) {\n            url = environment.api + url;\n        }\n        let options = { url: url };\n        if (!url.includes('login')) {\n            options['setHeaders'] = {\n                Authorization: `Bearer ${this.auth.getToken()}`\n            }\n        }\n        const newReq = req.clone(options);\n        const started = Date.now();\n        return next.handle(newReq).pipe(\n            tap(event => {\n              if (event instanceof HttpResponse) {\n                const elapsed = Date.now() - started;\n                console.log(`Request for ${req.urlWithParams} took ${elapsed} ms.`);\n              }\n            }, error => {\n                switch (error.status) {\n                    case 401:\n                        // 权限处理\n                        this.notifyService.error('401', `错误代码为：${error.message}`);\n                        break;\n                    case 404:\n                        this.notifyService.error('404', `API不存在`);\n                        break;\n                    case 500:\n                        this.notifyService.error('500', error.message);\n                        break;\n                }\n            }));\n    }\n}\n```\n\n过程中遇到的坑：\n1. httpinterceptor只支持httpClient而不支持http。\n2. koa-jwt只支持自动校验，不支持sign。\n","source":"_posts/Angular5 jwt验证.md","raw":"---\ntitle: Angular5 jwt验证\ndate: 2016-5-21\ncategories:\n- 全栈\n- angular\ntags:\n- 全栈\n- angular\n- jwt\n---\n首先写一个简单的bootstrap的登陆表单。\n新建loginComponent，然后在hmtl里写:\n<!-- more -->\n``` html\n<div class=\"col-md-6 col-md-offset-3\">\n  <h2>Login</h2>\n  <form name=\"form\" (ngSubmit)=\"f.form.valid && login()\" #f=\"ngForm\" novalidate>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !username.valid }\">\n          <label for=\"username\">Username</label>\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"user.username\" #username=\"ngModel\" required />\n          <div *ngIf=\"f.submitted && !username.valid\" class=\"help-block\">Username is required</div>\n      </div>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !password.valid }\">\n          <label for=\"password\">Password</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"user.password\" #password=\"ngModel\" required />\n          <div *ngIf=\"f.submitted && !password.valid\" class=\"help-block\">Password is required</div>\n      </div>\n      <div class=\"form-group\">\n          <button [disabled]=\"loading\" class=\"btn btn-primary\">Login</button>\n          <i class=\"fa fa-spinner fa-spin\" *ngIf=\"loading\"></i>\n      </div>\n  </form>\n</div>\n```\n在loginComponent内写：\n``` typescript\nexport class LoginComponent implements OnInit {\n    user: User = new User();\n    loading = false;\n    error = '';\n\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService) { }\n\n    ngOnInit() {\n        // reset login status\n        this.authenticationService.logout();\n    }\n\n    login() {\n        this.loading = true;\n        this.authenticationService.login(this.user)\n            .subscribe(result => {\n                if (result === true) {\n                    this.router.navigate(['/']);\n                } else {\n                    this.error = 'Username or password is incorrect';\n                    this.loading = false;\n                }\n            },error=>{\n                this.loading = false;\n            });\n    }\n}\n```\nUserModel的代码：\n``` typescript\nexport class User{\n    id: number;\n    username: string;\n    password: string;\n}\n```\nlogin后，要根据用户名密码来在后台签名，签名结果token返回前台，前台接收到token后，存储到localstorage中，然后以后每次请求时，都要带上token作为头部。\n``` typescript\nconst User = require('../models/user.model');\nconst jwt = require('jsonwebtoken');\nconst secret = require('../secret');\nasync function login(ctx) {\n  const { query } = ctx.request\n  let user = await User.find({where: {id: query.id}});\n  if (query.password === user.password) {\n    ctx.status = 200\n    ctx.body = {\n      message: '登录成功',\n      user: user,\n      token: jwt.sign({\n        data: user,\n        exp: Math.floor(Date.now() / 1000) + (60 * 60), // 60 seconds * 60 minutes = 1 hour\n      }, secret),\n    }\n  } else {\n    let err = new Error('Password Error');\n    err.status = 401;\n    err.message = `密码错误`;\n    throw err;\n  }\n}\n\nmodule.exports = { login };\n```\nkoa-jwt添加进来以后，引入公钥，然后排除login api：\n``` typescript\njwt({ secret: secret }).unless({ path: [/^\\/api\\/login/] })\n```\n这样，当前台发出请求时，就会得到签名过的token，为了统一处理，写一个共通处理的httpinterceptor，这里面用到了``ngx-notify``。\n``` typescript\nexport class DefaultHttpInterceptor implements HttpInterceptor {\n\n    constructor(private auth: AuthenticationService, private notifyService: NotifyService) {\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n\n        let url = req.url;\n        if (!url.startsWith('https://') && !url.startsWith('http://')) {\n            url = environment.api + url;\n        }\n        let options = { url: url };\n        if (!url.includes('login')) {\n            options['setHeaders'] = {\n                Authorization: `Bearer ${this.auth.getToken()}`\n            }\n        }\n        const newReq = req.clone(options);\n        const started = Date.now();\n        return next.handle(newReq).pipe(\n            tap(event => {\n              if (event instanceof HttpResponse) {\n                const elapsed = Date.now() - started;\n                console.log(`Request for ${req.urlWithParams} took ${elapsed} ms.`);\n              }\n            }, error => {\n                switch (error.status) {\n                    case 401:\n                        // 权限处理\n                        this.notifyService.error('401', `错误代码为：${error.message}`);\n                        break;\n                    case 404:\n                        this.notifyService.error('404', `API不存在`);\n                        break;\n                    case 500:\n                        this.notifyService.error('500', error.message);\n                        break;\n                }\n            }));\n    }\n}\n```\n\n过程中遇到的坑：\n1. httpinterceptor只支持httpClient而不支持http。\n2. koa-jwt只支持自动校验，不支持sign。\n","slug":"Angular5 jwt验证","published":1,"updated":"2019-04-08T05:49:20.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv2590001h0urx69qwmk0","content":"<p>首先写一个简单的bootstrap的登陆表单。<br>新建loginComponent，然后在hmtl里写:<br><a id=\"more\"></a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6 col-md-offset-3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"form\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"f.form.valid &amp;&amp; login()\"</span> #<span class=\"attr\">f</span>=<span class=\"string\">\"ngForm\"</span> <span class=\"attr\">novalidate</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'has-error': f.submitted &amp;&amp; !username.valid &#125;\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username\"</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"user.username\"</span> #<span class=\"attr\">username</span>=<span class=\"string\">\"ngModel\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"f.submitted &amp;&amp; !username.valid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Username is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'has-error': f.submitted &amp;&amp; !password.valid &#125;\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"user.password\"</span> #<span class=\"attr\">password</span>=<span class=\"string\">\"ngModel\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"f.submitted &amp;&amp; !password.valid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Password is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"loading\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"loading\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在loginComponent内写：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> LoginComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">    user: User = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    error = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> router: Router,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> authenticationService: AuthenticationService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reset login status</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.authenticationService.logout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    login() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.authenticationService.login(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">            .subscribe(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'/'</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.error = <span class=\"string\">'Username or password is incorrect'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>UserModel的代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> User&#123;</span><br><span class=\"line\">    id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    username: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    password: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>login后，要根据用户名密码来在后台签名，签名结果token返回前台，前台接收到token后，存储到localstorage中，然后以后每次请求时，都要带上token作为头部。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/user.model'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"built_in\">require</span>(<span class=\"string\">'../secret'</span>);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; query &#125; = ctx.request</span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = <span class=\"keyword\">await</span> User.find(&#123;where: &#123;id: query.id&#125;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (query.password === user.password) &#123;</span><br><span class=\"line\">    ctx.status = <span class=\"number\">200</span></span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">      message: <span class=\"string\">'登录成功'</span>,</span><br><span class=\"line\">      user: user,</span><br><span class=\"line\">      token: jwt.sign(&#123;</span><br><span class=\"line\">        data: user,</span><br><span class=\"line\">        exp: <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Date</span>.now() / <span class=\"number\">1000</span>) + (<span class=\"number\">60</span> * <span class=\"number\">60</span>), <span class=\"comment\">// 60 seconds * 60 minutes = 1 hour</span></span><br><span class=\"line\">      &#125;, secret),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Password Error'</span>);</span><br><span class=\"line\">    err.status = <span class=\"number\">401</span>;</span><br><span class=\"line\">    err.message = <span class=\"string\">`密码错误`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; login &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>koa-jwt添加进来以后，引入公钥，然后排除login api：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jwt(&#123; secret: secret &#125;).unless(&#123; path: [<span class=\"regexp\">/^\\/api\\/login/</span>] &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这样，当前台发出请求时，就会得到签名过的token，为了统一处理，写一个共通处理的httpinterceptor，这里面用到了<code>ngx-notify</code>。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DefaultHttpInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> auth: AuthenticationService, <span class=\"keyword\">private</span> notifyService: NotifyService</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse&lt;<span class=\"built_in\">any</span>&gt; | HttpUserEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> url = req.url;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!url.startsWith(<span class=\"string\">'https://'</span>) &amp;&amp; !url.startsWith(<span class=\"string\">'http://'</span>)) &#123;</span><br><span class=\"line\">            url = environment.api + url;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> options = &#123; url: url &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!url.includes(<span class=\"string\">'login'</span>)) &#123;</span><br><span class=\"line\">            options[<span class=\"string\">'setHeaders'</span>] = &#123;</span><br><span class=\"line\">                Authorization: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;this.auth.getToken()&#125;</span>`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newReq = req.clone(options);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> started = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next.handle(newReq).pipe(</span><br><span class=\"line\">            tap(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> HttpResponse) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> elapsed = <span class=\"built_in\">Date</span>.now() - started;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`Request for <span class=\"subst\">$&#123;req.urlWithParams&#125;</span> took <span class=\"subst\">$&#123;elapsed&#125;</span> ms.`</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (error.status) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">                        <span class=\"comment\">// 权限处理</span></span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'401'</span>, <span class=\"string\">`错误代码为：<span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'404'</span>, <span class=\"string\">`API不存在`</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'500'</span>, error.message);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>过程中遇到的坑：</p>\n<ol>\n<li>httpinterceptor只支持httpClient而不支持http。</li>\n<li>koa-jwt只支持自动校验，不支持sign。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>首先写一个简单的bootstrap的登陆表单。<br>新建loginComponent，然后在hmtl里写:<br>","more":"<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6 col-md-offset-3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"form\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"f.form.valid &amp;&amp; login()\"</span> #<span class=\"attr\">f</span>=<span class=\"string\">\"ngForm\"</span> <span class=\"attr\">novalidate</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'has-error': f.submitted &amp;&amp; !username.valid &#125;\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username\"</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"user.username\"</span> #<span class=\"attr\">username</span>=<span class=\"string\">\"ngModel\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"f.submitted &amp;&amp; !username.valid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Username is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'has-error': f.submitted &amp;&amp; !password.valid &#125;\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"user.password\"</span> #<span class=\"attr\">password</span>=<span class=\"string\">\"ngModel\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"f.submitted &amp;&amp; !password.valid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Password is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"loading\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"loading\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在loginComponent内写：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> LoginComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">    user: User = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    error = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> router: Router,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> authenticationService: AuthenticationService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reset login status</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.authenticationService.logout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    login() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.authenticationService.login(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">            .subscribe(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'/'</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.error = <span class=\"string\">'Username or password is incorrect'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>UserModel的代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> User&#123;</span><br><span class=\"line\">    id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    username: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    password: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>login后，要根据用户名密码来在后台签名，签名结果token返回前台，前台接收到token后，存储到localstorage中，然后以后每次请求时，都要带上token作为头部。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/user.model'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"built_in\">require</span>(<span class=\"string\">'../secret'</span>);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; query &#125; = ctx.request</span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = <span class=\"keyword\">await</span> User.find(&#123;where: &#123;id: query.id&#125;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (query.password === user.password) &#123;</span><br><span class=\"line\">    ctx.status = <span class=\"number\">200</span></span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">      message: <span class=\"string\">'登录成功'</span>,</span><br><span class=\"line\">      user: user,</span><br><span class=\"line\">      token: jwt.sign(&#123;</span><br><span class=\"line\">        data: user,</span><br><span class=\"line\">        exp: <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Date</span>.now() / <span class=\"number\">1000</span>) + (<span class=\"number\">60</span> * <span class=\"number\">60</span>), <span class=\"comment\">// 60 seconds * 60 minutes = 1 hour</span></span><br><span class=\"line\">      &#125;, secret),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Password Error'</span>);</span><br><span class=\"line\">    err.status = <span class=\"number\">401</span>;</span><br><span class=\"line\">    err.message = <span class=\"string\">`密码错误`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; login &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>koa-jwt添加进来以后，引入公钥，然后排除login api：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jwt(&#123; secret: secret &#125;).unless(&#123; path: [<span class=\"regexp\">/^\\/api\\/login/</span>] &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这样，当前台发出请求时，就会得到签名过的token，为了统一处理，写一个共通处理的httpinterceptor，这里面用到了<code>ngx-notify</code>。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DefaultHttpInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> auth: AuthenticationService, <span class=\"keyword\">private</span> notifyService: NotifyService</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse&lt;<span class=\"built_in\">any</span>&gt; | HttpUserEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> url = req.url;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!url.startsWith(<span class=\"string\">'https://'</span>) &amp;&amp; !url.startsWith(<span class=\"string\">'http://'</span>)) &#123;</span><br><span class=\"line\">            url = environment.api + url;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> options = &#123; url: url &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!url.includes(<span class=\"string\">'login'</span>)) &#123;</span><br><span class=\"line\">            options[<span class=\"string\">'setHeaders'</span>] = &#123;</span><br><span class=\"line\">                Authorization: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;this.auth.getToken()&#125;</span>`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newReq = req.clone(options);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> started = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next.handle(newReq).pipe(</span><br><span class=\"line\">            tap(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> HttpResponse) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> elapsed = <span class=\"built_in\">Date</span>.now() - started;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`Request for <span class=\"subst\">$&#123;req.urlWithParams&#125;</span> took <span class=\"subst\">$&#123;elapsed&#125;</span> ms.`</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (error.status) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">                        <span class=\"comment\">// 权限处理</span></span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'401'</span>, <span class=\"string\">`错误代码为：<span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'404'</span>, <span class=\"string\">`API不存在`</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.notifyService.error(<span class=\"string\">'500'</span>, error.message);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>过程中遇到的坑：</p>\n<ol>\n<li>httpinterceptor只支持httpClient而不支持http。</li>\n<li>koa-jwt只支持自动校验，不支持sign。</li>\n</ol>"},{"title":"Angular5 自定义管道与指令","date":"2016-05-20T16:00:00.000Z","_content":"Angular有很多内置指令与管道，但有时候还是要添加自定义的管道或指令。\n# 自定义指令\n可以通过``ng g d``选项来创建一个新的指令。\n例如可以定义一个``highlight``指令，并可以在其中应用``@HostListener,@HostBingding,@Input``等装饰器。\n<!-- more -->\n``` typescript\n@Directive({\n  selector: '[highlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private elem: ElementRef, private renderer: Renderer) { }\n  private color :string;\n\n  @Input('highlight') \n  highlightColor: string;\n\n  @HostListener('mouseenter')\n  onMouseEnter() {\n      console.log(this.highlightColor);\n      this.renderer.setElementStyle(this.elem.nativeElement, 'backgroundColor', this.highlightColor);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave() {\n      this.renderer.setElementStyle(this.elem.nativeElement, 'backgroundColor', null);\n  }\n  \n  @HostBinding('attr.role') role = 'button';\n}\n```\n# 自定义管道\n可以使用``ng g p``来创建一个新的自定义管道。\n例如，可以创建一个判断是否为0的管道。\n``` typescript\n@Pipe({\n  name: 'isZeroPipe'\n})\nexport class IsZeroPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if(value){\n      return 'NotZero';\n    }else{\n      return 'Zero';\n    }\n  }\n}\n```\n## 内置管道\n\n\n管道|类型|功能\n---|---|---\nDatePipe|\t纯管道\t|日期管道，格式化日期\nJsonPipe|\t非纯管道|\t将输入数据对象经过JSON.stringify()方法转换后输出对象的字符串\nUpperCasePipe|\t纯管道|\t将文本所有小写字母转换成大写字母\nLowerCasePipe|\t纯管道|\t将文本所有大写字母转换成小写字母\nDecimalPipe|\t纯管道|\t将数值按特定的格式显示文本\nCurrentcyPipe|\t纯管道|\t将数值转百分比格式\nSlicePipe|\t非纯管道|\t将数组或者字符串裁剪成新子集","source":"_posts/Angular5 自定义管道与指令.md","raw":"---\ntitle: Angular5 自定义管道与指令\ndate: 2016-5-21\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- angular\n---\nAngular有很多内置指令与管道，但有时候还是要添加自定义的管道或指令。\n# 自定义指令\n可以通过``ng g d``选项来创建一个新的指令。\n例如可以定义一个``highlight``指令，并可以在其中应用``@HostListener,@HostBingding,@Input``等装饰器。\n<!-- more -->\n``` typescript\n@Directive({\n  selector: '[highlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private elem: ElementRef, private renderer: Renderer) { }\n  private color :string;\n\n  @Input('highlight') \n  highlightColor: string;\n\n  @HostListener('mouseenter')\n  onMouseEnter() {\n      console.log(this.highlightColor);\n      this.renderer.setElementStyle(this.elem.nativeElement, 'backgroundColor', this.highlightColor);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave() {\n      this.renderer.setElementStyle(this.elem.nativeElement, 'backgroundColor', null);\n  }\n  \n  @HostBinding('attr.role') role = 'button';\n}\n```\n# 自定义管道\n可以使用``ng g p``来创建一个新的自定义管道。\n例如，可以创建一个判断是否为0的管道。\n``` typescript\n@Pipe({\n  name: 'isZeroPipe'\n})\nexport class IsZeroPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if(value){\n      return 'NotZero';\n    }else{\n      return 'Zero';\n    }\n  }\n}\n```\n## 内置管道\n\n\n管道|类型|功能\n---|---|---\nDatePipe|\t纯管道\t|日期管道，格式化日期\nJsonPipe|\t非纯管道|\t将输入数据对象经过JSON.stringify()方法转换后输出对象的字符串\nUpperCasePipe|\t纯管道|\t将文本所有小写字母转换成大写字母\nLowerCasePipe|\t纯管道|\t将文本所有大写字母转换成小写字母\nDecimalPipe|\t纯管道|\t将数值按特定的格式显示文本\nCurrentcyPipe|\t纯管道|\t将数值转百分比格式\nSlicePipe|\t非纯管道|\t将数组或者字符串裁剪成新子集","slug":"Angular5 自定义管道与指令","published":1,"updated":"2018-02-28T07:47:56.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25e0004h0urxt5w1pu3","content":"<p>Angular有很多内置指令与管道，但有时候还是要添加自定义的管道或指令。</p>\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><p>可以通过<code>ng g d</code>选项来创建一个新的指令。<br>例如可以定义一个<code>highlight</code>指令，并可以在其中应用<code>@HostListener,@HostBingding,@Input</code>等装饰器。<br><a id=\"more\"></a><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'[highlight]'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HighlightDirective &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> elem: ElementRef, <span class=\"keyword\">private</span> renderer: Renderer</span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> color :<span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>(<span class=\"string\">'highlight'</span>) </span><br><span class=\"line\">  highlightColor: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">'mouseenter'</span>)</span><br><span class=\"line\">  onMouseEnter() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.highlightColor);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.renderer.setElementStyle(<span class=\"keyword\">this</span>.elem.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"keyword\">this</span>.highlightColor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">'mouseleave'</span>)</span><br><span class=\"line\">  onMouseLeave() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.renderer.setElementStyle(<span class=\"keyword\">this</span>.elem.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostBinding</span>(<span class=\"string\">'attr.role'</span>) role = <span class=\"string\">'button'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义管道\"><a href=\"#自定义管道\" class=\"headerlink\" title=\"自定义管道\"></a>自定义管道</h1><p>可以使用<code>ng g p</code>来创建一个新的自定义管道。<br>例如，可以创建一个判断是否为0的管道。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'isZeroPipe'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> IsZeroPipe <span class=\"keyword\">implements</span> PipeTransform &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  transform(value: <span class=\"built_in\">any</span>, args?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'NotZero'</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'Zero'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"内置管道\"><a href=\"#内置管道\" class=\"headerlink\" title=\"内置管道\"></a>内置管道</h2><table>\n<thead>\n<tr>\n<th>管道</th>\n<th>类型</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DatePipe</td>\n<td>纯管道</td>\n<td>日期管道，格式化日期</td>\n</tr>\n<tr>\n<td>JsonPipe</td>\n<td>非纯管道</td>\n<td>将输入数据对象经过JSON.stringify()方法转换后输出对象的字符串</td>\n</tr>\n<tr>\n<td>UpperCasePipe</td>\n<td>纯管道</td>\n<td>将文本所有小写字母转换成大写字母</td>\n</tr>\n<tr>\n<td>LowerCasePipe</td>\n<td>纯管道</td>\n<td>将文本所有大写字母转换成小写字母</td>\n</tr>\n<tr>\n<td>DecimalPipe</td>\n<td>纯管道</td>\n<td>将数值按特定的格式显示文本</td>\n</tr>\n<tr>\n<td>CurrentcyPipe</td>\n<td>纯管道</td>\n<td>将数值转百分比格式</td>\n</tr>\n<tr>\n<td>SlicePipe</td>\n<td>非纯管道</td>\n<td>将数组或者字符串裁剪成新子集</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>Angular有很多内置指令与管道，但有时候还是要添加自定义的管道或指令。</p>\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><p>可以通过<code>ng g d</code>选项来创建一个新的指令。<br>例如可以定义一个<code>highlight</code>指令，并可以在其中应用<code>@HostListener,@HostBingding,@Input</code>等装饰器。<br>","more":"<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'[highlight]'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HighlightDirective &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> elem: ElementRef, <span class=\"keyword\">private</span> renderer: Renderer</span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> color :<span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>(<span class=\"string\">'highlight'</span>) </span><br><span class=\"line\">  highlightColor: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">'mouseenter'</span>)</span><br><span class=\"line\">  onMouseEnter() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.highlightColor);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.renderer.setElementStyle(<span class=\"keyword\">this</span>.elem.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"keyword\">this</span>.highlightColor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">'mouseleave'</span>)</span><br><span class=\"line\">  onMouseLeave() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.renderer.setElementStyle(<span class=\"keyword\">this</span>.elem.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostBinding</span>(<span class=\"string\">'attr.role'</span>) role = <span class=\"string\">'button'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义管道\"><a href=\"#自定义管道\" class=\"headerlink\" title=\"自定义管道\"></a>自定义管道</h1><p>可以使用<code>ng g p</code>来创建一个新的自定义管道。<br>例如，可以创建一个判断是否为0的管道。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'isZeroPipe'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> IsZeroPipe <span class=\"keyword\">implements</span> PipeTransform &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  transform(value: <span class=\"built_in\">any</span>, args?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'NotZero'</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'Zero'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"内置管道\"><a href=\"#内置管道\" class=\"headerlink\" title=\"内置管道\"></a>内置管道</h2><table>\n<thead>\n<tr>\n<th>管道</th>\n<th>类型</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DatePipe</td>\n<td>纯管道</td>\n<td>日期管道，格式化日期</td>\n</tr>\n<tr>\n<td>JsonPipe</td>\n<td>非纯管道</td>\n<td>将输入数据对象经过JSON.stringify()方法转换后输出对象的字符串</td>\n</tr>\n<tr>\n<td>UpperCasePipe</td>\n<td>纯管道</td>\n<td>将文本所有小写字母转换成大写字母</td>\n</tr>\n<tr>\n<td>LowerCasePipe</td>\n<td>纯管道</td>\n<td>将文本所有大写字母转换成小写字母</td>\n</tr>\n<tr>\n<td>DecimalPipe</td>\n<td>纯管道</td>\n<td>将数值按特定的格式显示文本</td>\n</tr>\n<tr>\n<td>CurrentcyPipe</td>\n<td>纯管道</td>\n<td>将数值转百分比格式</td>\n</tr>\n<tr>\n<td>SlicePipe</td>\n<td>非纯管道</td>\n<td>将数组或者字符串裁剪成新子集</td>\n</tr>\n</tbody>\n</table>"},{"title":"Angular5 表单","date":"2016-05-20T16:00:00.000Z","_content":"# 模板式验证\n\n我们把HTML表单控件（比如``<input>``和``<select>``）放进组件模板中，并用ngModel等指令把它们绑定到组件中数据模型的属性上。\n\n不用自己创建Angular表单控件对象。Angular指令会使用数据绑定中的信息创建它们。 我们不用自己推送和拉取数据。Angular使用ngModel来替你管理它们。 当用户做出修改时，Angular会据此更新可变的数据模型。\n<!-- more -->\n利用双向绑定，模板引用值，当name为invalid时，表单提示将会出现。对于数据的控制都放在模板内，可用的属性可能包括：required,minLength等。\n``` html\n{{diagnostic}}\n<div class=\"form-group\">\n  <label for=\"name\">Name</label>\n<input type=\"text\" class=\"form-control\" required [(ngModel)]=\"model.name\" name=\"name\" #name=\"ngModel\">\n<div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n  Name is required\n</div>\n</div>\n\n<div class=\"form-group\">\n  <label for=\"alterEgo\">Alter Ego</label>\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"model.alterEgo\" miniLength=\"3\" name=\"alterEgo\" #alterEgo>\n</div>\n<div *ngIf=\"alterEgo.errors?.miniLength\" class=\"alert alert-danger\">Should be at least 3 characters</div>\n\n<div class=\"form-group\">\n  <label for=\"power\">Hero Power</label>\n  <select class=\"form-control required\" [(ngModel)]=\"model.power\" name=\"power\">\n    <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{pow}}</option>\n  </select>\n</div>\n```\n# 响应式验证\n\n把对表单的控制都放在组件一侧，统一控制，不在模板内进行处理。\n``` typescript\n\nconstructor(private fb: FormBuilder) {}\n\nngOnInit(): void {\n  this.heroForm = this.fb.FormGroup({\n    'name': new FormControl(this.hero.name, [\n      Validators.required,\n      Validators.minLength(4),\n      forbiddenNameValidator(/bob/i)\n    ]),\n    'alterEgo': new FormControl(this.hero.alterEgo),\n    'power': new FormControl(this.hero.power, Validators.required)\n  });\n}\n\nget name() { return this.heroForm.get('name'); }\n\nget power() { return this.heroForm.get('power'); }\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n```","source":"_posts/Angular5 表单.md","raw":"---\ntitle: Angular5 表单\ndate: 2016-5-21\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- angular\n---\n# 模板式验证\n\n我们把HTML表单控件（比如``<input>``和``<select>``）放进组件模板中，并用ngModel等指令把它们绑定到组件中数据模型的属性上。\n\n不用自己创建Angular表单控件对象。Angular指令会使用数据绑定中的信息创建它们。 我们不用自己推送和拉取数据。Angular使用ngModel来替你管理它们。 当用户做出修改时，Angular会据此更新可变的数据模型。\n<!-- more -->\n利用双向绑定，模板引用值，当name为invalid时，表单提示将会出现。对于数据的控制都放在模板内，可用的属性可能包括：required,minLength等。\n``` html\n{{diagnostic}}\n<div class=\"form-group\">\n  <label for=\"name\">Name</label>\n<input type=\"text\" class=\"form-control\" required [(ngModel)]=\"model.name\" name=\"name\" #name=\"ngModel\">\n<div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n  Name is required\n</div>\n</div>\n\n<div class=\"form-group\">\n  <label for=\"alterEgo\">Alter Ego</label>\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"model.alterEgo\" miniLength=\"3\" name=\"alterEgo\" #alterEgo>\n</div>\n<div *ngIf=\"alterEgo.errors?.miniLength\" class=\"alert alert-danger\">Should be at least 3 characters</div>\n\n<div class=\"form-group\">\n  <label for=\"power\">Hero Power</label>\n  <select class=\"form-control required\" [(ngModel)]=\"model.power\" name=\"power\">\n    <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{pow}}</option>\n  </select>\n</div>\n```\n# 响应式验证\n\n把对表单的控制都放在组件一侧，统一控制，不在模板内进行处理。\n``` typescript\n\nconstructor(private fb: FormBuilder) {}\n\nngOnInit(): void {\n  this.heroForm = this.fb.FormGroup({\n    'name': new FormControl(this.hero.name, [\n      Validators.required,\n      Validators.minLength(4),\n      forbiddenNameValidator(/bob/i)\n    ]),\n    'alterEgo': new FormControl(this.hero.alterEgo),\n    'power': new FormControl(this.hero.power, Validators.required)\n  });\n}\n\nget name() { return this.heroForm.get('name'); }\n\nget power() { return this.heroForm.get('power'); }\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n```","slug":"Angular5 表单","published":1,"updated":"2019-04-08T05:38:12.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25g0005h0urzu0g58jz","content":"<h1 id=\"模板式验证\"><a href=\"#模板式验证\" class=\"headerlink\" title=\"模板式验证\"></a>模板式验证</h1><p>我们把HTML表单控件（比如<code>&lt;input&gt;</code>和<code>&lt;select&gt;</code>）放进组件模板中，并用ngModel等指令把它们绑定到组件中数据模型的属性上。</p>\n<p>不用自己创建Angular表单控件对象。Angular指令会使用数据绑定中的信息创建它们。 我们不用自己推送和拉取数据。Angular使用ngModel来替你管理它们。 当用户做出修改时，Angular会据此更新可变的数据模型。<br><a id=\"more\"></a><br>利用双向绑定，模板引用值，当name为invalid时，表单提示将会出现。对于数据的控制都放在模板内，可用的属性可能包括：required,minLength等。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;diagnostic&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">required</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> #<span class=\"attr\">name</span>=<span class=\"string\">\"ngModel\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"name.valid || name.pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-danger\"</span>&gt;</span></span><br><span class=\"line\">  Name is required</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"alterEgo\"</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.alterEgo\"</span> <span class=\"attr\">miniLength</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"alterEgo\"</span> #<span class=\"attr\">alterEgo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"alterEgo.errors?.miniLength\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-danger\"</span>&gt;</span>Should be at least 3 characters<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"power\"</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control required\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.power\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"power\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let pow of powers\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"pow\"</span>&gt;</span>&#123;&#123;pow&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"响应式验证\"><a href=\"#响应式验证\" class=\"headerlink\" title=\"响应式验证\"></a>响应式验证</h1><p>把对表单的控制都放在组件一侧，统一控制，不在模板内进行处理。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.heroForm = <span class=\"keyword\">this</span>.fb.FormGroup(&#123;</span><br><span class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.name, [</span><br><span class=\"line\">      Validators.required,</span><br><span class=\"line\">      Validators.minLength(<span class=\"number\">4</span>),</span><br><span class=\"line\">      forbiddenNameValidator(<span class=\"regexp\">/bob/i</span>)</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    <span class=\"string\">'alterEgo'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.alterEgo),</span><br><span class=\"line\">    <span class=\"string\">'power'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.power, Validators.required)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> name() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.heroForm.get(<span class=\"string\">'name'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> power() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.heroForm.get(<span class=\"string\">'power'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forbiddenNameValidator</span>(<span class=\"params\">nameRe: <span class=\"built_in\">RegExp</span></span>): <span class=\"title\">ValidatorFn</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (control: AbstractControl): &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>&#125; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forbidden = nameRe.test(control.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forbidden ? &#123;<span class=\"string\">'forbiddenName'</span>: &#123;value: control.value&#125;&#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"模板式验证\"><a href=\"#模板式验证\" class=\"headerlink\" title=\"模板式验证\"></a>模板式验证</h1><p>我们把HTML表单控件（比如<code>&lt;input&gt;</code>和<code>&lt;select&gt;</code>）放进组件模板中，并用ngModel等指令把它们绑定到组件中数据模型的属性上。</p>\n<p>不用自己创建Angular表单控件对象。Angular指令会使用数据绑定中的信息创建它们。 我们不用自己推送和拉取数据。Angular使用ngModel来替你管理它们。 当用户做出修改时，Angular会据此更新可变的数据模型。<br>","more":"<br>利用双向绑定，模板引用值，当name为invalid时，表单提示将会出现。对于数据的控制都放在模板内，可用的属性可能包括：required,minLength等。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;diagnostic&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">required</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> #<span class=\"attr\">name</span>=<span class=\"string\">\"ngModel\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"name.valid || name.pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-danger\"</span>&gt;</span></span><br><span class=\"line\">  Name is required</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"alterEgo\"</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.alterEgo\"</span> <span class=\"attr\">miniLength</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"alterEgo\"</span> #<span class=\"attr\">alterEgo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"alterEgo.errors?.miniLength\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-danger\"</span>&gt;</span>Should be at least 3 characters<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"power\"</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control required\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"model.power\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"power\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let pow of powers\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"pow\"</span>&gt;</span>&#123;&#123;pow&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"响应式验证\"><a href=\"#响应式验证\" class=\"headerlink\" title=\"响应式验证\"></a>响应式验证</h1><p>把对表单的控制都放在组件一侧，统一控制，不在模板内进行处理。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.heroForm = <span class=\"keyword\">this</span>.fb.FormGroup(&#123;</span><br><span class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.name, [</span><br><span class=\"line\">      Validators.required,</span><br><span class=\"line\">      Validators.minLength(<span class=\"number\">4</span>),</span><br><span class=\"line\">      forbiddenNameValidator(<span class=\"regexp\">/bob/i</span>)</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    <span class=\"string\">'alterEgo'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.alterEgo),</span><br><span class=\"line\">    <span class=\"string\">'power'</span>: <span class=\"keyword\">new</span> FormControl(<span class=\"keyword\">this</span>.hero.power, Validators.required)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> name() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.heroForm.get(<span class=\"string\">'name'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> power() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.heroForm.get(<span class=\"string\">'power'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forbiddenNameValidator</span>(<span class=\"params\">nameRe: <span class=\"built_in\">RegExp</span></span>): <span class=\"title\">ValidatorFn</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (control: AbstractControl): &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>&#125; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forbidden = nameRe.test(control.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forbidden ? &#123;<span class=\"string\">'forbiddenName'</span>: &#123;value: control.value&#125;&#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"CSS居中","date":"2016-02-04T16:00:00.000Z","_content":"\n# 水平居中\n## 块级元素（宽度固定）\n有宽度的前提下，可以设置这个块级元素的左右margin为auto来实现水平居中。\n\n<!-- more -->\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n</style>\n<div class=\"container\">\n<div style=\"height:200px;width:200px;margin-left:auto;margin-right:auto;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n另外，可以利用绝对定位来实现水平居中。首先``left:50%``，然后再``margin``到元素宽度一半的地方。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n</style>\n<div class=\"container\">\n<div style=\"position:absolute;left:50%;margin-left:-100px;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n{% asset_img 1.png 块级元素水平居中 %}\n## 块级元素（宽度不定）\n没有指定宽度时，可以通过``translateX``属性来实现。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.inner{\nposition:absolute;\nleft:50%;\ntransform: translateX(-50%);\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。\n</div>\n</div>\n</body>\n</html>\n```\n{% asset_img 2.png 块级元素水平居中（宽度未定） %}\n## 行内元素\n块级元素可以通过设置``display:inline-block``来转换成行内元素来达到相同的效果。\n设置父容器的``text-align``为``center``即可实现行内元素居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  text-align:center;\n}\n</style>\n<div class=\"container\">\n\n<span style=\"background-color:red\">水平居中或者说水平垂直居中的方案很多种,但在实际当中,不一定.....</span>\n</div>\n</body>\n</html>\n```\n{% asset_img 3.png 行内元素水平居中（宽度未定）%}\n## flex布局\n设置父容器的flex布局即可实现各类元素水平居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  display:flex;\n  justify-content: center;\n}\n</style>\n<div class=\"container\">\n<div style=\"height:200px;width:200px;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n\n# 垂直居中\n## 行内元素\ninline 元素的行高与``inline-height``相等，则中间内容居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\nheight:300px;\n}\n.inner{\nline-height:300px;\n}\n</style>\n<div class=\"container\">\n<span class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</span>\n</div>\n</body>\n</html>\n```\n可以利用inline元素的 CSS 属性 ``vertical-align``，将其设置为 middle，父容器设置为``display:table``。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\ndisplay:table;\nheight:300px;\n}\n.inner{\ndisplay:table-cell;\n vertical-align:middle;\n\n}\n</style>\n<div class=\"container\">\n<span class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</span>\n</div>\n</body>\n</html>\n```\n{% asset_img 4.png 行内元素垂直居中 %}\n## 块级元素(知道高度)\n有高度的前提下，可以设置这个块级元素的绝对定位实现垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n.inner{\nposition:absolute;\nheight:100px;\ntop:50%;\nmargin-top: -50px;\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</div>\n</div>\n</body>\n</html>\n```\n## 块级元素（高度未知）\n不知道高度时，与水平对齐同理，可以使用``translateY``来实现垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n.inner{\nposition:absolute;\ntop:50%;\ntranform:translateY(-50%);\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。\n</div>\n</div>\n</body>\n</html>\n```\n{% asset_img 5.png 块级元素垂直居中（高度未知） %}\n## flex布局\n设置父容器的flex布局即可实现各类元素垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  height:300px;\n  display:flex;\n  align-items: center;\n}\n</style>\n<div class=\"container\">\n<div>这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</div>\n</div>\n</body>\n</html>\n```\n","source":"_posts/CSS居中.md","raw":"---\ntitle: CSS居中\ndate: 2016-2-5\ncategories:\n- 前端\n- CSS\ntags:\n- 前端\n- CSS\n---\n\n# 水平居中\n## 块级元素（宽度固定）\n有宽度的前提下，可以设置这个块级元素的左右margin为auto来实现水平居中。\n\n<!-- more -->\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n</style>\n<div class=\"container\">\n<div style=\"height:200px;width:200px;margin-left:auto;margin-right:auto;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n另外，可以利用绝对定位来实现水平居中。首先``left:50%``，然后再``margin``到元素宽度一半的地方。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n</style>\n<div class=\"container\">\n<div style=\"position:absolute;left:50%;margin-left:-100px;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n{% asset_img 1.png 块级元素水平居中 %}\n## 块级元素（宽度不定）\n没有指定宽度时，可以通过``translateX``属性来实现。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.inner{\nposition:absolute;\nleft:50%;\ntransform: translateX(-50%);\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。\n</div>\n</div>\n</body>\n</html>\n```\n{% asset_img 2.png 块级元素水平居中（宽度未定） %}\n## 行内元素\n块级元素可以通过设置``display:inline-block``来转换成行内元素来达到相同的效果。\n设置父容器的``text-align``为``center``即可实现行内元素居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  text-align:center;\n}\n</style>\n<div class=\"container\">\n\n<span style=\"background-color:red\">水平居中或者说水平垂直居中的方案很多种,但在实际当中,不一定.....</span>\n</div>\n</body>\n</html>\n```\n{% asset_img 3.png 行内元素水平居中（宽度未定）%}\n## flex布局\n设置父容器的flex布局即可实现各类元素水平居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  display:flex;\n  justify-content: center;\n}\n</style>\n<div class=\"container\">\n<div style=\"height:200px;width:200px;background-color:red\"></div>\n</div>\n</body>\n</html>\n```\n\n# 垂直居中\n## 行内元素\ninline 元素的行高与``inline-height``相等，则中间内容居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\nheight:300px;\n}\n.inner{\nline-height:300px;\n}\n</style>\n<div class=\"container\">\n<span class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</span>\n</div>\n</body>\n</html>\n```\n可以利用inline元素的 CSS 属性 ``vertical-align``，将其设置为 middle，父容器设置为``display:table``。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\ndisplay:table;\nheight:300px;\n}\n.inner{\ndisplay:table-cell;\n vertical-align:middle;\n\n}\n</style>\n<div class=\"container\">\n<span class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</span>\n</div>\n</body>\n</html>\n```\n{% asset_img 4.png 行内元素垂直居中 %}\n## 块级元素(知道高度)\n有高度的前提下，可以设置这个块级元素的绝对定位实现垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n.inner{\nposition:absolute;\nheight:100px;\ntop:50%;\nmargin-top: -50px;\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致\n</div>\n</div>\n</body>\n</html>\n```\n## 块级元素（高度未知）\n不知道高度时，与水平对齐同理，可以使用``translateY``来实现垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n\n}\n.inner{\nposition:absolute;\ntop:50%;\ntranform:translateY(-50%);\n}\n</style>\n<div class=\"container\">\n<div class=\"inner\">\n这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。\n</div>\n</div>\n</body>\n</html>\n```\n{% asset_img 5.png 块级元素垂直居中（高度未知） %}\n## flex布局\n设置父容器的flex布局即可实现各类元素垂直居中。\n``` html\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  height:300px;\n  display:flex;\n  align-items: center;\n}\n</style>\n<div class=\"container\">\n<div>这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</div>\n</div>\n</body>\n</html>\n```\n","slug":"CSS居中","published":1,"updated":"2019-04-08T05:28:18.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25h0006h0ur5tpno0q1","content":"<h1 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h1><h2 id=\"块级元素（宽度固定）\"><a href=\"#块级元素（宽度固定）\" class=\"headerlink\" title=\"块级元素（宽度固定）\"></a>块级元素（宽度固定）</h2><p>有宽度的前提下，可以设置这个块级元素的左右margin为auto来实现水平居中。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:200px;width:200px;margin-left:auto;margin-right:auto;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>另外，可以利用绝对定位来实现水平居中。首先<code>left:50%</code>，然后再<code>margin</code>到元素宽度一半的地方。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;left:50%;margin-left:-100px;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/1.png\" title=\"块级元素水平居中\">\n<h2 id=\"块级元素（宽度不定）\"><a href=\"#块级元素（宽度不定）\" class=\"headerlink\" title=\"块级元素（宽度不定）\"></a>块级元素（宽度不定）</h2><p>没有指定宽度时，可以通过<code>translateX</code>属性来实现。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">left:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">transform: translateX(-50%);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/2.png\" title=\"块级元素水平居中（宽度未定）\">\n<h2 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h2><p>块级元素可以通过设置<code>display:inline-block</code>来转换成行内元素来达到相同的效果。<br>设置父容器的<code>text-align</code>为<code>center</code>即可实现行内元素居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  text-align:center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color:red\"</span>&gt;</span>水平居中或者说水平垂直居中的方案很多种,但在实际当中,不一定.....<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/3.png\" title=\"行内元素水平居中（宽度未定）\">\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>设置父容器的flex布局即可实现各类元素水平居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  display:flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:200px;width:200px;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h1><h2 id=\"行内元素-1\"><a href=\"#行内元素-1\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h2><p>inline 元素的行高与<code>inline-height</code>相等，则中间内容居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">line-height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以利用inline元素的 CSS 属性 <code>vertical-align</code>，将其设置为 middle，父容器设置为<code>display:table</code>。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">display:table;</span></span><br><span class=\"line\"><span class=\"undefined\">height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">display:table-cell;</span></span><br><span class=\"line\"><span class=\"undefined\"> vertical-align:middle;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/4.png\" title=\"行内元素垂直居中\">\n<h2 id=\"块级元素-知道高度\"><a href=\"#块级元素-知道高度\" class=\"headerlink\" title=\"块级元素(知道高度)\"></a>块级元素(知道高度)</h2><p>有高度的前提下，可以设置这个块级元素的绝对定位实现垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">height:100px;</span></span><br><span class=\"line\"><span class=\"undefined\">top:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">margin-top: -50px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"块级元素（高度未知）\"><a href=\"#块级元素（高度未知）\" class=\"headerlink\" title=\"块级元素（高度未知）\"></a>块级元素（高度未知）</h2><p>不知道高度时，与水平对齐同理，可以使用<code>translateY</code>来实现垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">top:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">tranform:translateY(-50%);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/5.png\" title=\"块级元素垂直居中（高度未知）\">\n<h2 id=\"flex布局-1\"><a href=\"#flex布局-1\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>设置父容器的flex布局即可实现各类元素垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">  display:flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h1><h2 id=\"块级元素（宽度固定）\"><a href=\"#块级元素（宽度固定）\" class=\"headerlink\" title=\"块级元素（宽度固定）\"></a>块级元素（宽度固定）</h2><p>有宽度的前提下，可以设置这个块级元素的左右margin为auto来实现水平居中。</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:200px;width:200px;margin-left:auto;margin-right:auto;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>另外，可以利用绝对定位来实现水平居中。首先<code>left:50%</code>，然后再<code>margin</code>到元素宽度一半的地方。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;left:50%;margin-left:-100px;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/1.png\" title=\"块级元素水平居中\">\n<h2 id=\"块级元素（宽度不定）\"><a href=\"#块级元素（宽度不定）\" class=\"headerlink\" title=\"块级元素（宽度不定）\"></a>块级元素（宽度不定）</h2><p>没有指定宽度时，可以通过<code>translateX</code>属性来实现。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">left:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">transform: translateX(-50%);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/2.png\" title=\"块级元素水平居中（宽度未定）\">\n<h2 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h2><p>块级元素可以通过设置<code>display:inline-block</code>来转换成行内元素来达到相同的效果。<br>设置父容器的<code>text-align</code>为<code>center</code>即可实现行内元素居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  text-align:center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color:red\"</span>&gt;</span>水平居中或者说水平垂直居中的方案很多种,但在实际当中,不一定.....<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/3.png\" title=\"行内元素水平居中（宽度未定）\">\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>设置父容器的flex布局即可实现各类元素水平居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  display:flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:200px;width:200px;background-color:red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h1><h2 id=\"行内元素-1\"><a href=\"#行内元素-1\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h2><p>inline 元素的行高与<code>inline-height</code>相等，则中间内容居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">line-height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以利用inline元素的 CSS 属性 <code>vertical-align</code>，将其设置为 middle，父容器设置为<code>display:table</code>。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">display:table;</span></span><br><span class=\"line\"><span class=\"undefined\">height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">display:table-cell;</span></span><br><span class=\"line\"><span class=\"undefined\"> vertical-align:middle;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/4.png\" title=\"行内元素垂直居中\">\n<h2 id=\"块级元素-知道高度\"><a href=\"#块级元素-知道高度\" class=\"headerlink\" title=\"块级元素(知道高度)\"></a>块级元素(知道高度)</h2><p>有高度的前提下，可以设置这个块级元素的绝对定位实现垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">height:100px;</span></span><br><span class=\"line\"><span class=\"undefined\">top:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">margin-top: -50px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"块级元素（高度未知）\"><a href=\"#块级元素（高度未知）\" class=\"headerlink\" title=\"块级元素（高度未知）\"></a>块级元素（高度未知）</h2><p>不知道高度时，与水平对齐同理，可以使用<code>translateY</code>来实现垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">position:absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">top:50%;</span></span><br><span class=\"line\"><span class=\"undefined\">tranform:translateY(-50%);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致，所以会出现一些兼容性的问题，只有当已知用户浏览器时才推荐使用。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<img src=\"/2016/02/05/CSS居中/5.png\" title=\"块级元素垂直居中（高度未知）\">\n<h2 id=\"flex布局-1\"><a href=\"#flex布局-1\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>设置父容器的flex布局即可实现各类元素垂直居中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  height:300px;</span></span><br><span class=\"line\"><span class=\"undefined\">  display:flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这种方法是最不推荐的方法，因为transform属性在各个浏览器中的表现行为不一致<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>"},{"title":"CSS清除浮动","date":"2016-02-01T16:00:00.000Z","_content":"首先定义如下几个div。\n``` HTML\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  border: 1px solid #c5c5c5;\n}\n</style>\n<div class=\"container clearfix\">\n<div id=\"first\" style=\"width:100px;height:100px;background-color:yellow;float:left;\"></div>\n<div style=\"width:100px;height:200px;background-color:red;float:left\"></div>\n</div>\n</body>\n</html>\n```\n<!-- more -->\n此时可以发现，两个``div``元素行内对齐排列，加了浮动之后的元素脱离了标准流，所以父容器出现了高度塌陷。\n{% asset_img 1.jpg 图1 %}\n清除浮动的方法有以下几个：\n- 增加一个空的``div``元素\n``` html\n<div style=\"clear:both\"></div>\n```\n{% asset_img 2.jpg 图2 %}\n- 为父级元素增加``overflow:hidden``属性。\n``` css\n.container{\n  border: 1px solid #c5c5c5;\n  overflow: hidden;\n}\n```\n{% asset_img 3.jpg 图3 %}\n- 为父级元素增加伪元素。\n``` css\n.clearfix:before,\n.clearfix:after {\n    display: table;\n    content: \" \";\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix{\n    *zoom: 1;\n}\n```\n{% asset_img 4.jpg 图4 %}","source":"_posts/CSS清除浮动.md","raw":"---\ntitle: CSS清除浮动\ndate: 2016-2-2\ncategories:\n- 前端\n- CSS\ntags:\n- 前端\n- CSS\n---\n首先定义如下几个div。\n``` HTML\n<!DOCTYPE HTML>\n<html>\n<body>\n<style>\n.container{\n  border: 1px solid #c5c5c5;\n}\n</style>\n<div class=\"container clearfix\">\n<div id=\"first\" style=\"width:100px;height:100px;background-color:yellow;float:left;\"></div>\n<div style=\"width:100px;height:200px;background-color:red;float:left\"></div>\n</div>\n</body>\n</html>\n```\n<!-- more -->\n此时可以发现，两个``div``元素行内对齐排列，加了浮动之后的元素脱离了标准流，所以父容器出现了高度塌陷。\n{% asset_img 1.jpg 图1 %}\n清除浮动的方法有以下几个：\n- 增加一个空的``div``元素\n``` html\n<div style=\"clear:both\"></div>\n```\n{% asset_img 2.jpg 图2 %}\n- 为父级元素增加``overflow:hidden``属性。\n``` css\n.container{\n  border: 1px solid #c5c5c5;\n  overflow: hidden;\n}\n```\n{% asset_img 3.jpg 图3 %}\n- 为父级元素增加伪元素。\n``` css\n.clearfix:before,\n.clearfix:after {\n    display: table;\n    content: \" \";\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix{\n    *zoom: 1;\n}\n```\n{% asset_img 4.jpg 图4 %}","slug":"CSS清除浮动","published":1,"updated":"2019-04-08T05:37:13.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25k0009h0urk5vbuejl","content":"<p>首先定义如下几个div。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: 1px solid #c5c5c5;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container clearfix\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"first\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:100px;background-color:yellow;float:left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:200px;background-color:red;float:left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>此时可以发现，两个<code>div</code>元素行内对齐排列，加了浮动之后的元素脱离了标准流，所以父容器出现了高度塌陷。<br><img src=\"/2016/02/02/CSS清除浮动/1.jpg\" title=\"图1\"><br>清除浮动的方法有以下几个：</p>\n<ul>\n<li>增加一个空的<code>div</code>元素<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear:both\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<img src=\"/2016/02/02/CSS清除浮动/2.jpg\" title=\"图2\">\n<ul>\n<li>为父级元素增加<code>overflow:hidden</code>属性。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#c5c5c5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<img src=\"/2016/02/02/CSS清除浮动/3.jpg\" title=\"图3\">\n<ul>\n<li>为父级元素增加伪元素。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<img src=\"/2016/02/02/CSS清除浮动/4.jpg\" title=\"图4\">","site":{"data":{}},"excerpt":"<p>首先定义如下几个div。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.container&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: 1px solid #c5c5c5;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container clearfix\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"first\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:100px;background-color:yellow;float:left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:200px;background-color:red;float:left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>","more":"<p>此时可以发现，两个<code>div</code>元素行内对齐排列，加了浮动之后的元素脱离了标准流，所以父容器出现了高度塌陷。<br><img src=\"/2016/02/02/CSS清除浮动/1.jpg\" title=\"图1\"><br>清除浮动的方法有以下几个：</p>\n<ul>\n<li>增加一个空的<code>div</code>元素<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear:both\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<img src=\"/2016/02/02/CSS清除浮动/2.jpg\" title=\"图2\">\n<ul>\n<li>为父级元素增加<code>overflow:hidden</code>属性。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#c5c5c5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<img src=\"/2016/02/02/CSS清除浮动/3.jpg\" title=\"图3\">\n<ul>\n<li>为父级元素增加伪元素。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<img src=\"/2016/02/02/CSS清除浮动/4.jpg\" title=\"图4\">"},{"title":"ES6中Object密封API-Object.preventExtensions,Object.seal,Object.freeze","date":"2016-05-13T16:00:00.000Z","_content":"## Object.preventExtensions\n可以使得一个对象无法添加新属性，但是可以改变原来的属性\n- 用法\n``` javascript\nlet obj = {foo: 'bar'};\nObject.preventExtensions(obj);\nobj.name = 'test';\n// undefined，严格模式下报错\nconsole.log(obj.test);\n```\n<!-- more -->\n另外，Object.isExtensible() 方法可以判断一个对象是否是可扩展的。\n## Object.seal\n密封一个对象是让一个对象不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值。\n- 用法\n``` javascript\n'use strict';\nlet obj = {};\nObject.defineProperty(obj, 'foo', {writable: true});\nlet o = Object.seal(obj);\no.key = 'fff'; // 增加新属性报错\no.foo = 'fff'; // 修改既有属性的值\ndelete o.foo; // 删除既有属性报错\nObject.defineProperty(obj, 'foo', {writable: false}); // TODO: writable，configurable从true改成false可以，但是不能反过来\n```\n另外，Object.isSealed() 方法可以判断一个对象是否是被冻结的。\n## Object.freeze\n- 用法\n\nObject.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。\n``` javascript\nlet obj = {};\nObject.defineProperty(obj, 'foo', {writable: true});\nlet o = Object.freeze(obj);\no.key = 'fff'; // 增加新属性报错\no.foo = 'fff'; // 修改既有属性的值\ndelete o.foo; // 删除既有属性报错\nObject.defineProperty(obj, 'foo', {writable: false}); // TODO: writable，configurable从true改成false可以，但是不能反过来\n```\n\n\n","source":"_posts/ES6中Object密封API-Object.preventExtensions,Object.seal,Object.freeze.md","raw":"---\ntitle: ES6中Object密封API-Object.preventExtensions,Object.seal,Object.freeze\ndate: 2016-5-14\ncategories:\n- 前端\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n---\n## Object.preventExtensions\n可以使得一个对象无法添加新属性，但是可以改变原来的属性\n- 用法\n``` javascript\nlet obj = {foo: 'bar'};\nObject.preventExtensions(obj);\nobj.name = 'test';\n// undefined，严格模式下报错\nconsole.log(obj.test);\n```\n<!-- more -->\n另外，Object.isExtensible() 方法可以判断一个对象是否是可扩展的。\n## Object.seal\n密封一个对象是让一个对象不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值。\n- 用法\n``` javascript\n'use strict';\nlet obj = {};\nObject.defineProperty(obj, 'foo', {writable: true});\nlet o = Object.seal(obj);\no.key = 'fff'; // 增加新属性报错\no.foo = 'fff'; // 修改既有属性的值\ndelete o.foo; // 删除既有属性报错\nObject.defineProperty(obj, 'foo', {writable: false}); // TODO: writable，configurable从true改成false可以，但是不能反过来\n```\n另外，Object.isSealed() 方法可以判断一个对象是否是被冻结的。\n## Object.freeze\n- 用法\n\nObject.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。\n``` javascript\nlet obj = {};\nObject.defineProperty(obj, 'foo', {writable: true});\nlet o = Object.freeze(obj);\no.key = 'fff'; // 增加新属性报错\no.foo = 'fff'; // 修改既有属性的值\ndelete o.foo; // 删除既有属性报错\nObject.defineProperty(obj, 'foo', {writable: false}); // TODO: writable，configurable从true改成false可以，但是不能反过来\n```\n\n\n","slug":"ES6中Object密封API-Object.preventExtensions,Object.seal,Object.freeze","published":1,"updated":"2019-04-08T05:37:40.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25l000ah0ur3id2gw8g","content":"<h2 id=\"Object-preventExtensions\"><a href=\"#Object-preventExtensions\" class=\"headerlink\" title=\"Object.preventExtensions\"></a>Object.preventExtensions</h2><p>可以使得一个对象无法添加新属性，但是可以改变原来的属性</p>\n<ul>\n<li>用法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(obj);</span><br><span class=\"line\">obj.name = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"><span class=\"comment\">// undefined，严格模式下报错</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.test);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>另外，Object.isExtensible() 方法可以判断一个对象是否是可扩展的。</p>\n<h2 id=\"Object-seal\"><a href=\"#Object-seal\" class=\"headerlink\" title=\"Object.seal\"></a>Object.seal</h2><p>密封一个对象是让一个对象不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值。</p>\n<ul>\n<li>用法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"built_in\">Object</span>.seal(obj);</span><br><span class=\"line\">o.key = <span class=\"string\">'fff'</span>; <span class=\"comment\">// 增加新属性报错</span></span><br><span class=\"line\">o.foo = <span class=\"string\">'fff'</span>; <span class=\"comment\">// 修改既有属性的值</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> o.foo; <span class=\"comment\">// 删除既有属性报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">false</span>&#125;); <span class=\"comment\">// <span class=\"doctag\">TODO:</span> writable，configurable从true改成false可以，但是不能反过来</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外，Object.isSealed() 方法可以判断一个对象是否是被冻结的。</p>\n<h2 id=\"Object-freeze\"><a href=\"#Object-freeze\" class=\"headerlink\" title=\"Object.freeze\"></a>Object.freeze</h2><ul>\n<li>用法</li>\n</ul>\n<p>Object.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">o.key = <span class=\"string\">'fff'</span>; <span class=\"comment\">// 增加新属性报错</span></span><br><span class=\"line\">o.foo = <span class=\"string\">'fff'</span>; <span class=\"comment\">// 修改既有属性的值</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> o.foo; <span class=\"comment\">// 删除既有属性报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">false</span>&#125;); <span class=\"comment\">// <span class=\"doctag\">TODO:</span> writable，configurable从true改成false可以，但是不能反过来</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Object-preventExtensions\"><a href=\"#Object-preventExtensions\" class=\"headerlink\" title=\"Object.preventExtensions\"></a>Object.preventExtensions</h2><p>可以使得一个对象无法添加新属性，但是可以改变原来的属性</p>\n<ul>\n<li>用法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(obj);</span><br><span class=\"line\">obj.name = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"><span class=\"comment\">// undefined，严格模式下报错</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.test);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<p>另外，Object.isExtensible() 方法可以判断一个对象是否是可扩展的。</p>\n<h2 id=\"Object-seal\"><a href=\"#Object-seal\" class=\"headerlink\" title=\"Object.seal\"></a>Object.seal</h2><p>密封一个对象是让一个对象不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值。</p>\n<ul>\n<li>用法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"built_in\">Object</span>.seal(obj);</span><br><span class=\"line\">o.key = <span class=\"string\">'fff'</span>; <span class=\"comment\">// 增加新属性报错</span></span><br><span class=\"line\">o.foo = <span class=\"string\">'fff'</span>; <span class=\"comment\">// 修改既有属性的值</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> o.foo; <span class=\"comment\">// 删除既有属性报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">false</span>&#125;); <span class=\"comment\">// <span class=\"doctag\">TODO:</span> writable，configurable从true改成false可以，但是不能反过来</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外，Object.isSealed() 方法可以判断一个对象是否是被冻结的。</p>\n<h2 id=\"Object-freeze\"><a href=\"#Object-freeze\" class=\"headerlink\" title=\"Object.freeze\"></a>Object.freeze</h2><ul>\n<li>用法</li>\n</ul>\n<p>Object.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">o.key = <span class=\"string\">'fff'</span>; <span class=\"comment\">// 增加新属性报错</span></span><br><span class=\"line\">o.foo = <span class=\"string\">'fff'</span>; <span class=\"comment\">// 修改既有属性的值</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> o.foo; <span class=\"comment\">// 删除既有属性报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">false</span>&#125;); <span class=\"comment\">// <span class=\"doctag\">TODO:</span> writable，configurable从true改成false可以，但是不能反过来</span></span><br></pre></td></tr></table></figure></p>"},{"title":"ES6中Object常用API-Object.assign,Object.create,Object.defineProperty","date":"2016-05-09T16:00:00.000Z","_content":"## Object.assign(target, ...sources)\n如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。`String`类型和`Symbol`类型的属性都会被拷贝。`Object.assign` 会跳过那些值为`null`或`undefined`的源对象。\n- 用法：\n``` javascript\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, 注意目标对象自身也会改变。\n```\n\n<!-- more -->\n- 避免浅拷贝\n\n`Object.assign()`拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。\n``` javascript\nlet obj1 = { a: 0 , b: { c: 0}};\nlet obj2 = Object.assign({}, obj1);\n\nobj1.a = 1;\nobj1.b.c = 1;\nconsole.log(obj2) // {a:0, b: {c:1}}\n```\n如果要进行深度克隆，就要先创建一个源对象的副本，再进行assign。\n最简单的写法可能是这样：\n``` javascript\nfunction clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n```\n\n- ployfill\n\n根据emca-262规范内对assign过程的描述，可以对这个方法进行ployfill。\n1. Let to be ? ToObject(target).\n2. If only one argument was passed, return to.\n3. Let sources be the List of argument values starting with the second argument.\n4. For each element nextSource of sources, in ascending index order, do\n   1. If nextSource is undefined or null, let keys be a new empty List.\n   2. Else,\n      1. Let from be ! ToObject(nextSource).\n      2. Let keys be ? from.[[OwnPropertyKeys]]().\n5. For each element nextKey of keys in List order, do\n   1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n   2. If desc is not undefined and desc.[[Enumerable]] is true, then\n      1. Let propValue be ? Get(from, nextKey).\n      2. Perform ? Set(to, nextKey, propValue, true).\n6. Return to.\n\n``` javascript\n// 省略前面的对source的判断\n// function写法\nObject.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    return target;\n};\n\n// defineProperty写法\nObject.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {\n      if (target == null) { // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {\n          for (var nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n```\n\n## Object.create(proto, propertiesObject)\n- 用法\n使用`Object.create`可以很方便的解决继承问题，也可以用`extends`语法糖解决。\n``` javascript\nlet Parent = {\n    sayWord: function() {\n        return this.word;\n    }\n}\nlet child = Object.create(Parent, {\n    word: { \n        value: \"foo\",\n        // writable: true,\n        // configurable: true,\n        // enumerable: true\n        // set\n        // get\n    }\n});\nconsole.log(child); // {word: foo}/__proto__.sayWord()\nconsole.log(child.sayWord()); // foo\n```\n- ployfill\n1. If internalSlotsList is not present, set internalSlotsList to a new empty List.\n2. Let obj be a newly created object with an internal slot for each name in internalSlotsList.\n3. Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.\n4. Set obj.[[Prototype]] to proto.\n5. Set obj.[[Extensible]] to true.\n6. Return obj.\n``` javascript\n// 来自MDN\nif (typeof Object.create !== \"function\") {\n    Object.create = function (proto, propertiesObject) {\n        if (typeof proto !== 'object' && typeof proto !== 'function') {\n            throw new TypeError('Object prototype may only be an Object: ' + proto);\n        } else if (proto === null) {\n            throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\");\n        }\n\n        if (typeof propertiesObject != 'undefined') throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support a second argument.\");\n        // 实际上还是继承链写法\n        function F() {}\n        F.prototype = proto;\n\n        return new F();\n    };\n}\n```\n\n## Object.defineProperty((bj, prop, descriptor)\n- 用法\n``` javascript\nObject.defineProperty(obj, \"key\", {\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: \"static\",\n});\n// 写set,get访问器时，不能同时写writable,value属性\nObject.defineProperty(obj, \"key\", {\n  enumerable: false,\n  configurable: false,\n  set: function(newValue){\n     console.log(newValue) // foo\n     value = 'bar'; // value存在于全局变量\n  },\n  get: function(){\n     return value;\n  }\n});\nconsole.log(obj); // {}/key,get,set\nobj.key = 'foo'\nconsole.log(obj.key) // bar\n```\n- 几个属性的意义\n1. `writable` : 当writable属性设置为false时，不能对这个属性进行赋值运算。严格模式下会报错，普通模式下设置没有作用。\n2. `enumerable`定义了对象的属性是否可以在`for...in`循环和`Object.keys()` 中被枚举。\n3. `configurable`特性表示对象的属性是否可以被删除，以及除`writable`特性外的其他特性是否可以被修改。","source":"_posts/ES6中Object常用API-Object.assign,Object.create,Object.defineProperty.md","raw":"---\ntitle: ES6中Object常用API-Object.assign,Object.create,Object.defineProperty\ndate: 2016-5-10\ncategories:\n- 前端\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n---\n## Object.assign(target, ...sources)\n如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。`String`类型和`Symbol`类型的属性都会被拷贝。`Object.assign` 会跳过那些值为`null`或`undefined`的源对象。\n- 用法：\n``` javascript\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, 注意目标对象自身也会改变。\n```\n\n<!-- more -->\n- 避免浅拷贝\n\n`Object.assign()`拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。\n``` javascript\nlet obj1 = { a: 0 , b: { c: 0}};\nlet obj2 = Object.assign({}, obj1);\n\nobj1.a = 1;\nobj1.b.c = 1;\nconsole.log(obj2) // {a:0, b: {c:1}}\n```\n如果要进行深度克隆，就要先创建一个源对象的副本，再进行assign。\n最简单的写法可能是这样：\n``` javascript\nfunction clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n```\n\n- ployfill\n\n根据emca-262规范内对assign过程的描述，可以对这个方法进行ployfill。\n1. Let to be ? ToObject(target).\n2. If only one argument was passed, return to.\n3. Let sources be the List of argument values starting with the second argument.\n4. For each element nextSource of sources, in ascending index order, do\n   1. If nextSource is undefined or null, let keys be a new empty List.\n   2. Else,\n      1. Let from be ! ToObject(nextSource).\n      2. Let keys be ? from.[[OwnPropertyKeys]]().\n5. For each element nextKey of keys in List order, do\n   1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n   2. If desc is not undefined and desc.[[Enumerable]] is true, then\n      1. Let propValue be ? Get(from, nextKey).\n      2. Perform ? Set(to, nextKey, propValue, true).\n6. Return to.\n\n``` javascript\n// 省略前面的对source的判断\n// function写法\nObject.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    return target;\n};\n\n// defineProperty写法\nObject.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {\n      if (target == null) { // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {\n          for (var nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n```\n\n## Object.create(proto, propertiesObject)\n- 用法\n使用`Object.create`可以很方便的解决继承问题，也可以用`extends`语法糖解决。\n``` javascript\nlet Parent = {\n    sayWord: function() {\n        return this.word;\n    }\n}\nlet child = Object.create(Parent, {\n    word: { \n        value: \"foo\",\n        // writable: true,\n        // configurable: true,\n        // enumerable: true\n        // set\n        // get\n    }\n});\nconsole.log(child); // {word: foo}/__proto__.sayWord()\nconsole.log(child.sayWord()); // foo\n```\n- ployfill\n1. If internalSlotsList is not present, set internalSlotsList to a new empty List.\n2. Let obj be a newly created object with an internal slot for each name in internalSlotsList.\n3. Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.\n4. Set obj.[[Prototype]] to proto.\n5. Set obj.[[Extensible]] to true.\n6. Return obj.\n``` javascript\n// 来自MDN\nif (typeof Object.create !== \"function\") {\n    Object.create = function (proto, propertiesObject) {\n        if (typeof proto !== 'object' && typeof proto !== 'function') {\n            throw new TypeError('Object prototype may only be an Object: ' + proto);\n        } else if (proto === null) {\n            throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\");\n        }\n\n        if (typeof propertiesObject != 'undefined') throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support a second argument.\");\n        // 实际上还是继承链写法\n        function F() {}\n        F.prototype = proto;\n\n        return new F();\n    };\n}\n```\n\n## Object.defineProperty((bj, prop, descriptor)\n- 用法\n``` javascript\nObject.defineProperty(obj, \"key\", {\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: \"static\",\n});\n// 写set,get访问器时，不能同时写writable,value属性\nObject.defineProperty(obj, \"key\", {\n  enumerable: false,\n  configurable: false,\n  set: function(newValue){\n     console.log(newValue) // foo\n     value = 'bar'; // value存在于全局变量\n  },\n  get: function(){\n     return value;\n  }\n});\nconsole.log(obj); // {}/key,get,set\nobj.key = 'foo'\nconsole.log(obj.key) // bar\n```\n- 几个属性的意义\n1. `writable` : 当writable属性设置为false时，不能对这个属性进行赋值运算。严格模式下会报错，普通模式下设置没有作用。\n2. `enumerable`定义了对象的属性是否可以在`for...in`循环和`Object.keys()` 中被枚举。\n3. `configurable`特性表示对象的属性是否可以被删除，以及除`writable`特性外的其他特性是否可以被修改。","slug":"ES6中Object常用API-Object.assign,Object.create,Object.defineProperty","published":1,"updated":"2019-04-08T05:37:49.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25o000dh0urff5mihmz","content":"<h2 id=\"Object-assign-target-…sources\"><a href=\"#Object-assign-target-…sources\" class=\"headerlink\" title=\"Object.assign(target, …sources)\"></a>Object.assign(target, …sources)</h2><p>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。<code>String</code>类型和<code>Symbol</code>类型的属性都会被拷贝。<code>Object.assign</code> 会跳过那些值为<code>null</code>或<code>undefined</code>的源对象。</p>\n<ul>\n<li>用法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o3 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(o1, o2, o3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1);  <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>避免浅拷贝</li>\n</ul>\n<p><code>Object.assign()</code>拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span> , <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj1.b.c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2) <span class=\"comment\">// &#123;a:0, b: &#123;c:1&#125;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果要进行深度克隆，就要先创建一个源对象的副本，再进行assign。<br>最简单的写法可能是这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>ployfill</li>\n</ul>\n<p>根据emca-262规范内对assign过程的描述，可以对这个方法进行ployfill。</p>\n<ol>\n<li>Let to be ? ToObject(target).</li>\n<li>If only one argument was passed, return to.</li>\n<li>Let sources be the List of argument values starting with the second argument.</li>\n<li>For each element nextSource of sources, in ascending index order, do<ol>\n<li>If nextSource is undefined or null, let keys be a new empty List.</li>\n<li>Else,<ol>\n<li>Let from be ! ToObject(nextSource).</li>\n<li>Let keys be ? from.<a href>[OwnPropertyKeys]</a>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>For each element nextKey of keys in List order, do<ol>\n<li>Let desc be ? from.<a href=\"nextKey\">[GetOwnProperty]</a>.</li>\n<li>If desc is not undefined and desc.[[Enumerable]] is true, then<ol>\n<li>Let propValue be ? Get(from, nextKey).</li>\n<li>Perform ? Set(to, nextKey, propValue, true).</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Return to.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 省略前面的对source的判断</span></span><br><span class=\"line\"><span class=\"comment\">// function写法</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// defineProperty写法</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>, <span class=\"string\">\"assign\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assign</span>(<span class=\"params\">target, varArgs</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// TypeError if undefined or null</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot convert undefined or null to object'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> to = <span class=\"built_in\">Object</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; <span class=\"built_in\">arguments</span>.length; index++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextSource = <span class=\"built_in\">arguments</span>[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextSource != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> nextKey <span class=\"keyword\">in</span> nextSource) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(nextSource, nextKey)) &#123;</span><br><span class=\"line\">              to[nextKey] = nextSource[nextKey];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> to;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-create-proto-propertiesObject\"><a href=\"#Object-create-proto-propertiesObject\" class=\"headerlink\" title=\"Object.create(proto, propertiesObject)\"></a>Object.create(proto, propertiesObject)</h2><ul>\n<li><p>用法<br>使用<code>Object.create</code>可以很方便的解决继承问题，也可以用<code>extends</code>语法糖解决。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Parent = &#123;</span><br><span class=\"line\">    sayWord: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"built_in\">Object</span>.create(Parent, &#123;</span><br><span class=\"line\">    word: &#123; </span><br><span class=\"line\">        value: <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// writable: true,</span></span><br><span class=\"line\">        <span class=\"comment\">// configurable: true,</span></span><br><span class=\"line\">        <span class=\"comment\">// enumerable: true</span></span><br><span class=\"line\">        <span class=\"comment\">// set</span></span><br><span class=\"line\">        <span class=\"comment\">// get</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child); <span class=\"comment\">// &#123;word: foo&#125;/__proto__.sayWord()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.sayWord()); <span class=\"comment\">// foo</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ployfill</p>\n</li>\n</ul>\n<ol>\n<li>If internalSlotsList is not present, set internalSlotsList to a new empty List.</li>\n<li>Let obj be a newly created object with an internal slot for each name in internalSlotsList.</li>\n<li>Set obj’s essential internal methods to the default ordinary object definitions specified in 9.1.</li>\n<li>Set obj.[[Prototype]] to proto.</li>\n<li>Set obj.[[Extensible]] to true.</li>\n<li>Return obj.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来自MDN</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.create !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">proto, propertiesObject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> proto !== <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> proto !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Object prototype may only be an Object: '</span> + proto);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (proto === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> propertiesObject != <span class=\"string\">'undefined'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"This browser's implementation of Object.create is a shim and doesn't support a second argument.\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 实际上还是继承链写法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        F.prototype = proto;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Object-defineProperty-bj-prop-descriptor\"><a href=\"#Object-defineProperty-bj-prop-descriptor\" class=\"headerlink\" title=\"Object.defineProperty((bj, prop, descriptor)\"></a>Object.defineProperty((bj, prop, descriptor)</h2><ul>\n<li><p>用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"key\"</span>, &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">\"static\"</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 写set,get访问器时，不能同时写writable,value属性</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"key\"</span>, &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(newValue)&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(newValue) <span class=\"comment\">// foo</span></span><br><span class=\"line\">     value = <span class=\"string\">'bar'</span>; <span class=\"comment\">// value存在于全局变量</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function()&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;&#125;/key,get,set</span></span><br><span class=\"line\">obj.key = <span class=\"string\">'foo'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.key) <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几个属性的意义</p>\n</li>\n</ul>\n<ol>\n<li><code>writable</code> : 当writable属性设置为false时，不能对这个属性进行赋值运算。严格模式下会报错，普通模式下设置没有作用。</li>\n<li><code>enumerable</code>定义了对象的属性是否可以在<code>for...in</code>循环和<code>Object.keys()</code> 中被枚举。</li>\n<li><code>configurable</code>特性表示对象的属性是否可以被删除，以及除<code>writable</code>特性外的其他特性是否可以被修改。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"Object-assign-target-…sources\"><a href=\"#Object-assign-target-…sources\" class=\"headerlink\" title=\"Object.assign(target, …sources)\"></a>Object.assign(target, …sources)</h2><p>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。<code>String</code>类型和<code>Symbol</code>类型的属性都会被拷贝。<code>Object.assign</code> 会跳过那些值为<code>null</code>或<code>undefined</code>的源对象。</p>\n<ul>\n<li>用法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o3 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(o1, o2, o3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1);  <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li>避免浅拷贝</li>\n</ul>\n<p><code>Object.assign()</code>拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span> , <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj1.b.c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2) <span class=\"comment\">// &#123;a:0, b: &#123;c:1&#125;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果要进行深度克隆，就要先创建一个源对象的副本，再进行assign。<br>最简单的写法可能是这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>ployfill</li>\n</ul>\n<p>根据emca-262规范内对assign过程的描述，可以对这个方法进行ployfill。</p>\n<ol>\n<li>Let to be ? ToObject(target).</li>\n<li>If only one argument was passed, return to.</li>\n<li>Let sources be the List of argument values starting with the second argument.</li>\n<li>For each element nextSource of sources, in ascending index order, do<ol>\n<li>If nextSource is undefined or null, let keys be a new empty List.</li>\n<li>Else,<ol>\n<li>Let from be ! ToObject(nextSource).</li>\n<li>Let keys be ? from.<a href>[OwnPropertyKeys]</a>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>For each element nextKey of keys in List order, do<ol>\n<li>Let desc be ? from.<a href=\"nextKey\">[GetOwnProperty]</a>.</li>\n<li>If desc is not undefined and desc.[[Enumerable]] is true, then<ol>\n<li>Let propValue be ? Get(from, nextKey).</li>\n<li>Perform ? Set(to, nextKey, propValue, true).</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Return to.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 省略前面的对source的判断</span></span><br><span class=\"line\"><span class=\"comment\">// function写法</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// defineProperty写法</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>, <span class=\"string\">\"assign\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assign</span>(<span class=\"params\">target, varArgs</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// TypeError if undefined or null</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot convert undefined or null to object'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> to = <span class=\"built_in\">Object</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; <span class=\"built_in\">arguments</span>.length; index++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextSource = <span class=\"built_in\">arguments</span>[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextSource != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> nextKey <span class=\"keyword\">in</span> nextSource) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(nextSource, nextKey)) &#123;</span><br><span class=\"line\">              to[nextKey] = nextSource[nextKey];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> to;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-create-proto-propertiesObject\"><a href=\"#Object-create-proto-propertiesObject\" class=\"headerlink\" title=\"Object.create(proto, propertiesObject)\"></a>Object.create(proto, propertiesObject)</h2><ul>\n<li><p>用法<br>使用<code>Object.create</code>可以很方便的解决继承问题，也可以用<code>extends</code>语法糖解决。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Parent = &#123;</span><br><span class=\"line\">    sayWord: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"built_in\">Object</span>.create(Parent, &#123;</span><br><span class=\"line\">    word: &#123; </span><br><span class=\"line\">        value: <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// writable: true,</span></span><br><span class=\"line\">        <span class=\"comment\">// configurable: true,</span></span><br><span class=\"line\">        <span class=\"comment\">// enumerable: true</span></span><br><span class=\"line\">        <span class=\"comment\">// set</span></span><br><span class=\"line\">        <span class=\"comment\">// get</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child); <span class=\"comment\">// &#123;word: foo&#125;/__proto__.sayWord()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.sayWord()); <span class=\"comment\">// foo</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ployfill</p>\n</li>\n</ul>\n<ol>\n<li>If internalSlotsList is not present, set internalSlotsList to a new empty List.</li>\n<li>Let obj be a newly created object with an internal slot for each name in internalSlotsList.</li>\n<li>Set obj’s essential internal methods to the default ordinary object definitions specified in 9.1.</li>\n<li>Set obj.[[Prototype]] to proto.</li>\n<li>Set obj.[[Extensible]] to true.</li>\n<li>Return obj.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来自MDN</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.create !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">proto, propertiesObject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> proto !== <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> proto !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Object prototype may only be an Object: '</span> + proto);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (proto === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> propertiesObject != <span class=\"string\">'undefined'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"This browser's implementation of Object.create is a shim and doesn't support a second argument.\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 实际上还是继承链写法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        F.prototype = proto;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Object-defineProperty-bj-prop-descriptor\"><a href=\"#Object-defineProperty-bj-prop-descriptor\" class=\"headerlink\" title=\"Object.defineProperty((bj, prop, descriptor)\"></a>Object.defineProperty((bj, prop, descriptor)</h2><ul>\n<li><p>用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"key\"</span>, &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">\"static\"</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 写set,get访问器时，不能同时写writable,value属性</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"key\"</span>, &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(newValue)&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(newValue) <span class=\"comment\">// foo</span></span><br><span class=\"line\">     value = <span class=\"string\">'bar'</span>; <span class=\"comment\">// value存在于全局变量</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function()&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;&#125;/key,get,set</span></span><br><span class=\"line\">obj.key = <span class=\"string\">'foo'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.key) <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几个属性的意义</p>\n</li>\n</ul>\n<ol>\n<li><code>writable</code> : 当writable属性设置为false时，不能对这个属性进行赋值运算。严格模式下会报错，普通模式下设置没有作用。</li>\n<li><code>enumerable</code>定义了对象的属性是否可以在<code>for...in</code>循环和<code>Object.keys()</code> 中被枚举。</li>\n<li><code>configurable</code>特性表示对象的属性是否可以被删除，以及除<code>writable</code>特性外的其他特性是否可以被修改。</li>\n</ol>"},{"title":"ES6中的Promise","date":"2016-04-27T16:00:00.000Z","_content":"Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象\n\n一个 Promise有以下几种状态:\n\n- pending: 初始状态，既不是成功，也不是失败状态。\n- fulfilled: 意味着操作成功完成。\n- rejected: 意味着操作失败。\n<!-- more -->\n## 方法\n``` javascript\nPromise.all(iterable)\nPromise.race(iterable)\nPromise.reject(reason)\nPromise.resolve(value)\nPromise.prototype.catch()\nPromise.prototype.then()\n```\n### Promise.all \n\n等待所有代码的完成（或第一个代码的失败）。它的参数是一组iterable。某个值如果不是promise,也会被按顺序计入结果集中。\n``` javascript\nlet getAblumFromSinger = new Promise((resolve, reject) => {\n    setTimeout(()=>{\n        console.log(\"getAblumFromSinger\");\n    }, 1500);\n    resolve(\"AblumIsHere\");\n});\n\nlet getSongFromAblum = new Promise((resolve, reject)=>{\n    setTimeout(()=>{\n        console.log(\"getSongFromAblum\");\n    }, 1000);\n    resolve(\"SongIsHere\");\n});\n\nlet rejectPromise = new Promise((resolve, reject)=>{\n    reject(\"RejectIsHere\");\n})\n\nPromise.all([getAblumFromSinger,getSongFromAblum]).then(values => { \n    console.log(values); // 执行上异步，getSongFromAblum比getAblumFromSinger先执行，但是结果是按任务顺序排列的，当promise中有reject时，将会立刻失败\n});\n```\n### Promise.prototype.catch\n如果 onRejected 抛出一个错误或返回一个失败的 Promise ，Promise  通过catch()返回失败结果；否则，它将显示为成功。 \n### Promise.prototype.then\nthen() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。\n\n``` javascript\nPromise.resolve()\n  .then( () => {\n    // 使 .then() 返回一个 rejected promise\n    throw 'Oh no!';\n  })\n  .catch( reason => {\n    console.error( 'onRejected function called: ', reason );\n  })\n  .then( () => {\n    console.log( \"I am always called even if the prior then's promise rejects\" );\n  });\n```\n### Promise.race(iterable) \nPromise.race(iterable) 方法返回一个 promise ，并伴随着 promise对象解决的返回值或拒绝的错误原因, 只要 iterable 中有一个 promise 对象\"解决(resolve)\"或\"拒绝(reject)\"。\n``` javascript\nvar p1 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 500, \"one\"); \n});\nvar p2 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 100, \"two\"); \n});\n\nPromise.race([p1, p2]).then(function(value) {\n  console.log(value); // \"two\"\n  // 两个都完成，但 p2 更快，这点与all不同，all会按顺序返回所有的任务结果\n});\n```\n### Promise.resolve\n### Promise.reject\n返回拒绝或接受promise结果","source":"_posts/ES6中的Promise.md","raw":"---\ntitle: ES6中的Promise\ndate: 2016-4-28\ncategories:\n- 前端\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n- Promise\n---\nPromise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象\n\n一个 Promise有以下几种状态:\n\n- pending: 初始状态，既不是成功，也不是失败状态。\n- fulfilled: 意味着操作成功完成。\n- rejected: 意味着操作失败。\n<!-- more -->\n## 方法\n``` javascript\nPromise.all(iterable)\nPromise.race(iterable)\nPromise.reject(reason)\nPromise.resolve(value)\nPromise.prototype.catch()\nPromise.prototype.then()\n```\n### Promise.all \n\n等待所有代码的完成（或第一个代码的失败）。它的参数是一组iterable。某个值如果不是promise,也会被按顺序计入结果集中。\n``` javascript\nlet getAblumFromSinger = new Promise((resolve, reject) => {\n    setTimeout(()=>{\n        console.log(\"getAblumFromSinger\");\n    }, 1500);\n    resolve(\"AblumIsHere\");\n});\n\nlet getSongFromAblum = new Promise((resolve, reject)=>{\n    setTimeout(()=>{\n        console.log(\"getSongFromAblum\");\n    }, 1000);\n    resolve(\"SongIsHere\");\n});\n\nlet rejectPromise = new Promise((resolve, reject)=>{\n    reject(\"RejectIsHere\");\n})\n\nPromise.all([getAblumFromSinger,getSongFromAblum]).then(values => { \n    console.log(values); // 执行上异步，getSongFromAblum比getAblumFromSinger先执行，但是结果是按任务顺序排列的，当promise中有reject时，将会立刻失败\n});\n```\n### Promise.prototype.catch\n如果 onRejected 抛出一个错误或返回一个失败的 Promise ，Promise  通过catch()返回失败结果；否则，它将显示为成功。 \n### Promise.prototype.then\nthen() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。\n\n``` javascript\nPromise.resolve()\n  .then( () => {\n    // 使 .then() 返回一个 rejected promise\n    throw 'Oh no!';\n  })\n  .catch( reason => {\n    console.error( 'onRejected function called: ', reason );\n  })\n  .then( () => {\n    console.log( \"I am always called even if the prior then's promise rejects\" );\n  });\n```\n### Promise.race(iterable) \nPromise.race(iterable) 方法返回一个 promise ，并伴随着 promise对象解决的返回值或拒绝的错误原因, 只要 iterable 中有一个 promise 对象\"解决(resolve)\"或\"拒绝(reject)\"。\n``` javascript\nvar p1 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 500, \"one\"); \n});\nvar p2 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 100, \"two\"); \n});\n\nPromise.race([p1, p2]).then(function(value) {\n  console.log(value); // \"two\"\n  // 两个都完成，但 p2 更快，这点与all不同，all会按顺序返回所有的任务结果\n});\n```\n### Promise.resolve\n### Promise.reject\n返回拒绝或接受promise结果","slug":"ES6中的Promise","published":1,"updated":"2018-02-28T07:50:42.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25r000eh0urd97xz7u4","content":"<p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p>\n<p>一个 Promise有以下几种状态:</p>\n<ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。<a id=\"more\"></a>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(iterable)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race(iterable)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(reason)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch()</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>等待所有代码的完成（或第一个代码的失败）。它的参数是一组iterable。某个值如果不是promise,也会被按顺序计入结果集中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> getAblumFromSinger = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"getAblumFromSinger\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"AblumIsHere\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> getSongFromAblum = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"getSongFromAblum\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"SongIsHere\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> rejectPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reject(<span class=\"string\">\"RejectIsHere\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getAblumFromSinger,getSongFromAblum]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// 执行上异步，getSongFromAblum比getAblumFromSinger先执行，但是结果是按任务顺序排列的，当promise中有reject时，将会立刻失败</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h3><p>如果 onRejected 抛出一个错误或返回一个失败的 Promise ，Promise  通过catch()返回失败结果；否则，它将显示为成功。 </p>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then\"></a>Promise.prototype.then</h3><p>then() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使 .then() 返回一个 rejected promise</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'Oh no!'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error( <span class=\"string\">'onRejected function called: '</span>, reason );</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"I am always called even if the prior then's promise rejects\"</span> );</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h3><p>Promise.race(iterable) 方法返回一个 promise ，并伴随着 promise对象解决的返回值或拒绝的错误原因, 只要 iterable 中有一个 promise 对象”解决(resolve)”或”拒绝(reject)”。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">\"one\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"two\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"two\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 两个都完成，但 p2 更快，这点与all不同，all会按顺序返回所有的任务结果</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h3><h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h3><p>返回拒绝或接受promise结果</p>\n","site":{"data":{}},"excerpt":"<p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p>\n<p>一个 Promise有以下几种状态:</p>\n<ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。","more":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(iterable)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race(iterable)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(reason)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch()</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>等待所有代码的完成（或第一个代码的失败）。它的参数是一组iterable。某个值如果不是promise,也会被按顺序计入结果集中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> getAblumFromSinger = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"getAblumFromSinger\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"AblumIsHere\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> getSongFromAblum = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"getSongFromAblum\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"SongIsHere\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> rejectPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reject(<span class=\"string\">\"RejectIsHere\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getAblumFromSinger,getSongFromAblum]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// 执行上异步，getSongFromAblum比getAblumFromSinger先执行，但是结果是按任务顺序排列的，当promise中有reject时，将会立刻失败</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h3><p>如果 onRejected 抛出一个错误或返回一个失败的 Promise ，Promise  通过catch()返回失败结果；否则，它将显示为成功。 </p>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then\"></a>Promise.prototype.then</h3><p>then() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使 .then() 返回一个 rejected promise</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'Oh no!'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error( <span class=\"string\">'onRejected function called: '</span>, reason );</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"I am always called even if the prior then's promise rejects\"</span> );</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h3><p>Promise.race(iterable) 方法返回一个 promise ，并伴随着 promise对象解决的返回值或拒绝的错误原因, 只要 iterable 中有一个 promise 对象”解决(resolve)”或”拒绝(reject)”。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">\"one\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"two\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"two\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 两个都完成，但 p2 更快，这点与all不同，all会按顺序返回所有的任务结果</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h3><h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h3><p>返回拒绝或接受promise结果</p>"},{"title":"ES6中的新集合类型-map, weakMap,set,weakSet","date":"2016-05-15T16:00:00.000Z","_content":"# Map\n*ecma-262* 规范中，23节 *keyed Collection* 对`Map`有如下定义：\n> Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map's collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.\n\n`Map`对象是key-value的集合，key和value可以是es的任意类型。key值具有唯一性，分辨一个key是不是唯一的，使用的是严格比较法。\n<!-- more -->\n\n> The Map constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified  Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.\n\n`Map`构造函数被设计成可以继承的，子类可以用`extends`语句来进行扩展。子类的构造函数在对`Map`进行继承的时候，必须要包含一个对`Map`构造函数的super call，这样就可以使用`Map.prototype`的内置方法。\n\n### API Methods：\n``` javascript\nMap.prototype.clear\nMap.prototype.delete\nMap.prototype.entries\nMap.prototype.forEach(callbackfn[,thisArg])\nMap.prototype.get(key)\nMap.prototype.has(key)\nMap.prototype.keys\nMap.prototype.set(key,value)\nMap.prototype.size\nMap.prototype.values()\n```\n- key相同的判断：\n\n在内存地址不一样时，值无法被取到\n```\nconst map = new Map();\nmap.set(['a'], 1);\nmap.set(['a'], 2);\nconsole.log(map.get(['a'])); // 此处的['a']的内存地址和之前的都不一样，虽然值相等，仍然get不到值\n```\n严格比较法带来的现象\n```\nconst map = new Map();\nmap.set(-0, 1);\nmap.get(+0); // 是可以get到的\nmap.set(undfined, 1);\nmap.get(null); // get不到\n```\n# WeakMap\n*ecma-262* 规范中，23节 *keyed Collection* 对`WeakMap`有如下定义：\n\n> WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.\n\n`WeakMap`对象是key-value的集合，key必须是object（不能是基本数据类型）而value可以是es支持的任意类型。`WeakMap`可以查询是不是含有特定key，但是没有对key进行枚举的机制。如果一个作为`WeakMap`的key的object只能被WeakMap自己所引用，那这个key-value pair就会被自动移除。`WeakMap`的实现必须自主检测这类key-value pair有没有引用者，并及时清除。\n\n### API Methods：\n```\nWeakMap.prototype.delete\nWeakMap.prototype.get\nWeakMap.prototype.has\nWeakMap.prototype.set\n```\n\n可以看出`WeakMap`和`Map`有以下的不同：\n1. 由于没有枚举，弱引用的特性，`WeakMap`只有四个方法`delete,get,has,set`\n2. `WeakMap`每个键对自己所引用对象的引用是 \"弱引用\",GC在计算对象引用数量的时候并不会把弱引用计算进去。这样当一个对象除了WeakMap没有其他引用的时候就会被GC回收掉。 只要没有外部引用，\n3. `WeakMap`只能接受`object`作为键\n\nWeakMap可以用来避免内存泄漏，存储那些将来可能会消失的对象作为键。\n\n# Set & WeakSet\n*ecma-262* 规范中，23节 *keyed Collection* 对`Set`有如下定义：\n```\nSet objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set's collection. Distinct values are discriminated using the SameValueZero comparison algorithm.\n\nSet objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation model.\n```\n`Set`对象是es任意类型的集合。每个值都都只能出现一次。分辨唯一值用的是严格比较法。\n\n`Set`实现时采用hash表或是其它机制，提供一种随着集合规模扩大而线性发展的访问原则。`Set`对象内的数据结构只是用来反映出必要的可观察的语义，而并不是用来作为一种可行的实现模型。\n\n### API Methods:\n```\nSet.prototype.add\nSet.prototype.clear\nSet.prototype.delete\nSet.prototype.entries\nSet.prototype.forEach\nSet.prototype.has(value)\nSet.prototype.keys Set.prototype.size Set.prototype.values\n```\n特性如同传统编程意义上的`Set`,和`Map`类似有key相同判断特性。\n同样的，`WeakSet`和`WeakMap`也有相同的特性，即:\n1. 只能add对象而不能是其它原始数据类型\n2. `WeakSet`对对象的引用是弱引用，所以`WeakSet`不能枚举，也没有`size`。\n3. 除此之外，以上所说的所有类型，都可以接受可迭代对象作为初始化参数，因为它们都内建了Sympol.iterator方法。","source":"_posts/ES6中的新集合类型-map,weakMap,set,weakSet.md","raw":"---\ntitle: ES6中的新集合类型-map, weakMap,set,weakSet\ndate: 2016-5-16\ncategories:\n- 前端\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n---\n# Map\n*ecma-262* 规范中，23节 *keyed Collection* 对`Map`有如下定义：\n> Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map's collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.\n\n`Map`对象是key-value的集合，key和value可以是es的任意类型。key值具有唯一性，分辨一个key是不是唯一的，使用的是严格比较法。\n<!-- more -->\n\n> The Map constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified  Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.\n\n`Map`构造函数被设计成可以继承的，子类可以用`extends`语句来进行扩展。子类的构造函数在对`Map`进行继承的时候，必须要包含一个对`Map`构造函数的super call，这样就可以使用`Map.prototype`的内置方法。\n\n### API Methods：\n``` javascript\nMap.prototype.clear\nMap.prototype.delete\nMap.prototype.entries\nMap.prototype.forEach(callbackfn[,thisArg])\nMap.prototype.get(key)\nMap.prototype.has(key)\nMap.prototype.keys\nMap.prototype.set(key,value)\nMap.prototype.size\nMap.prototype.values()\n```\n- key相同的判断：\n\n在内存地址不一样时，值无法被取到\n```\nconst map = new Map();\nmap.set(['a'], 1);\nmap.set(['a'], 2);\nconsole.log(map.get(['a'])); // 此处的['a']的内存地址和之前的都不一样，虽然值相等，仍然get不到值\n```\n严格比较法带来的现象\n```\nconst map = new Map();\nmap.set(-0, 1);\nmap.get(+0); // 是可以get到的\nmap.set(undfined, 1);\nmap.get(null); // get不到\n```\n# WeakMap\n*ecma-262* 规范中，23节 *keyed Collection* 对`WeakMap`有如下定义：\n\n> WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.\n\n`WeakMap`对象是key-value的集合，key必须是object（不能是基本数据类型）而value可以是es支持的任意类型。`WeakMap`可以查询是不是含有特定key，但是没有对key进行枚举的机制。如果一个作为`WeakMap`的key的object只能被WeakMap自己所引用，那这个key-value pair就会被自动移除。`WeakMap`的实现必须自主检测这类key-value pair有没有引用者，并及时清除。\n\n### API Methods：\n```\nWeakMap.prototype.delete\nWeakMap.prototype.get\nWeakMap.prototype.has\nWeakMap.prototype.set\n```\n\n可以看出`WeakMap`和`Map`有以下的不同：\n1. 由于没有枚举，弱引用的特性，`WeakMap`只有四个方法`delete,get,has,set`\n2. `WeakMap`每个键对自己所引用对象的引用是 \"弱引用\",GC在计算对象引用数量的时候并不会把弱引用计算进去。这样当一个对象除了WeakMap没有其他引用的时候就会被GC回收掉。 只要没有外部引用，\n3. `WeakMap`只能接受`object`作为键\n\nWeakMap可以用来避免内存泄漏，存储那些将来可能会消失的对象作为键。\n\n# Set & WeakSet\n*ecma-262* 规范中，23节 *keyed Collection* 对`Set`有如下定义：\n```\nSet objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set's collection. Distinct values are discriminated using the SameValueZero comparison algorithm.\n\nSet objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation model.\n```\n`Set`对象是es任意类型的集合。每个值都都只能出现一次。分辨唯一值用的是严格比较法。\n\n`Set`实现时采用hash表或是其它机制，提供一种随着集合规模扩大而线性发展的访问原则。`Set`对象内的数据结构只是用来反映出必要的可观察的语义，而并不是用来作为一种可行的实现模型。\n\n### API Methods:\n```\nSet.prototype.add\nSet.prototype.clear\nSet.prototype.delete\nSet.prototype.entries\nSet.prototype.forEach\nSet.prototype.has(value)\nSet.prototype.keys Set.prototype.size Set.prototype.values\n```\n特性如同传统编程意义上的`Set`,和`Map`类似有key相同判断特性。\n同样的，`WeakSet`和`WeakMap`也有相同的特性，即:\n1. 只能add对象而不能是其它原始数据类型\n2. `WeakSet`对对象的引用是弱引用，所以`WeakSet`不能枚举，也没有`size`。\n3. 除此之外，以上所说的所有类型，都可以接受可迭代对象作为初始化参数，因为它们都内建了Sympol.iterator方法。","slug":"ES6中的新集合类型-map,weakMap,set,weakSet","published":1,"updated":"2018-02-28T07:50:55.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25u000hh0urq2o67x0b","content":"<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>Map</code>有如下定义：</p>\n<blockquote>\n<p>Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map’s collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.</p>\n</blockquote>\n<p><code>Map</code>对象是key-value的集合，key和value可以是es的任意类型。key值具有唯一性，分辨一个key是不是唯一的，使用的是严格比较法。<br><a id=\"more\"></a></p>\n<blockquote>\n<p>The Map constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified  Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.</p>\n</blockquote>\n<p><code>Map</code>构造函数被设计成可以继承的，子类可以用<code>extends</code>语句来进行扩展。子类的构造函数在对<code>Map</code>进行继承的时候，必须要包含一个对<code>Map</code>构造函数的super call，这样就可以使用<code>Map.prototype</code>的内置方法。</p>\n<h3 id=\"API-Methods：\"><a href=\"#API-Methods：\" class=\"headerlink\" title=\"API Methods：\"></a>API Methods：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.clear</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.delete</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.entries</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.forEach(callbackfn[,thisArg])</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.get(key)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.has(key)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.keys</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.set(key,value)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.size</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.values()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>key相同的判断：</li>\n</ul>\n<p>在内存地址不一样时，值无法被取到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set([&apos;a&apos;], 1);</span><br><span class=\"line\">map.set([&apos;a&apos;], 2);</span><br><span class=\"line\">console.log(map.get([&apos;a&apos;])); // 此处的[&apos;a&apos;]的内存地址和之前的都不一样，虽然值相等，仍然get不到值</span><br></pre></td></tr></table></figure></p>\n<p>严格比较法带来的现象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set(-0, 1);</span><br><span class=\"line\">map.get(+0); // 是可以get到的</span><br><span class=\"line\">map.set(undfined, 1);</span><br><span class=\"line\">map.get(null); // get不到</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>WeakMap</code>有如下定义：</p>\n<blockquote>\n<p>WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.</p>\n</blockquote>\n<p><code>WeakMap</code>对象是key-value的集合，key必须是object（不能是基本数据类型）而value可以是es支持的任意类型。<code>WeakMap</code>可以查询是不是含有特定key，但是没有对key进行枚举的机制。如果一个作为<code>WeakMap</code>的key的object只能被WeakMap自己所引用，那这个key-value pair就会被自动移除。<code>WeakMap</code>的实现必须自主检测这类key-value pair有没有引用者，并及时清除。</p>\n<h3 id=\"API-Methods：-1\"><a href=\"#API-Methods：-1\" class=\"headerlink\" title=\"API Methods：\"></a>API Methods：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakMap.prototype.delete</span><br><span class=\"line\">WeakMap.prototype.get</span><br><span class=\"line\">WeakMap.prototype.has</span><br><span class=\"line\">WeakMap.prototype.set</span><br></pre></td></tr></table></figure>\n<p>可以看出<code>WeakMap</code>和<code>Map</code>有以下的不同：</p>\n<ol>\n<li>由于没有枚举，弱引用的特性，<code>WeakMap</code>只有四个方法<code>delete,get,has,set</code></li>\n<li><code>WeakMap</code>每个键对自己所引用对象的引用是 “弱引用”,GC在计算对象引用数量的时候并不会把弱引用计算进去。这样当一个对象除了WeakMap没有其他引用的时候就会被GC回收掉。 只要没有外部引用，</li>\n<li><code>WeakMap</code>只能接受<code>object</code>作为键</li>\n</ol>\n<p>WeakMap可以用来避免内存泄漏，存储那些将来可能会消失的对象作为键。</p>\n<h1 id=\"Set-amp-WeakSet\"><a href=\"#Set-amp-WeakSet\" class=\"headerlink\" title=\"Set &amp; WeakSet\"></a>Set &amp; WeakSet</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>Set</code>有如下定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set&apos;s collection. Distinct values are discriminated using the SameValueZero comparison algorithm.</span><br><span class=\"line\"></span><br><span class=\"line\">Set objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation model.</span><br></pre></td></tr></table></figure></p>\n<p><code>Set</code>对象是es任意类型的集合。每个值都都只能出现一次。分辨唯一值用的是严格比较法。</p>\n<p><code>Set</code>实现时采用hash表或是其它机制，提供一种随着集合规模扩大而线性发展的访问原则。<code>Set</code>对象内的数据结构只是用来反映出必要的可观察的语义，而并不是用来作为一种可行的实现模型。</p>\n<h3 id=\"API-Methods\"><a href=\"#API-Methods\" class=\"headerlink\" title=\"API Methods:\"></a>API Methods:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set.prototype.add</span><br><span class=\"line\">Set.prototype.clear</span><br><span class=\"line\">Set.prototype.delete</span><br><span class=\"line\">Set.prototype.entries</span><br><span class=\"line\">Set.prototype.forEach</span><br><span class=\"line\">Set.prototype.has(value)</span><br><span class=\"line\">Set.prototype.keys Set.prototype.size Set.prototype.values</span><br></pre></td></tr></table></figure>\n<p>特性如同传统编程意义上的<code>Set</code>,和<code>Map</code>类似有key相同判断特性。<br>同样的，<code>WeakSet</code>和<code>WeakMap</code>也有相同的特性，即:</p>\n<ol>\n<li>只能add对象而不能是其它原始数据类型</li>\n<li><code>WeakSet</code>对对象的引用是弱引用，所以<code>WeakSet</code>不能枚举，也没有<code>size</code>。</li>\n<li>除此之外，以上所说的所有类型，都可以接受可迭代对象作为初始化参数，因为它们都内建了Sympol.iterator方法。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>Map</code>有如下定义：</p>\n<blockquote>\n<p>Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map’s collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.</p>\n</blockquote>\n<p><code>Map</code>对象是key-value的集合，key和value可以是es的任意类型。key值具有唯一性，分辨一个key是不是唯一的，使用的是严格比较法。<br>","more":"</p>\n<blockquote>\n<p>The Map constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified  Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.</p>\n</blockquote>\n<p><code>Map</code>构造函数被设计成可以继承的，子类可以用<code>extends</code>语句来进行扩展。子类的构造函数在对<code>Map</code>进行继承的时候，必须要包含一个对<code>Map</code>构造函数的super call，这样就可以使用<code>Map.prototype</code>的内置方法。</p>\n<h3 id=\"API-Methods：\"><a href=\"#API-Methods：\" class=\"headerlink\" title=\"API Methods：\"></a>API Methods：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.clear</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.delete</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.entries</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.forEach(callbackfn[,thisArg])</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.get(key)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.has(key)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.keys</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.set(key,value)</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.size</span><br><span class=\"line\"><span class=\"built_in\">Map</span>.prototype.values()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>key相同的判断：</li>\n</ul>\n<p>在内存地址不一样时，值无法被取到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set([&apos;a&apos;], 1);</span><br><span class=\"line\">map.set([&apos;a&apos;], 2);</span><br><span class=\"line\">console.log(map.get([&apos;a&apos;])); // 此处的[&apos;a&apos;]的内存地址和之前的都不一样，虽然值相等，仍然get不到值</span><br></pre></td></tr></table></figure></p>\n<p>严格比较法带来的现象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set(-0, 1);</span><br><span class=\"line\">map.get(+0); // 是可以get到的</span><br><span class=\"line\">map.set(undfined, 1);</span><br><span class=\"line\">map.get(null); // get不到</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>WeakMap</code>有如下定义：</p>\n<blockquote>\n<p>WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.</p>\n</blockquote>\n<p><code>WeakMap</code>对象是key-value的集合，key必须是object（不能是基本数据类型）而value可以是es支持的任意类型。<code>WeakMap</code>可以查询是不是含有特定key，但是没有对key进行枚举的机制。如果一个作为<code>WeakMap</code>的key的object只能被WeakMap自己所引用，那这个key-value pair就会被自动移除。<code>WeakMap</code>的实现必须自主检测这类key-value pair有没有引用者，并及时清除。</p>\n<h3 id=\"API-Methods：-1\"><a href=\"#API-Methods：-1\" class=\"headerlink\" title=\"API Methods：\"></a>API Methods：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakMap.prototype.delete</span><br><span class=\"line\">WeakMap.prototype.get</span><br><span class=\"line\">WeakMap.prototype.has</span><br><span class=\"line\">WeakMap.prototype.set</span><br></pre></td></tr></table></figure>\n<p>可以看出<code>WeakMap</code>和<code>Map</code>有以下的不同：</p>\n<ol>\n<li>由于没有枚举，弱引用的特性，<code>WeakMap</code>只有四个方法<code>delete,get,has,set</code></li>\n<li><code>WeakMap</code>每个键对自己所引用对象的引用是 “弱引用”,GC在计算对象引用数量的时候并不会把弱引用计算进去。这样当一个对象除了WeakMap没有其他引用的时候就会被GC回收掉。 只要没有外部引用，</li>\n<li><code>WeakMap</code>只能接受<code>object</code>作为键</li>\n</ol>\n<p>WeakMap可以用来避免内存泄漏，存储那些将来可能会消失的对象作为键。</p>\n<h1 id=\"Set-amp-WeakSet\"><a href=\"#Set-amp-WeakSet\" class=\"headerlink\" title=\"Set &amp; WeakSet\"></a>Set &amp; WeakSet</h1><p><em>ecma-262</em> 规范中，23节 <em>keyed Collection</em> 对<code>Set</code>有如下定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set&apos;s collection. Distinct values are discriminated using the SameValueZero comparison algorithm.</span><br><span class=\"line\"></span><br><span class=\"line\">Set objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation model.</span><br></pre></td></tr></table></figure></p>\n<p><code>Set</code>对象是es任意类型的集合。每个值都都只能出现一次。分辨唯一值用的是严格比较法。</p>\n<p><code>Set</code>实现时采用hash表或是其它机制，提供一种随着集合规模扩大而线性发展的访问原则。<code>Set</code>对象内的数据结构只是用来反映出必要的可观察的语义，而并不是用来作为一种可行的实现模型。</p>\n<h3 id=\"API-Methods\"><a href=\"#API-Methods\" class=\"headerlink\" title=\"API Methods:\"></a>API Methods:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set.prototype.add</span><br><span class=\"line\">Set.prototype.clear</span><br><span class=\"line\">Set.prototype.delete</span><br><span class=\"line\">Set.prototype.entries</span><br><span class=\"line\">Set.prototype.forEach</span><br><span class=\"line\">Set.prototype.has(value)</span><br><span class=\"line\">Set.prototype.keys Set.prototype.size Set.prototype.values</span><br></pre></td></tr></table></figure>\n<p>特性如同传统编程意义上的<code>Set</code>,和<code>Map</code>类似有key相同判断特性。<br>同样的，<code>WeakSet</code>和<code>WeakMap</code>也有相同的特性，即:</p>\n<ol>\n<li>只能add对象而不能是其它原始数据类型</li>\n<li><code>WeakSet</code>对对象的引用是弱引用，所以<code>WeakSet</code>不能枚举，也没有<code>size</code>。</li>\n<li>除此之外，以上所说的所有类型，都可以接受可迭代对象作为初始化参数，因为它们都内建了Sympol.iterator方法。</li>\n</ol>"},{"title":"ES6的迭代协议-Sympol.iterator","date":"2016-05-19T16:00:00.000Z","_content":"- `Array`和`Map`及`Set`,`String`有内建的可迭代协议，从chrome上可以看出这一点，所以可以使用各类迭代方法对其中的成员进行访问。\n- 如果要让没有迭代功能的对象具有迭代性，需要实现`Sympol.iterator`方法。\n\n<!-- more -->\n\n有以下方式来实现可迭代。\n1. 传统方式,缺点是无法使用`for-of`，只能用`next()`进行迭代\n``` javascript\nfunction Iterator(array){\n    var nextIndex = 0;\n    \n    return {\n       next: function(){\n           return nextIndex < array.length ?\n               {value: array[nextIndex++], done: false} :\n               {done: true};\n       }\n    };\n}\n\nlet it = Iterator(['foo', 'bar']);\n\nconsole.log(it.next().value); // 'foo'\nconsole.log(it.next().value); // 'bar'\nconsole.log(it.next().done);  // true\n```\n2. Sympol.iterator方式，在这种方式下，没有办法使用类似next()方法来进行迭代\n``` javascript\nconst Iterator = {\n    [Symbol.iterator]() {\n        let step = 0;\n        const iterator = {\n            next() {\n                if (step <= 2) {\n                    step++;\n                }\n                switch (step) {\n                    case 1:\n                        return { value: 'foo', done: false };\n                    case 2:\n                        return { value: 'bar', done: false };\n                    default:\n                        return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n};\n// 解构为 foo bar\nconsole.log(...Iterator);\n// 迭代为 foo bar\nfor(let c of Iterator){\n   console.log(c);\n}\n// 得到 ['f','o','o','b','a','r']\nArray.from(Iterator);     \n```\n3. Generator形式，与es6配合最为紧密，支持方法最多\n``` javascript\nfunction* Iterator(array){\n    var nextIndex = 0;\n    \n    while(nextIndex < array.length){\n        yield array[nextIndex++];\n    }\n}\n\nvar gen = Iterator(['foo', 'bar']);\n// 得到IteratorResult（chrome,firefxo) {value: 'foo', done: false}\nconsole.log(gen.next()); \nconsole.log(gen.next().value); // bar\n// 得到 'foo', 'bar'\nconsole.log(...Iterator(['foo', 'bar']));\n// 得到 'foo', 'bar'\nfor(let c of gen){\n    console.log(c);\n}\n// 得到 ['foo', 'bar']\nArray.from(gen);\n```\n另外还有一种无限迭代方式\n``` javascript\nfunction* idMaker(){\n    var index = 0;\n    while(true)\n        yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // '0'\nconsole.log(gen.next().value); // '1'\nconsole.log(gen.next().value); // '2'\n```","source":"_posts/ES6中的迭代协议-Sympol.iterator.md","raw":"---\ntitle: ES6的迭代协议-Sympol.iterator\ndate: 2016-5-20\ncategories:\n- 前端\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n---\n- `Array`和`Map`及`Set`,`String`有内建的可迭代协议，从chrome上可以看出这一点，所以可以使用各类迭代方法对其中的成员进行访问。\n- 如果要让没有迭代功能的对象具有迭代性，需要实现`Sympol.iterator`方法。\n\n<!-- more -->\n\n有以下方式来实现可迭代。\n1. 传统方式,缺点是无法使用`for-of`，只能用`next()`进行迭代\n``` javascript\nfunction Iterator(array){\n    var nextIndex = 0;\n    \n    return {\n       next: function(){\n           return nextIndex < array.length ?\n               {value: array[nextIndex++], done: false} :\n               {done: true};\n       }\n    };\n}\n\nlet it = Iterator(['foo', 'bar']);\n\nconsole.log(it.next().value); // 'foo'\nconsole.log(it.next().value); // 'bar'\nconsole.log(it.next().done);  // true\n```\n2. Sympol.iterator方式，在这种方式下，没有办法使用类似next()方法来进行迭代\n``` javascript\nconst Iterator = {\n    [Symbol.iterator]() {\n        let step = 0;\n        const iterator = {\n            next() {\n                if (step <= 2) {\n                    step++;\n                }\n                switch (step) {\n                    case 1:\n                        return { value: 'foo', done: false };\n                    case 2:\n                        return { value: 'bar', done: false };\n                    default:\n                        return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n};\n// 解构为 foo bar\nconsole.log(...Iterator);\n// 迭代为 foo bar\nfor(let c of Iterator){\n   console.log(c);\n}\n// 得到 ['f','o','o','b','a','r']\nArray.from(Iterator);     \n```\n3. Generator形式，与es6配合最为紧密，支持方法最多\n``` javascript\nfunction* Iterator(array){\n    var nextIndex = 0;\n    \n    while(nextIndex < array.length){\n        yield array[nextIndex++];\n    }\n}\n\nvar gen = Iterator(['foo', 'bar']);\n// 得到IteratorResult（chrome,firefxo) {value: 'foo', done: false}\nconsole.log(gen.next()); \nconsole.log(gen.next().value); // bar\n// 得到 'foo', 'bar'\nconsole.log(...Iterator(['foo', 'bar']));\n// 得到 'foo', 'bar'\nfor(let c of gen){\n    console.log(c);\n}\n// 得到 ['foo', 'bar']\nArray.from(gen);\n```\n另外还有一种无限迭代方式\n``` javascript\nfunction* idMaker(){\n    var index = 0;\n    while(true)\n        yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // '0'\nconsole.log(gen.next().value); // '1'\nconsole.log(gen.next().value); // '2'\n```","slug":"ES6中的迭代协议-Sympol.iterator","published":1,"updated":"2018-02-28T07:50:48.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv25x000jh0urz9f3gayf","content":"<ul>\n<li><code>Array</code>和<code>Map</code>及<code>Set</code>,<code>String</code>有内建的可迭代协议，从chrome上可以看出这一点，所以可以使用各类迭代方法对其中的成员进行访问。</li>\n<li>如果要让没有迭代功能的对象具有迭代性，需要实现<code>Sympol.iterator</code>方法。</li>\n</ul>\n<a id=\"more\"></a>\n<p>有以下方式来实现可迭代。</p>\n<ol>\n<li><p>传统方式,缺点是无法使用<code>for-of</code>，只能用<code>next()</code>进行迭代</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Iterator</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nextIndex &lt; array.length ?</span><br><span class=\"line\">               &#123;<span class=\"attr\">value</span>: array[nextIndex++], <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125; :</span><br><span class=\"line\">               &#123;<span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> it = Iterator([<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// 'foo'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// 'bar'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().done);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Sympol.iterator方式，在这种方式下，没有办法使用类似next()方法来进行迭代</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Iterator = &#123;</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> iterator = &#123;</span><br><span class=\"line\">            next() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (step &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    step++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (step) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 解构为 foo bar</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...Iterator);</span><br><span class=\"line\"><span class=\"comment\">// 迭代为 foo bar</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> Iterator)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 得到 ['f','o','o','b','a','r']</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(Iterator);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Generator形式，与es6配合最为紧密，支持方法最多</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">Iterator</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextIndex &lt; array.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> array[nextIndex++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = Iterator([<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 得到IteratorResult（chrome,firefxo) &#123;value: 'foo', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next()); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// bar</span></span><br><span class=\"line\"><span class=\"comment\">// 得到 'foo', 'bar'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...Iterator([<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]));</span><br><span class=\"line\"><span class=\"comment\">// 得到 'foo', 'bar'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> gen)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 得到 ['foo', 'bar']</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(gen);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>另外还有一种无限迭代方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">idMaker</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> index++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = idMaker();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// '0'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// '1'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// '2'</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><code>Array</code>和<code>Map</code>及<code>Set</code>,<code>String</code>有内建的可迭代协议，从chrome上可以看出这一点，所以可以使用各类迭代方法对其中的成员进行访问。</li>\n<li>如果要让没有迭代功能的对象具有迭代性，需要实现<code>Sympol.iterator</code>方法。</li>\n</ul>","more":"<p>有以下方式来实现可迭代。</p>\n<ol>\n<li><p>传统方式,缺点是无法使用<code>for-of</code>，只能用<code>next()</code>进行迭代</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Iterator</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nextIndex &lt; array.length ?</span><br><span class=\"line\">               &#123;<span class=\"attr\">value</span>: array[nextIndex++], <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125; :</span><br><span class=\"line\">               &#123;<span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> it = Iterator([<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// 'foo'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// 'bar'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().done);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Sympol.iterator方式，在这种方式下，没有办法使用类似next()方法来进行迭代</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Iterator = &#123;</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> iterator = &#123;</span><br><span class=\"line\">            next() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (step &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    step++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (step) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 解构为 foo bar</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...Iterator);</span><br><span class=\"line\"><span class=\"comment\">// 迭代为 foo bar</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> Iterator)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 得到 ['f','o','o','b','a','r']</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(Iterator);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Generator形式，与es6配合最为紧密，支持方法最多</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">Iterator</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextIndex &lt; array.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> array[nextIndex++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = Iterator([<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 得到IteratorResult（chrome,firefxo) &#123;value: 'foo', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next()); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// bar</span></span><br><span class=\"line\"><span class=\"comment\">// 得到 'foo', 'bar'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...Iterator([<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]));</span><br><span class=\"line\"><span class=\"comment\">// 得到 'foo', 'bar'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> gen)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 得到 ['foo', 'bar']</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(gen);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>另外还有一种无限迭代方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">idMaker</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> index++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = idMaker();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// '0'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// '1'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// '2'</span></span><br></pre></td></tr></table></figure></p>"},{"title":"JAVA中的弱引用","date":"2016-09-01T16:00:00.000Z","_content":"ES6中WeakMap，WeakSet，可以自主检测集合中的key-value pair有没有引用者，并及时做出清除，也就是被垃圾回收器回收。JAVA中的弱引用也是和垃圾回收器密切相关的。\n\n<!-- more -->\nJAVA中的引用分为以下几个类型：\n- 强引用：通常我们通过new来创建一个新对象时返回的引用就是一个强引用，若一个对象通过一系列强引用可到达，它就是强可达的(strongly reachable)，那么它就不被回收\n- 软引用：软引用和弱引用的区别在于，若一个对象是弱引用可达，无论当前内存是否充足它都会被回收，而软引用可达的对象在内存不充足时才会被回收，因此软引用要比弱引用“强”一些\n- 弱引用：如果一个对象具有弱引用，在GC线程扫描内存区域的过程中，不管当前内存空间足够与否，都会回收内存，利用jdk中的ThreadLocal就是弱引用的，具体间下面的详细说明。\n- 虚引用：如果一个对象仅持有虚引用，在任何时候都可能被垃圾回收，虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列联合使用，虚引用主要用来跟踪对象 被垃圾回收的活动。\n\n它们由强到弱依次是：强引用、软引用、弱引用、虚引用。\n\n","source":"_posts/JAVA中的弱引用.md","raw":"---\ntitle: JAVA中的弱引用\ndate: 2016-9-2\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n---\nES6中WeakMap，WeakSet，可以自主检测集合中的key-value pair有没有引用者，并及时做出清除，也就是被垃圾回收器回收。JAVA中的弱引用也是和垃圾回收器密切相关的。\n\n<!-- more -->\nJAVA中的引用分为以下几个类型：\n- 强引用：通常我们通过new来创建一个新对象时返回的引用就是一个强引用，若一个对象通过一系列强引用可到达，它就是强可达的(strongly reachable)，那么它就不被回收\n- 软引用：软引用和弱引用的区别在于，若一个对象是弱引用可达，无论当前内存是否充足它都会被回收，而软引用可达的对象在内存不充足时才会被回收，因此软引用要比弱引用“强”一些\n- 弱引用：如果一个对象具有弱引用，在GC线程扫描内存区域的过程中，不管当前内存空间足够与否，都会回收内存，利用jdk中的ThreadLocal就是弱引用的，具体间下面的详细说明。\n- 虚引用：如果一个对象仅持有虚引用，在任何时候都可能被垃圾回收，虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列联合使用，虚引用主要用来跟踪对象 被垃圾回收的活动。\n\n它们由强到弱依次是：强引用、软引用、弱引用、虚引用。\n\n","slug":"JAVA中的弱引用","published":1,"updated":"2018-03-06T04:34:45.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv262000nh0ur8k9ocahg","content":"<p>ES6中WeakMap，WeakSet，可以自主检测集合中的key-value pair有没有引用者，并及时做出清除，也就是被垃圾回收器回收。JAVA中的弱引用也是和垃圾回收器密切相关的。</p>\n<a id=\"more\"></a>\n<p>JAVA中的引用分为以下几个类型：</p>\n<ul>\n<li>强引用：通常我们通过new来创建一个新对象时返回的引用就是一个强引用，若一个对象通过一系列强引用可到达，它就是强可达的(strongly reachable)，那么它就不被回收</li>\n<li>软引用：软引用和弱引用的区别在于，若一个对象是弱引用可达，无论当前内存是否充足它都会被回收，而软引用可达的对象在内存不充足时才会被回收，因此软引用要比弱引用“强”一些</li>\n<li>弱引用：如果一个对象具有弱引用，在GC线程扫描内存区域的过程中，不管当前内存空间足够与否，都会回收内存，利用jdk中的ThreadLocal就是弱引用的，具体间下面的详细说明。</li>\n<li>虚引用：如果一个对象仅持有虚引用，在任何时候都可能被垃圾回收，虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列联合使用，虚引用主要用来跟踪对象 被垃圾回收的活动。</li>\n</ul>\n<p>它们由强到弱依次是：强引用、软引用、弱引用、虚引用。</p>\n","site":{"data":{}},"excerpt":"<p>ES6中WeakMap，WeakSet，可以自主检测集合中的key-value pair有没有引用者，并及时做出清除，也就是被垃圾回收器回收。JAVA中的弱引用也是和垃圾回收器密切相关的。</p>","more":"<p>JAVA中的引用分为以下几个类型：</p>\n<ul>\n<li>强引用：通常我们通过new来创建一个新对象时返回的引用就是一个强引用，若一个对象通过一系列强引用可到达，它就是强可达的(strongly reachable)，那么它就不被回收</li>\n<li>软引用：软引用和弱引用的区别在于，若一个对象是弱引用可达，无论当前内存是否充足它都会被回收，而软引用可达的对象在内存不充足时才会被回收，因此软引用要比弱引用“强”一些</li>\n<li>弱引用：如果一个对象具有弱引用，在GC线程扫描内存区域的过程中，不管当前内存空间足够与否，都会回收内存，利用jdk中的ThreadLocal就是弱引用的，具体间下面的详细说明。</li>\n<li>虚引用：如果一个对象仅持有虚引用，在任何时候都可能被垃圾回收，虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列联合使用，虚引用主要用来跟踪对象 被垃圾回收的活动。</li>\n</ul>\n<p>它们由强到弱依次是：强引用、软引用、弱引用、虚引用。</p>"},{"title":"JAVA并发编程之CountDownLatch","date":"2016-08-02T16:00:00.000Z","_content":"\n对于倒计时器锁，一种典型的应用就是火箭发射。火箭发射前，要等待所有的检测线程完工。CountDownLatch接受一个整数作为参数，即当前计数器的计数个数。\n\n下面的这个例子演示了一个模拟的火箭发射过程：\n<!-- more -->\n``` java\npackage fuck;\n\nimport java.util.Random;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Shit implements Runnable{\n\t\n\tprivate static CountDownLatch cdLatch = new CountDownLatch(10);\n\tprivate int value;\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tfinal Shit shit = new Shit();\n\t\tExecutorService exec = Executors.newFixedThreadPool(10);\n\t\tfor(int i=0;i<10;i++) {\n\t\t\texec.submit(shit);\n\t\t}\n\t\tcdLatch.await();\n\t\tSystem.out.println(\"Fire!\");\n\t\texec.shutdown();\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tThread.sleep(new Random().nextInt(10)*1000);\n\t\t\tSystem.out.println(\"Check Over !\");\n\t\t\tcdLatch.countDown();\n\t\t}catch(InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n调用``cdLatch.await()``后，该线程将会等待子线程``countdown``完毕后才能执行。","source":"_posts/JAVA并发编程之CountDownLatch.md","raw":"---\ntitle: JAVA并发编程之CountDownLatch\ndate: 2016-8-3\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n\n对于倒计时器锁，一种典型的应用就是火箭发射。火箭发射前，要等待所有的检测线程完工。CountDownLatch接受一个整数作为参数，即当前计数器的计数个数。\n\n下面的这个例子演示了一个模拟的火箭发射过程：\n<!-- more -->\n``` java\npackage fuck;\n\nimport java.util.Random;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Shit implements Runnable{\n\t\n\tprivate static CountDownLatch cdLatch = new CountDownLatch(10);\n\tprivate int value;\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tfinal Shit shit = new Shit();\n\t\tExecutorService exec = Executors.newFixedThreadPool(10);\n\t\tfor(int i=0;i<10;i++) {\n\t\t\texec.submit(shit);\n\t\t}\n\t\tcdLatch.await();\n\t\tSystem.out.println(\"Fire!\");\n\t\texec.shutdown();\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tThread.sleep(new Random().nextInt(10)*1000);\n\t\t\tSystem.out.println(\"Check Over !\");\n\t\t\tcdLatch.countDown();\n\t\t}catch(InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n调用``cdLatch.await()``后，该线程将会等待子线程``countdown``完毕后才能执行。","slug":"JAVA并发编程之CountDownLatch","published":1,"updated":"2018-03-03T12:21:30.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv263000ph0urzik8idc6","content":"<p>对于倒计时器锁，一种典型的应用就是火箭发射。火箭发射前，要等待所有的检测线程完工。CountDownLatch接受一个整数作为参数，即当前计数器的计数个数。</p>\n<p>下面的这个例子演示了一个模拟的火箭发射过程：<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> fuck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch cdLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Shit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tExecutorService exec = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">\t\t\texec.submit(shit);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcdLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Fire!\"</span>);</span><br><span class=\"line\">\t\texec.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>)*<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Check Over !\"</span>);</span><br><span class=\"line\">\t\t\tcdLatch.countDown();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用<code>cdLatch.await()</code>后，该线程将会等待子线程<code>countdown</code>完毕后才能执行。</p>\n","site":{"data":{}},"excerpt":"<p>对于倒计时器锁，一种典型的应用就是火箭发射。火箭发射前，要等待所有的检测线程完工。CountDownLatch接受一个整数作为参数，即当前计数器的计数个数。</p>\n<p>下面的这个例子演示了一个模拟的火箭发射过程：<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> fuck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch cdLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Shit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tExecutorService exec = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">\t\t\texec.submit(shit);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcdLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Fire!\"</span>);</span><br><span class=\"line\">\t\texec.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>)*<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Check Over !\"</span>);</span><br><span class=\"line\">\t\t\tcdLatch.countDown();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用<code>cdLatch.await()</code>后，该线程将会等待子线程<code>countdown</code>完毕后才能执行。</p>"},{"title":"JAVA并发编程之CyclicBarrier","date":"2016-08-09T16:00:00.000Z","_content":"\nCyclicBarrier可以用于多线程计算数据,最后合并计算结果的场景。\n<!-- more -->\n``` java\nimport java.util.Random;\nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.CyclicBarrier;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Shit implements Runnable {\n\tprivate static ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();\n    private static CyclicBarrier barrier;\n\tpublic static void main(String[] args) throws Exception {\n\t\t    barrier = new CyclicBarrier(5, new Runnable() {\n\t\t\t// 栅栏动作，在计数器为0的时候执行\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"所有得分得到！\");\n\t\t\t\tint result = 0;\n\t\t\t\tfor (String key : map.keySet()) {\n\t\t\t\t\tresult += map.get(key);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"平均值为：\" + (result/5));\n\t\t\t}\n\t\t});\n\n\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tes.execute(new Shit());\n\t\t}\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tint score = new Random().nextInt(100);\n\t\t\tmap.put(\"科目\" + Thread.currentThread().getName() , score);\n\t\t\tSystem.out.println(\"科目\" +  Thread.currentThread().getName() + \"已获得得分: \" + score);\n\t\t\tThread.sleep(1000);\n\t\t\tbarrier.await();\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (BrokenBarrierException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n只有当五个线程都结束时，才会进入计算平均值的方法中，CyclicBarrier起到了一个栅栏作用，一旦线程都达到了栅栏处，就会进入闸门方法中。","source":"_posts/JAVA并发编程之CyclicBarrier.md","raw":"---\ntitle: JAVA并发编程之CyclicBarrier\ndate: 2016-8-10\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n\nCyclicBarrier可以用于多线程计算数据,最后合并计算结果的场景。\n<!-- more -->\n``` java\nimport java.util.Random;\nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.CyclicBarrier;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Shit implements Runnable {\n\tprivate static ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();\n    private static CyclicBarrier barrier;\n\tpublic static void main(String[] args) throws Exception {\n\t\t    barrier = new CyclicBarrier(5, new Runnable() {\n\t\t\t// 栅栏动作，在计数器为0的时候执行\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"所有得分得到！\");\n\t\t\t\tint result = 0;\n\t\t\t\tfor (String key : map.keySet()) {\n\t\t\t\t\tresult += map.get(key);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"平均值为：\" + (result/5));\n\t\t\t}\n\t\t});\n\n\t\tExecutorService es = Executors.newCachedThreadPool();\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tes.execute(new Shit());\n\t\t}\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tint score = new Random().nextInt(100);\n\t\t\tmap.put(\"科目\" + Thread.currentThread().getName() , score);\n\t\t\tSystem.out.println(\"科目\" +  Thread.currentThread().getName() + \"已获得得分: \" + score);\n\t\t\tThread.sleep(1000);\n\t\t\tbarrier.await();\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (BrokenBarrierException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n只有当五个线程都结束时，才会进入计算平均值的方法中，CyclicBarrier起到了一个栅栏作用，一旦线程都达到了栅栏处，就会进入闸门方法中。","slug":"JAVA并发编程之CyclicBarrier","published":1,"updated":"2018-03-06T04:32:50.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv266000th0urur06znlm","content":"<p>CyclicBarrier可以用于多线程计算数据,最后合并计算结果的场景。<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConcurrentHashMap&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CyclicBarrier barrier;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t    barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>, <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 栅栏动作，在计数器为0的时候执行</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"所有得分得到！\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\t\tresult += map.get(key);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"平均值为：\"</span> + (result/<span class=\"number\">5</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tExecutorService es = Executors.newCachedThreadPool();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tes.execute(<span class=\"keyword\">new</span> Shit());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> score = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\tmap.put(<span class=\"string\">\"科目\"</span> + Thread.currentThread().getName() , score);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"科目\"</span> +  Thread.currentThread().getName() + <span class=\"string\">\"已获得得分: \"</span> + score);</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\tbarrier.await();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只有当五个线程都结束时，才会进入计算平均值的方法中，CyclicBarrier起到了一个栅栏作用，一旦线程都达到了栅栏处，就会进入闸门方法中。</p>\n","site":{"data":{}},"excerpt":"<p>CyclicBarrier可以用于多线程计算数据,最后合并计算结果的场景。<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConcurrentHashMap&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CyclicBarrier barrier;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t    barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>, <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 栅栏动作，在计数器为0的时候执行</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"所有得分得到！\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\t\tresult += map.get(key);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"平均值为：\"</span> + (result/<span class=\"number\">5</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tExecutorService es = Executors.newCachedThreadPool();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tes.execute(<span class=\"keyword\">new</span> Shit());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> score = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\tmap.put(<span class=\"string\">\"科目\"</span> + Thread.currentThread().getName() , score);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"科目\"</span> +  Thread.currentThread().getName() + <span class=\"string\">\"已获得得分: \"</span> + score);</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\tbarrier.await();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只有当五个线程都结束时，才会进入计算平均值的方法中，CyclicBarrier起到了一个栅栏作用，一旦线程都达到了栅栏处，就会进入闸门方法中。</p>"},{"title":"JAVA并发编程之Future与CompletionSerivce","date":"2016-08-08T16:00:00.000Z","_content":"``Future``调用``get()``方法时，是阻塞的，也就是如果调用``Future``对象的``get()``方法时，任务尚未完成，则调用``get()``方法时会一直阻塞到此任务完成为止。如果是这样的结果，则前面先执行的任务一旦耗时很多，则后面调用``get()``方法就成为了阻塞状态，排队进行等待，大大影响运行效率。主线程不能保证首先获得的是最先完成任务的返回值，这就是``Future``的缺点。\n<!-- more -->\n下面用一个例子来演示``Future``批处理的缺点。\n\n``` java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class Shit implements Callable<String> {\n\tprivate String username;\n\tprivate long sleepValue;\n\n\tShit(String username, long sleepValue) {\n\t\tthis.username = username;\n\t\tthis.sleepValue = sleepValue;\n\t}\n\n\t@Override\n\tpublic String call() throws Exception {\n\t\tSystem.out.println(username);\n\t\tThread.sleep(sleepValue);\n\t\treturn \"Result : \" + username;\n\t}\n\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tpublic static void main(String args[]) {\n\t\tList<Callable> callableList = new ArrayList<Callable>(\n\t\t\t\tArrays.asList(new Shit(\"username1\", 5000), new Shit(\"username2\", 4000), new Shit(\"username3\", 3000),\n\t\t\t\t\t\tnew Shit(\"username4\", 2000), new Shit(\"username5\", 1000)));\n\t\tList<Future> futureList = new ArrayList<Future>();\n\t\tThreadPoolExecutor executor = new ThreadPoolExecutor(5, 10, 5, TimeUnit.SECONDS, new LinkedBlockingDeque());\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tfutureList.add(executor.submit(callableList.get(i)));\n\t\t}\n\t\ttry {\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tSystem.out.println(futureList.get(i).get() + \" : \" + System.currentTimeMillis());\n\t\t\t}\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n/* 输出：\nusername1\nusername5\nusername4\nusername3\nusername2\n由于第一个任务耗时较长，因此后面任务的get()被阻塞。\nResult : username1 : 1520214428110\nResult : username2 : 1520214428110\nResult : username3 : 1520214428110\nResult : username4 : 1520214428110\nResult : username5 : 1520214428110\n*/\n```\n``CompletionSerivce``可以解决这个批处理等待问题。也就是哪个任务先执行完，``CompletionSerivce``就先取得这个任务的返回值再处理。\n\n``` java\npublic static void main(String args[]) {\n\t\tList<Callable> callableList = new ArrayList<Callable>(\n\t\t\t\tArrays.asList(new Shit(\"username1\", 5000), new Shit(\"username2\", 4000), new Shit(\"username3\", 3000),\n\t\t\t\t\t\tnew Shit(\"username4\", 2000), new Shit(\"username5\", 1000)));\n\t\t\n\t\tThreadPoolExecutor executor = new ThreadPoolExecutor(5, 10, 5, TimeUnit.SECONDS, new LinkedBlockingDeque());\n\t\t\n\t\tCompletionService cs = new ExecutorCompletionService(executor);\n\t\t\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tcs.submit(callableList.get(i));\n\t\t}\n\t\ttry {\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t    // take可以阻塞式地获得下一个任务的future\n\t\t\t    // poll方式则是非阻塞式地获得下一个任务的future\n\t\t\t\tSystem.out.println(cs.take().get() + \" : \" + System.currentTimeMillis());\n\t\t\t}\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n/* 输出\nusername2\nusername5\nusername4\nusername3\nusername1\nResult : username5 : 1520215083204\nResult : username4 : 1520215084203\nResult : username3 : 1520215085203\nResult : username2 : 1520215086203\nResult : username1 : 1520215087203\n*/\n```\n","source":"_posts/JAVA并发编程之Future与CompletionSerivce.md","raw":"---\ntitle: JAVA并发编程之Future与CompletionSerivce\ndate: 2016-8-9\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n``Future``调用``get()``方法时，是阻塞的，也就是如果调用``Future``对象的``get()``方法时，任务尚未完成，则调用``get()``方法时会一直阻塞到此任务完成为止。如果是这样的结果，则前面先执行的任务一旦耗时很多，则后面调用``get()``方法就成为了阻塞状态，排队进行等待，大大影响运行效率。主线程不能保证首先获得的是最先完成任务的返回值，这就是``Future``的缺点。\n<!-- more -->\n下面用一个例子来演示``Future``批处理的缺点。\n\n``` java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class Shit implements Callable<String> {\n\tprivate String username;\n\tprivate long sleepValue;\n\n\tShit(String username, long sleepValue) {\n\t\tthis.username = username;\n\t\tthis.sleepValue = sleepValue;\n\t}\n\n\t@Override\n\tpublic String call() throws Exception {\n\t\tSystem.out.println(username);\n\t\tThread.sleep(sleepValue);\n\t\treturn \"Result : \" + username;\n\t}\n\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tpublic static void main(String args[]) {\n\t\tList<Callable> callableList = new ArrayList<Callable>(\n\t\t\t\tArrays.asList(new Shit(\"username1\", 5000), new Shit(\"username2\", 4000), new Shit(\"username3\", 3000),\n\t\t\t\t\t\tnew Shit(\"username4\", 2000), new Shit(\"username5\", 1000)));\n\t\tList<Future> futureList = new ArrayList<Future>();\n\t\tThreadPoolExecutor executor = new ThreadPoolExecutor(5, 10, 5, TimeUnit.SECONDS, new LinkedBlockingDeque());\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tfutureList.add(executor.submit(callableList.get(i)));\n\t\t}\n\t\ttry {\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tSystem.out.println(futureList.get(i).get() + \" : \" + System.currentTimeMillis());\n\t\t\t}\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n/* 输出：\nusername1\nusername5\nusername4\nusername3\nusername2\n由于第一个任务耗时较长，因此后面任务的get()被阻塞。\nResult : username1 : 1520214428110\nResult : username2 : 1520214428110\nResult : username3 : 1520214428110\nResult : username4 : 1520214428110\nResult : username5 : 1520214428110\n*/\n```\n``CompletionSerivce``可以解决这个批处理等待问题。也就是哪个任务先执行完，``CompletionSerivce``就先取得这个任务的返回值再处理。\n\n``` java\npublic static void main(String args[]) {\n\t\tList<Callable> callableList = new ArrayList<Callable>(\n\t\t\t\tArrays.asList(new Shit(\"username1\", 5000), new Shit(\"username2\", 4000), new Shit(\"username3\", 3000),\n\t\t\t\t\t\tnew Shit(\"username4\", 2000), new Shit(\"username5\", 1000)));\n\t\t\n\t\tThreadPoolExecutor executor = new ThreadPoolExecutor(5, 10, 5, TimeUnit.SECONDS, new LinkedBlockingDeque());\n\t\t\n\t\tCompletionService cs = new ExecutorCompletionService(executor);\n\t\t\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tcs.submit(callableList.get(i));\n\t\t}\n\t\ttry {\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t    // take可以阻塞式地获得下一个任务的future\n\t\t\t    // poll方式则是非阻塞式地获得下一个任务的future\n\t\t\t\tSystem.out.println(cs.take().get() + \" : \" + System.currentTimeMillis());\n\t\t\t}\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n/* 输出\nusername2\nusername5\nusername4\nusername3\nusername1\nResult : username5 : 1520215083204\nResult : username4 : 1520215084203\nResult : username3 : 1520215085203\nResult : username2 : 1520215086203\nResult : username1 : 1520215087203\n*/\n```\n","slug":"JAVA并发编程之Future与CompletionSerivce","published":1,"updated":"2018-03-06T04:33:49.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv268000vh0uri2u6oluy","content":"<p><code>Future</code>调用<code>get()</code>方法时，是阻塞的，也就是如果调用<code>Future</code>对象的<code>get()</code>方法时，任务尚未完成，则调用<code>get()</code>方法时会一直阻塞到此任务完成为止。如果是这样的结果，则前面先执行的任务一旦耗时很多，则后面调用<code>get()</code>方法就成为了阻塞状态，排队进行等待，大大影响运行效率。主线程不能保证首先获得的是最先完成任务的返回值，这就是<code>Future</code>的缺点。<br><a id=\"more\"></a><br>下面用一个例子来演示<code>Future</code>批处理的缺点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> sleepValue;</span><br><span class=\"line\"></span><br><span class=\"line\">\tShit(String username, <span class=\"keyword\">long</span> sleepValue) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sleepValue = sleepValue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(username);</span><br><span class=\"line\">\t\tThread.sleep(sleepValue);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Result : \"</span> + username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span> &#125;)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Callable&gt; callableList = <span class=\"keyword\">new</span> ArrayList&lt;Callable&gt;(</span><br><span class=\"line\">\t\t\t\tArrays.asList(<span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username1\"</span>, <span class=\"number\">5000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username2\"</span>, <span class=\"number\">4000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username3\"</span>, <span class=\"number\">3000</span>),</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username4\"</span>, <span class=\"number\">2000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username5\"</span>, <span class=\"number\">1000</span>)));</span><br><span class=\"line\">\t\tList&lt;Future&gt; futureList = <span class=\"keyword\">new</span> ArrayList&lt;Future&gt;();</span><br><span class=\"line\">\t\tThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> LinkedBlockingDeque());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tfutureList.add(executor.submit(callableList.get(i)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(futureList.get(i).get() + <span class=\"string\">\" : \"</span> + System.currentTimeMillis());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出：</span></span><br><span class=\"line\"><span class=\"comment\">username1</span></span><br><span class=\"line\"><span class=\"comment\">username5</span></span><br><span class=\"line\"><span class=\"comment\">username4</span></span><br><span class=\"line\"><span class=\"comment\">username3</span></span><br><span class=\"line\"><span class=\"comment\">username2</span></span><br><span class=\"line\"><span class=\"comment\">由于第一个任务耗时较长，因此后面任务的get()被阻塞。</span></span><br><span class=\"line\"><span class=\"comment\">Result : username1 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">Result : username2 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">Result : username3 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">Result : username4 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">Result : username5 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><code>CompletionSerivce</code>可以解决这个批处理等待问题。也就是哪个任务先执行完，<code>CompletionSerivce</code>就先取得这个任务的返回值再处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Callable&gt; callableList = <span class=\"keyword\">new</span> ArrayList&lt;Callable&gt;(</span><br><span class=\"line\">\t\t\t\tArrays.asList(<span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username1\"</span>, <span class=\"number\">5000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username2\"</span>, <span class=\"number\">4000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username3\"</span>, <span class=\"number\">3000</span>),</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username4\"</span>, <span class=\"number\">2000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username5\"</span>, <span class=\"number\">1000</span>)));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> LinkedBlockingDeque());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tCompletionService cs = <span class=\"keyword\">new</span> ExecutorCompletionService(executor);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tcs.submit(callableList.get(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t    <span class=\"comment\">// take可以阻塞式地获得下一个任务的future</span></span><br><span class=\"line\">\t\t\t    <span class=\"comment\">// poll方式则是非阻塞式地获得下一个任务的future</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(cs.take().get() + <span class=\"string\">\" : \"</span> + System.currentTimeMillis());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出</span></span><br><span class=\"line\"><span class=\"comment\">username2</span></span><br><span class=\"line\"><span class=\"comment\">username5</span></span><br><span class=\"line\"><span class=\"comment\">username4</span></span><br><span class=\"line\"><span class=\"comment\">username3</span></span><br><span class=\"line\"><span class=\"comment\">username1</span></span><br><span class=\"line\"><span class=\"comment\">Result : username5 : 1520215083204</span></span><br><span class=\"line\"><span class=\"comment\">Result : username4 : 1520215084203</span></span><br><span class=\"line\"><span class=\"comment\">Result : username3 : 1520215085203</span></span><br><span class=\"line\"><span class=\"comment\">Result : username2 : 1520215086203</span></span><br><span class=\"line\"><span class=\"comment\">Result : username1 : 1520215087203</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><code>Future</code>调用<code>get()</code>方法时，是阻塞的，也就是如果调用<code>Future</code>对象的<code>get()</code>方法时，任务尚未完成，则调用<code>get()</code>方法时会一直阻塞到此任务完成为止。如果是这样的结果，则前面先执行的任务一旦耗时很多，则后面调用<code>get()</code>方法就成为了阻塞状态，排队进行等待，大大影响运行效率。主线程不能保证首先获得的是最先完成任务的返回值，这就是<code>Future</code>的缺点。<br>","more":"<br>下面用一个例子来演示<code>Future</code>批处理的缺点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> sleepValue;</span><br><span class=\"line\"></span><br><span class=\"line\">\tShit(String username, <span class=\"keyword\">long</span> sleepValue) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sleepValue = sleepValue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(username);</span><br><span class=\"line\">\t\tThread.sleep(sleepValue);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Result : \"</span> + username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span> &#125;)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Callable&gt; callableList = <span class=\"keyword\">new</span> ArrayList&lt;Callable&gt;(</span><br><span class=\"line\">\t\t\t\tArrays.asList(<span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username1\"</span>, <span class=\"number\">5000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username2\"</span>, <span class=\"number\">4000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username3\"</span>, <span class=\"number\">3000</span>),</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username4\"</span>, <span class=\"number\">2000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username5\"</span>, <span class=\"number\">1000</span>)));</span><br><span class=\"line\">\t\tList&lt;Future&gt; futureList = <span class=\"keyword\">new</span> ArrayList&lt;Future&gt;();</span><br><span class=\"line\">\t\tThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> LinkedBlockingDeque());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tfutureList.add(executor.submit(callableList.get(i)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(futureList.get(i).get() + <span class=\"string\">\" : \"</span> + System.currentTimeMillis());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出：</span></span><br><span class=\"line\"><span class=\"comment\">username1</span></span><br><span class=\"line\"><span class=\"comment\">username5</span></span><br><span class=\"line\"><span class=\"comment\">username4</span></span><br><span class=\"line\"><span class=\"comment\">username3</span></span><br><span class=\"line\"><span class=\"comment\">username2</span></span><br><span class=\"line\"><span class=\"comment\">由于第一个任务耗时较长，因此后面任务的get()被阻塞。</span></span><br><span class=\"line\"><span class=\"comment\">Result : username1 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">Result : username2 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">Result : username3 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">Result : username4 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">Result : username5 : 1520214428110</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><code>CompletionSerivce</code>可以解决这个批处理等待问题。也就是哪个任务先执行完，<code>CompletionSerivce</code>就先取得这个任务的返回值再处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Callable&gt; callableList = <span class=\"keyword\">new</span> ArrayList&lt;Callable&gt;(</span><br><span class=\"line\">\t\t\t\tArrays.asList(<span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username1\"</span>, <span class=\"number\">5000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username2\"</span>, <span class=\"number\">4000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username3\"</span>, <span class=\"number\">3000</span>),</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username4\"</span>, <span class=\"number\">2000</span>), <span class=\"keyword\">new</span> Shit(<span class=\"string\">\"username5\"</span>, <span class=\"number\">1000</span>)));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> LinkedBlockingDeque());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tCompletionService cs = <span class=\"keyword\">new</span> ExecutorCompletionService(executor);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tcs.submit(callableList.get(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t    <span class=\"comment\">// take可以阻塞式地获得下一个任务的future</span></span><br><span class=\"line\">\t\t\t    <span class=\"comment\">// poll方式则是非阻塞式地获得下一个任务的future</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(cs.take().get() + <span class=\"string\">\" : \"</span> + System.currentTimeMillis());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出</span></span><br><span class=\"line\"><span class=\"comment\">username2</span></span><br><span class=\"line\"><span class=\"comment\">username5</span></span><br><span class=\"line\"><span class=\"comment\">username4</span></span><br><span class=\"line\"><span class=\"comment\">username3</span></span><br><span class=\"line\"><span class=\"comment\">username1</span></span><br><span class=\"line\"><span class=\"comment\">Result : username5 : 1520215083204</span></span><br><span class=\"line\"><span class=\"comment\">Result : username4 : 1520215084203</span></span><br><span class=\"line\"><span class=\"comment\">Result : username3 : 1520215085203</span></span><br><span class=\"line\"><span class=\"comment\">Result : username2 : 1520215086203</span></span><br><span class=\"line\"><span class=\"comment\">Result : username1 : 1520215087203</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>"},{"title":"JAVA并发编程之ReetrantLock","date":"2016-08-02T16:00:00.000Z","_content":"\n``ReentrantLock``类似于``synchronized``，有着相同的语义，可以实现重入锁的特性。但是相对于``synchronized``，``ReentrantLock``具有以下几个特性：\n- ``ReenTrantLock``可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。\n- ``ReenTrantLock``提供了一个``Condition``（条件）类，用来实现唤醒需要唤醒的线程们。\n- ``ReenTrantLock``可以通过通过``lock.lockInterruptibly()``来实现锁中断机制。\n- ``ReenTrantLockd``的等待可中断，持有锁的线程不释放的时候，正在等待的线程可以放弃等待，通过``tryLock``来实现。\n- ``synchronized``在jvm层面实现，而``ReenTrantLock``通过代码实现，需要手动释放锁。\n- 竞争激烈的情况下，``synchronized``的性能要弱于``ReenTrantLock``。\n<!-- more -->\n## 一个普通使用例子：\n``` java\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class Shit implements Runnable {\n\t\n\tfinal static ReentrantLock lock = new ReentrantLock();\n\t final static Condition condition=lock.newCondition();\n\tstatic int count = 0;\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tShit shit = new Shit();\n\t\tThread t1 = new Thread(shit, \"T1\");\n\t\tt1.start();\n\t\tThread.sleep(200); // 不等待会报错\n\t\tsignal();\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\t\n\t\ttry {\n\t\t\tif(lock.tryLock()) {\n\t\t\t\tcondition.await();\n\t\t\t\tfor(int i=0; i<5;i++) {\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"Lock failed!\");\n\t\t\t}\n\t\t\t\t\t\n\t\t} catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}finally {\n\t\t\tlock.unlock();\n\t\t}\n\t}\n\t\n\tpublic static void signal() {\n        try\n        {\n            if(lock.tryLock()) {\n                condition.signal(); // 必须先lock再signal\n            }else {\n            \tSystem.out.println(\"Lock failed!\");\n            }\n        }\n        finally\n        {\n            lock.unlock();\n        }\n\t}\n}\n\n\n```\n\n## 公平锁与非公平锁\n``` java\npublic class Shit implements Runnable {\n\n\tfinal static ReentrantLock lock = new ReentrantLock(true);\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tShit shit = new Shit();\n\t\tThread t1 = new Thread(shit, \"T1\");\n\t\tThread t2 = new Thread(shit, \"T2\");\n\t\tt1.start();\n\t\tt2.start();\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \": get the lock\");\n\t\t\t} finally {\n\t\t\t\tlock.unlock();\n\t\t\t}\n\t\t}\n\t}\n}\n\n/* 输出\n\nT1: get the lock\nT2: get the lock\nT1: get the lock\nT2: get the lock\n......\n*/\n\n```\n公平锁的前提下，两个线程会交替获得锁，当``ReentrantLock``没有设为``true``时，则是非公平锁，不会出现这种现象。同样地，``synchronized``也不会出现公平锁的交替获得锁的现象，而是随机的。\n``` java\n\t@Override\n\tpublic void run() {\n\t\twhile (true) {\n\t\t\tsynchronized(this) {\n\t\t\t\ttry {\n\t\t\t\t\tlock.lock();\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \": get the lock\");\n\t\t\t\t} finally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n## 可中断锁\n``` java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class Shit {\n\n\tpublic static void test3() throws Exception {\n\t\tfinal Lock lock = new ReentrantLock();\n\t\tlock.lock();\n\t\tThread t1 = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tlock.lock();\n\t\t\t\t\t// lock.lockInterruptibly();\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \" interrupted.\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tt1.setName(\"T1\");\n\t\tt1.start();\n\t\tThread.sleep(1000);\n\t\tt1.interrupt();\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\ttest3();\n\t}\n}\n```\n即使调用了``interrupt``，子线程仍然阻塞于获取锁。使用``lockInterruptibly``后，则会优先响应``interrupt``请求。\n\n","source":"_posts/JAVA并发编程之ReentrantLock.md","raw":"---\ntitle: JAVA并发编程之ReetrantLock\ndate: 2016-8-3\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n\n``ReentrantLock``类似于``synchronized``，有着相同的语义，可以实现重入锁的特性。但是相对于``synchronized``，``ReentrantLock``具有以下几个特性：\n- ``ReenTrantLock``可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。\n- ``ReenTrantLock``提供了一个``Condition``（条件）类，用来实现唤醒需要唤醒的线程们。\n- ``ReenTrantLock``可以通过通过``lock.lockInterruptibly()``来实现锁中断机制。\n- ``ReenTrantLockd``的等待可中断，持有锁的线程不释放的时候，正在等待的线程可以放弃等待，通过``tryLock``来实现。\n- ``synchronized``在jvm层面实现，而``ReenTrantLock``通过代码实现，需要手动释放锁。\n- 竞争激烈的情况下，``synchronized``的性能要弱于``ReenTrantLock``。\n<!-- more -->\n## 一个普通使用例子：\n``` java\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class Shit implements Runnable {\n\t\n\tfinal static ReentrantLock lock = new ReentrantLock();\n\t final static Condition condition=lock.newCondition();\n\tstatic int count = 0;\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tShit shit = new Shit();\n\t\tThread t1 = new Thread(shit, \"T1\");\n\t\tt1.start();\n\t\tThread.sleep(200); // 不等待会报错\n\t\tsignal();\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\t\n\t\ttry {\n\t\t\tif(lock.tryLock()) {\n\t\t\t\tcondition.await();\n\t\t\t\tfor(int i=0; i<5;i++) {\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"Lock failed!\");\n\t\t\t}\n\t\t\t\t\t\n\t\t} catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}finally {\n\t\t\tlock.unlock();\n\t\t}\n\t}\n\t\n\tpublic static void signal() {\n        try\n        {\n            if(lock.tryLock()) {\n                condition.signal(); // 必须先lock再signal\n            }else {\n            \tSystem.out.println(\"Lock failed!\");\n            }\n        }\n        finally\n        {\n            lock.unlock();\n        }\n\t}\n}\n\n\n```\n\n## 公平锁与非公平锁\n``` java\npublic class Shit implements Runnable {\n\n\tfinal static ReentrantLock lock = new ReentrantLock(true);\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tShit shit = new Shit();\n\t\tThread t1 = new Thread(shit, \"T1\");\n\t\tThread t2 = new Thread(shit, \"T2\");\n\t\tt1.start();\n\t\tt2.start();\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \": get the lock\");\n\t\t\t} finally {\n\t\t\t\tlock.unlock();\n\t\t\t}\n\t\t}\n\t}\n}\n\n/* 输出\n\nT1: get the lock\nT2: get the lock\nT1: get the lock\nT2: get the lock\n......\n*/\n\n```\n公平锁的前提下，两个线程会交替获得锁，当``ReentrantLock``没有设为``true``时，则是非公平锁，不会出现这种现象。同样地，``synchronized``也不会出现公平锁的交替获得锁的现象，而是随机的。\n``` java\n\t@Override\n\tpublic void run() {\n\t\twhile (true) {\n\t\t\tsynchronized(this) {\n\t\t\t\ttry {\n\t\t\t\t\tlock.lock();\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \": get the lock\");\n\t\t\t\t} finally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n## 可中断锁\n``` java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class Shit {\n\n\tpublic static void test3() throws Exception {\n\t\tfinal Lock lock = new ReentrantLock();\n\t\tlock.lock();\n\t\tThread t1 = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tlock.lock();\n\t\t\t\t\t// lock.lockInterruptibly();\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \" interrupted.\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tt1.setName(\"T1\");\n\t\tt1.start();\n\t\tThread.sleep(1000);\n\t\tt1.interrupt();\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\ttest3();\n\t}\n}\n```\n即使调用了``interrupt``，子线程仍然阻塞于获取锁。使用``lockInterruptibly``后，则会优先响应``interrupt``请求。\n\n","slug":"JAVA并发编程之ReentrantLock","published":1,"updated":"2018-03-03T02:53:58.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26a000yh0url7g6ktfc","content":"<p><code>ReentrantLock</code>类似于<code>synchronized</code>，有着相同的语义，可以实现重入锁的特性。但是相对于<code>synchronized</code>，<code>ReentrantLock</code>具有以下几个特性：</p>\n<ul>\n<li><code>ReenTrantLock</code>可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。</li>\n<li><code>ReenTrantLock</code>提供了一个<code>Condition</code>（条件）类，用来实现唤醒需要唤醒的线程们。</li>\n<li><code>ReenTrantLock</code>可以通过通过<code>lock.lockInterruptibly()</code>来实现锁中断机制。</li>\n<li><code>ReenTrantLockd</code>的等待可中断，持有锁的线程不释放的时候，正在等待的线程可以放弃等待，通过<code>tryLock</code>来实现。</li>\n<li><code>synchronized</code>在jvm层面实现，而<code>ReenTrantLock</code>通过代码实现，需要手动释放锁。</li>\n<li>竞争激烈的情况下，<code>synchronized</code>的性能要弱于<code>ReenTrantLock</code>。<a id=\"more\"></a>\n<h2 id=\"一个普通使用例子：\"><a href=\"#一个普通使用例子：\" class=\"headerlink\" title=\"一个普通使用例子：\"></a>一个普通使用例子：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">\t <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Condition condition=lock.newCondition();</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\t\tShit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">200</span>); <span class=\"comment\">// 不等待会报错</span></span><br><span class=\"line\">\t\tsignal();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lock.tryLock()) &#123;</span><br><span class=\"line\">\t\t\t\tcondition.await();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Lock failed!\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">signal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(lock.tryLock()) &#123;</span><br><span class=\"line\">                condition.signal(); <span class=\"comment\">// 必须先lock再signal</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            \tSystem.out.println(<span class=\"string\">\"Lock failed!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"公平锁与非公平锁\"><a href=\"#公平锁与非公平锁\" class=\"headerlink\" title=\"公平锁与非公平锁\"></a>公平锁与非公平锁</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\t\tShit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T2\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": get the lock\"</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 输出</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">T1: get the lock</span></span><br><span class=\"line\"><span class=\"comment\">T2: get the lock</span></span><br><span class=\"line\"><span class=\"comment\">T1: get the lock</span></span><br><span class=\"line\"><span class=\"comment\">T2: get the lock</span></span><br><span class=\"line\"><span class=\"comment\">......</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>公平锁的前提下，两个线程会交替获得锁，当<code>ReentrantLock</code>没有设为<code>true</code>时，则是非公平锁，不会出现这种现象。同样地，<code>synchronized</code>也不会出现公平锁的交替获得锁的现象，而是随机的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": get the lock\"</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可中断锁\"><a href=\"#可中断锁\" class=\"headerlink\" title=\"可中断锁\"></a>可中断锁</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// lock.lockInterruptibly();</span></span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\" interrupted.\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tt1.setName(<span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\tt1.interrupt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\ttest3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即使调用了<code>interrupt</code>，子线程仍然阻塞于获取锁。使用<code>lockInterruptibly</code>后，则会优先响应<code>interrupt</code>请求。</p>\n","site":{"data":{}},"excerpt":"<p><code>ReentrantLock</code>类似于<code>synchronized</code>，有着相同的语义，可以实现重入锁的特性。但是相对于<code>synchronized</code>，<code>ReentrantLock</code>具有以下几个特性：</p>\n<ul>\n<li><code>ReenTrantLock</code>可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。</li>\n<li><code>ReenTrantLock</code>提供了一个<code>Condition</code>（条件）类，用来实现唤醒需要唤醒的线程们。</li>\n<li><code>ReenTrantLock</code>可以通过通过<code>lock.lockInterruptibly()</code>来实现锁中断机制。</li>\n<li><code>ReenTrantLockd</code>的等待可中断，持有锁的线程不释放的时候，正在等待的线程可以放弃等待，通过<code>tryLock</code>来实现。</li>\n<li><code>synchronized</code>在jvm层面实现，而<code>ReenTrantLock</code>通过代码实现，需要手动释放锁。</li>\n<li>竞争激烈的情况下，<code>synchronized</code>的性能要弱于<code>ReenTrantLock</code>。","more":"<h2 id=\"一个普通使用例子：\"><a href=\"#一个普通使用例子：\" class=\"headerlink\" title=\"一个普通使用例子：\"></a>一个普通使用例子：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">\t <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Condition condition=lock.newCondition();</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\t\tShit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">200</span>); <span class=\"comment\">// 不等待会报错</span></span><br><span class=\"line\">\t\tsignal();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lock.tryLock()) &#123;</span><br><span class=\"line\">\t\t\t\tcondition.await();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Lock failed!\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">signal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(lock.tryLock()) &#123;</span><br><span class=\"line\">                condition.signal(); <span class=\"comment\">// 必须先lock再signal</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            \tSystem.out.println(<span class=\"string\">\"Lock failed!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"公平锁与非公平锁\"><a href=\"#公平锁与非公平锁\" class=\"headerlink\" title=\"公平锁与非公平锁\"></a>公平锁与非公平锁</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\t\tShit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T2\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": get the lock\"</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 输出</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">T1: get the lock</span></span><br><span class=\"line\"><span class=\"comment\">T2: get the lock</span></span><br><span class=\"line\"><span class=\"comment\">T1: get the lock</span></span><br><span class=\"line\"><span class=\"comment\">T2: get the lock</span></span><br><span class=\"line\"><span class=\"comment\">......</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>公平锁的前提下，两个线程会交替获得锁，当<code>ReentrantLock</code>没有设为<code>true</code>时，则是非公平锁，不会出现这种现象。同样地，<code>synchronized</code>也不会出现公平锁的交替获得锁的现象，而是随机的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": get the lock\"</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可中断锁\"><a href=\"#可中断锁\" class=\"headerlink\" title=\"可中断锁\"></a>可中断锁</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// lock.lockInterruptibly();</span></span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\" interrupted.\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tt1.setName(<span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\tt1.interrupt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\ttest3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即使调用了<code>interrupt</code>，子线程仍然阻塞于获取锁。使用<code>lockInterruptibly</code>后，则会优先响应<code>interrupt</code>请求。</p>"},{"title":"JAVA并发编程之ReentrantReadWriteLock","date":"2016-08-02T16:00:00.000Z","_content":"\n读写分离锁可以有效地帮助减少竞争，由于读操作并不对数据完整性造成破坏，因此，读写锁允许多个线程同时进行读操作，使得多个线程间真正并行。但是读写操作间仍然是需要相互等待和持有锁的，这些关系可以用下图来表示：\n\n   |读 |写 \n---|---|---\n读 | 非阻塞| 阻塞\n写 | 阻塞  | 阻塞\n\n下面用一个例子来对比``ReentrantReadWriteLock``和``ReentrantLock``。\n<!-- more -->\n``` java\npackage fuck;\n\nimport java.util.Random;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\npublic class Shit{\n\t\n\tprivate static Lock lock = new ReentrantLock();\n\tprivate static ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();\n\tprivate static Lock rLock = rwLock.readLock();\n\tprivate static Lock wLock = rwLock.writeLock();\n\tprivate int value;\n\t\n\tpublic Object handleRead(Lock lock) throws InterruptedException{\n\t\ttry {\n\t\t\tlock.lock();\n\t\t\tThread.sleep(1000);\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \": read value\" + value);\n\t\t\treturn value;\n\t\t}finally {\n\t\t\tlock.unlock();\n\t\t}\n\t}\n\t\n\tpublic void handleWrite(Lock lock, int index) throws InterruptedException{\n\t\ttry {\n\t\t\tlock.lock();\n\t\t\tThread.sleep(1000);\n\t\t\t value = index;\n\t\t\t System.out.println(Thread.currentThread().getName() + \": write value\" + value);\n\t\t}finally {\n\t\t\tlock.unlock();\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tfinal Shit shit = new Shit();\n\t\tRunnable readRun = new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t//shit.handleRead(rLock);\n\t\t\t\t\tshit.handleRead(lock);\n\t\t\t\t}catch(InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tRunnable writeRun = new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t//shit.handleWrite(rLock, new Random().nextInt());\n\t\t\t\t\tshit.handleWrite(lock,  new Random().nextInt());\n\t\t\t\t}catch(InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tfor(int i =0 ; i<18;i++) {\n\t\t\tnew Thread(readRun, \"T\"+i).start();\n\t\t}\n\t\t\n\t\tfor(int i = 18; i<20;i++) {\n\t\t\tnew Thread(writeRun, \"T\" + i).start();\n\t\t}\n\t}\n}\n```\n当锁类型为读写锁时，因为读取过程不阻塞，所有线程将同时开始读取数据，同时，写线程在一秒后也开始写，两个写过程互斥，总共用时2秒。\n当锁类型为重入锁时，所有线程任意过程都互相阻塞，因此用时大于20秒。\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/JAVA并发编程之ReentrantReadWriteLock.md","raw":"---\ntitle: JAVA并发编程之ReentrantReadWriteLock\ndate: 2016-8-3\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n\n读写分离锁可以有效地帮助减少竞争，由于读操作并不对数据完整性造成破坏，因此，读写锁允许多个线程同时进行读操作，使得多个线程间真正并行。但是读写操作间仍然是需要相互等待和持有锁的，这些关系可以用下图来表示：\n\n   |读 |写 \n---|---|---\n读 | 非阻塞| 阻塞\n写 | 阻塞  | 阻塞\n\n下面用一个例子来对比``ReentrantReadWriteLock``和``ReentrantLock``。\n<!-- more -->\n``` java\npackage fuck;\n\nimport java.util.Random;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\npublic class Shit{\n\t\n\tprivate static Lock lock = new ReentrantLock();\n\tprivate static ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();\n\tprivate static Lock rLock = rwLock.readLock();\n\tprivate static Lock wLock = rwLock.writeLock();\n\tprivate int value;\n\t\n\tpublic Object handleRead(Lock lock) throws InterruptedException{\n\t\ttry {\n\t\t\tlock.lock();\n\t\t\tThread.sleep(1000);\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \": read value\" + value);\n\t\t\treturn value;\n\t\t}finally {\n\t\t\tlock.unlock();\n\t\t}\n\t}\n\t\n\tpublic void handleWrite(Lock lock, int index) throws InterruptedException{\n\t\ttry {\n\t\t\tlock.lock();\n\t\t\tThread.sleep(1000);\n\t\t\t value = index;\n\t\t\t System.out.println(Thread.currentThread().getName() + \": write value\" + value);\n\t\t}finally {\n\t\t\tlock.unlock();\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tfinal Shit shit = new Shit();\n\t\tRunnable readRun = new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t//shit.handleRead(rLock);\n\t\t\t\t\tshit.handleRead(lock);\n\t\t\t\t}catch(InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tRunnable writeRun = new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t//shit.handleWrite(rLock, new Random().nextInt());\n\t\t\t\t\tshit.handleWrite(lock,  new Random().nextInt());\n\t\t\t\t}catch(InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tfor(int i =0 ; i<18;i++) {\n\t\t\tnew Thread(readRun, \"T\"+i).start();\n\t\t}\n\t\t\n\t\tfor(int i = 18; i<20;i++) {\n\t\t\tnew Thread(writeRun, \"T\" + i).start();\n\t\t}\n\t}\n}\n```\n当锁类型为读写锁时，因为读取过程不阻塞，所有线程将同时开始读取数据，同时，写线程在一秒后也开始写，两个写过程互斥，总共用时2秒。\n当锁类型为重入锁时，所有线程任意过程都互相阻塞，因此用时大于20秒。\n\n\n\n\n\n\n\n\n\n\n","slug":"JAVA并发编程之ReentrantReadWriteLock","published":1,"updated":"2018-03-03T12:09:35.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26e0012h0urfzf34vdx","content":"<p>读写分离锁可以有效地帮助减少竞争，由于读操作并不对数据完整性造成破坏，因此，读写锁允许多个线程同时进行读操作，使得多个线程间真正并行。但是读写操作间仍然是需要相互等待和持有锁的，这些关系可以用下图来表示：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>读</th>\n<th>写 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读</td>\n<td>非阻塞</td>\n<td>阻塞</td>\n</tr>\n<tr>\n<td>写</td>\n<td>阻塞</td>\n<td>阻塞</td>\n</tr>\n</tbody>\n</table>\n<p>下面用一个例子来对比<code>ReentrantReadWriteLock</code>和<code>ReentrantLock</code>。<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> fuck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantReadWriteLock rwLock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock rLock = rwLock.readLock();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock wLock = rwLock.writeLock();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">handleRead</span><span class=\"params\">(Lock lock)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": read value\"</span> + value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleWrite</span><span class=\"params\">(Lock lock, <span class=\"keyword\">int</span> index)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t value = index;</span><br><span class=\"line\">\t\t\t System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": write value\"</span> + value);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Shit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tRunnable readRun = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//shit.handleRead(rLock);</span></span><br><span class=\"line\">\t\t\t\t\tshit.handleRead(lock);</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tRunnable writeRun = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//shit.handleWrite(rLock, new Random().nextInt());</span></span><br><span class=\"line\">\t\t\t\t\tshit.handleWrite(lock,  <span class=\"keyword\">new</span> Random().nextInt());</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span> ; i&lt;<span class=\"number\">18</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(readRun, <span class=\"string\">\"T\"</span>+i).start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">18</span>; i&lt;<span class=\"number\">20</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(writeRun, <span class=\"string\">\"T\"</span> + i).start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当锁类型为读写锁时，因为读取过程不阻塞，所有线程将同时开始读取数据，同时，写线程在一秒后也开始写，两个写过程互斥，总共用时2秒。<br>当锁类型为重入锁时，所有线程任意过程都互相阻塞，因此用时大于20秒。</p>\n","site":{"data":{}},"excerpt":"<p>读写分离锁可以有效地帮助减少竞争，由于读操作并不对数据完整性造成破坏，因此，读写锁允许多个线程同时进行读操作，使得多个线程间真正并行。但是读写操作间仍然是需要相互等待和持有锁的，这些关系可以用下图来表示：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>读</th>\n<th>写 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读</td>\n<td>非阻塞</td>\n<td>阻塞</td>\n</tr>\n<tr>\n<td>写</td>\n<td>阻塞</td>\n<td>阻塞</td>\n</tr>\n</tbody>\n</table>\n<p>下面用一个例子来对比<code>ReentrantReadWriteLock</code>和<code>ReentrantLock</code>。<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> fuck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantReadWriteLock rwLock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock rLock = rwLock.readLock();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock wLock = rwLock.writeLock();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">handleRead</span><span class=\"params\">(Lock lock)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": read value\"</span> + value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleWrite</span><span class=\"params\">(Lock lock, <span class=\"keyword\">int</span> index)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tlock.lock();</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t value = index;</span><br><span class=\"line\">\t\t\t System.out.println(Thread.currentThread().getName() + <span class=\"string\">\": write value\"</span> + value);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Shit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tRunnable readRun = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//shit.handleRead(rLock);</span></span><br><span class=\"line\">\t\t\t\t\tshit.handleRead(lock);</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tRunnable writeRun = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//shit.handleWrite(rLock, new Random().nextInt());</span></span><br><span class=\"line\">\t\t\t\t\tshit.handleWrite(lock,  <span class=\"keyword\">new</span> Random().nextInt());</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span> ; i&lt;<span class=\"number\">18</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(readRun, <span class=\"string\">\"T\"</span>+i).start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">18</span>; i&lt;<span class=\"number\">20</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(writeRun, <span class=\"string\">\"T\"</span> + i).start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当锁类型为读写锁时，因为读取过程不阻塞，所有线程将同时开始读取数据，同时，写线程在一秒后也开始写，两个写过程互斥，总共用时2秒。<br>当锁类型为重入锁时，所有线程任意过程都互相阻塞，因此用时大于20秒。</p>"},{"title":"JAVA并发编程之Synchronized","date":"2016-07-31T16:00:00.000Z","_content":"\nJAVA中的``Synchronized``可以用来修饰以下几个对象：\n\n- 代码块，作用范围是用大括号括起来的部分。\n- 方法，作用范围是整个方法。\n- 静态方法，作用范围是整个静态方法。\n- 类，作用范围是``Synchronized``后面括号括起来的部分。\n\n<!-- more -->\n\n## ``Synchronized``作用于代码块\n``` java\npublic class Shit implements Runnable {\n\tstatic int count = 0;\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tShit shit = new Shit();\n\t\tThread t1 = new Thread(shit, \"T1\");\n\t\tThread t2 = new Thread(shit, \"T2\");\n\t\tt1.start();\n\t\tt2.start();\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\tsynchronized(this) {\n\t\t\tfor(int i=0; i<5;i++) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t\t\t}\n\t\t}\n\t}\n}\n/* \nT1:0\nT1:1\nT1:2\nT1:3\nT1:4\nT2:5\nT2:6\nT2:7\nT2:8\nT2:9\n*/\n```\n当两个并发线程访问同一个synchronized代码块时，同一个时刻只能有一个线程得到执行，而另一个线程会被阻塞，直至这个线程执行完成。除了``this``外，也可以指定对象进行加锁，没有明确对象时，可以使用byte[0]来充当锁的对象。\n## ``Synchronized``作用于方法\n``` java\n@Override\npublic void run() {\n\tcountNumber();\n}\n\t\nprivate synchronized  void countNumber(){\n\tfor(int i=0; i<5;i++) {\n\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t}\n}\n```\nSynchronized修饰一个方法，就是在方法的前面加synchronized。和修饰一个代码块类似，只是作用范围不一样。前者是大括号内的代码，后者是整个方法。\n## ``Synchronized``作用于静态方法\n``` java\n@Override\npublic void run() {\n\tcountNumber();\n}\n\t\nprivate static synchronized  void countNumber(){\n\tfor(int i=0; i<5;i++) {\n\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t}\n}\n\npublic static void main(String[] args) throws InterruptedException {\n\tThread t1 = new Thread(new Shit(), \"T1\");\n\tThread t2 = new Thread(new Shit(), \"T2\");\n\tt1.start();\n\tt2.start();\n}\n```\n静态方法属于类，两个线程相当于使用了同一把锁，因此可以线程同步。\n\n## ``Synchronized``作用于类\n``` java\n\n\t@Override\n\tpublic void run() {\n\t\tsynchronized(Shit.class) {\n\t\t\tfor(int i=0; i<5;i++) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t\t\t}\n\t\t}\n\t}\n```\n同上一个一致，都是对类加锁，两个线程相当于使用了同一把锁，因此可以线程同步。","source":"_posts/JAVA并发编程之Synchronized.md","raw":"---\ntitle: JAVA并发编程之Synchronized\ndate: 2016-8-1\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n\nJAVA中的``Synchronized``可以用来修饰以下几个对象：\n\n- 代码块，作用范围是用大括号括起来的部分。\n- 方法，作用范围是整个方法。\n- 静态方法，作用范围是整个静态方法。\n- 类，作用范围是``Synchronized``后面括号括起来的部分。\n\n<!-- more -->\n\n## ``Synchronized``作用于代码块\n``` java\npublic class Shit implements Runnable {\n\tstatic int count = 0;\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tShit shit = new Shit();\n\t\tThread t1 = new Thread(shit, \"T1\");\n\t\tThread t2 = new Thread(shit, \"T2\");\n\t\tt1.start();\n\t\tt2.start();\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\tsynchronized(this) {\n\t\t\tfor(int i=0; i<5;i++) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t\t\t}\n\t\t}\n\t}\n}\n/* \nT1:0\nT1:1\nT1:2\nT1:3\nT1:4\nT2:5\nT2:6\nT2:7\nT2:8\nT2:9\n*/\n```\n当两个并发线程访问同一个synchronized代码块时，同一个时刻只能有一个线程得到执行，而另一个线程会被阻塞，直至这个线程执行完成。除了``this``外，也可以指定对象进行加锁，没有明确对象时，可以使用byte[0]来充当锁的对象。\n## ``Synchronized``作用于方法\n``` java\n@Override\npublic void run() {\n\tcountNumber();\n}\n\t\nprivate synchronized  void countNumber(){\n\tfor(int i=0; i<5;i++) {\n\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t}\n}\n```\nSynchronized修饰一个方法，就是在方法的前面加synchronized。和修饰一个代码块类似，只是作用范围不一样。前者是大括号内的代码，后者是整个方法。\n## ``Synchronized``作用于静态方法\n``` java\n@Override\npublic void run() {\n\tcountNumber();\n}\n\t\nprivate static synchronized  void countNumber(){\n\tfor(int i=0; i<5;i++) {\n\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t}\n}\n\npublic static void main(String[] args) throws InterruptedException {\n\tThread t1 = new Thread(new Shit(), \"T1\");\n\tThread t2 = new Thread(new Shit(), \"T2\");\n\tt1.start();\n\tt2.start();\n}\n```\n静态方法属于类，两个线程相当于使用了同一把锁，因此可以线程同步。\n\n## ``Synchronized``作用于类\n``` java\n\n\t@Override\n\tpublic void run() {\n\t\tsynchronized(Shit.class) {\n\t\t\tfor(int i=0; i<5;i++) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + (count++));\n\t\t\t}\n\t\t}\n\t}\n```\n同上一个一致，都是对类加锁，两个线程相当于使用了同一把锁，因此可以线程同步。","slug":"JAVA并发编程之Synchronized","published":1,"updated":"2018-03-02T12:14:31.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26h0016h0urj4b7wqma","content":"<p>JAVA中的<code>Synchronized</code>可以用来修饰以下几个对象：</p>\n<ul>\n<li>代码块，作用范围是用大括号括起来的部分。</li>\n<li>方法，作用范围是整个方法。</li>\n<li>静态方法，作用范围是整个静态方法。</li>\n<li>类，作用范围是<code>Synchronized</code>后面括号括起来的部分。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Synchronized作用于代码块\"><a href=\"#Synchronized作用于代码块\" class=\"headerlink\" title=\"Synchronized作用于代码块\"></a><code>Synchronized</code>作用于代码块</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\t\tShit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T2\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">T1:0</span></span><br><span class=\"line\"><span class=\"comment\">T1:1</span></span><br><span class=\"line\"><span class=\"comment\">T1:2</span></span><br><span class=\"line\"><span class=\"comment\">T1:3</span></span><br><span class=\"line\"><span class=\"comment\">T1:4</span></span><br><span class=\"line\"><span class=\"comment\">T2:5</span></span><br><span class=\"line\"><span class=\"comment\">T2:6</span></span><br><span class=\"line\"><span class=\"comment\">T2:7</span></span><br><span class=\"line\"><span class=\"comment\">T2:8</span></span><br><span class=\"line\"><span class=\"comment\">T2:9</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>当两个并发线程访问同一个synchronized代码块时，同一个时刻只能有一个线程得到执行，而另一个线程会被阻塞，直至这个线程执行完成。除了<code>this</code>外，也可以指定对象进行加锁，没有明确对象时，可以使用byte[0]来充当锁的对象。</p>\n<h2 id=\"Synchronized作用于方法\"><a href=\"#Synchronized作用于方法\" class=\"headerlink\" title=\"Synchronized作用于方法\"></a><code>Synchronized</code>作用于方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcountNumber();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span>  <span class=\"keyword\">void</span> <span class=\"title\">countNumber</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Synchronized修饰一个方法，就是在方法的前面加synchronized。和修饰一个代码块类似，只是作用范围不一样。前者是大括号内的代码，后者是整个方法。</p>\n<h2 id=\"Synchronized作用于静态方法\"><a href=\"#Synchronized作用于静态方法\" class=\"headerlink\" title=\"Synchronized作用于静态方法\"></a><code>Synchronized</code>作用于静态方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcountNumber();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span>  <span class=\"keyword\">void</span> <span class=\"title\">countNumber</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Shit(), <span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Shit(), <span class=\"string\">\"T2\"</span>);</span><br><span class=\"line\">\tt1.start();</span><br><span class=\"line\">\tt2.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>静态方法属于类，两个线程相当于使用了同一把锁，因此可以线程同步。</p>\n<h2 id=\"Synchronized作用于类\"><a href=\"#Synchronized作用于类\" class=\"headerlink\" title=\"Synchronized作用于类\"></a><code>Synchronized</code>作用于类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">synchronized</span>(Shit.class) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同上一个一致，都是对类加锁，两个线程相当于使用了同一把锁，因此可以线程同步。</p>\n","site":{"data":{}},"excerpt":"<p>JAVA中的<code>Synchronized</code>可以用来修饰以下几个对象：</p>\n<ul>\n<li>代码块，作用范围是用大括号括起来的部分。</li>\n<li>方法，作用范围是整个方法。</li>\n<li>静态方法，作用范围是整个静态方法。</li>\n<li>类，作用范围是<code>Synchronized</code>后面括号括起来的部分。</li>\n</ul>","more":"<h2 id=\"Synchronized作用于代码块\"><a href=\"#Synchronized作用于代码块\" class=\"headerlink\" title=\"Synchronized作用于代码块\"></a><code>Synchronized</code>作用于代码块</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\t\tShit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(shit, <span class=\"string\">\"T2\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">T1:0</span></span><br><span class=\"line\"><span class=\"comment\">T1:1</span></span><br><span class=\"line\"><span class=\"comment\">T1:2</span></span><br><span class=\"line\"><span class=\"comment\">T1:3</span></span><br><span class=\"line\"><span class=\"comment\">T1:4</span></span><br><span class=\"line\"><span class=\"comment\">T2:5</span></span><br><span class=\"line\"><span class=\"comment\">T2:6</span></span><br><span class=\"line\"><span class=\"comment\">T2:7</span></span><br><span class=\"line\"><span class=\"comment\">T2:8</span></span><br><span class=\"line\"><span class=\"comment\">T2:9</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>当两个并发线程访问同一个synchronized代码块时，同一个时刻只能有一个线程得到执行，而另一个线程会被阻塞，直至这个线程执行完成。除了<code>this</code>外，也可以指定对象进行加锁，没有明确对象时，可以使用byte[0]来充当锁的对象。</p>\n<h2 id=\"Synchronized作用于方法\"><a href=\"#Synchronized作用于方法\" class=\"headerlink\" title=\"Synchronized作用于方法\"></a><code>Synchronized</code>作用于方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcountNumber();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span>  <span class=\"keyword\">void</span> <span class=\"title\">countNumber</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Synchronized修饰一个方法，就是在方法的前面加synchronized。和修饰一个代码块类似，只是作用范围不一样。前者是大括号内的代码，后者是整个方法。</p>\n<h2 id=\"Synchronized作用于静态方法\"><a href=\"#Synchronized作用于静态方法\" class=\"headerlink\" title=\"Synchronized作用于静态方法\"></a><code>Synchronized</code>作用于静态方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcountNumber();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span>  <span class=\"keyword\">void</span> <span class=\"title\">countNumber</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Shit(), <span class=\"string\">\"T1\"</span>);</span><br><span class=\"line\">\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Shit(), <span class=\"string\">\"T2\"</span>);</span><br><span class=\"line\">\tt1.start();</span><br><span class=\"line\">\tt2.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>静态方法属于类，两个线程相当于使用了同一把锁，因此可以线程同步。</p>\n<h2 id=\"Synchronized作用于类\"><a href=\"#Synchronized作用于类\" class=\"headerlink\" title=\"Synchronized作用于类\"></a><code>Synchronized</code>作用于类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">synchronized</span>(Shit.class) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + (count++));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同上一个一致，都是对类加锁，两个线程相当于使用了同一把锁，因此可以线程同步。</p>"},{"title":"JAVA并发编程之ThreadLocal","date":"2016-08-04T16:00:00.000Z","_content":"\n当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。从线程的角度看，目标变量就像是线程的本地变量。\n<!-- more -->\n下面是ThreadLocal的set方法源码，可以看出，set由以下几个步骤组成：\n- 首先获取当前线程\n- 从当前线程获取一个ThreadLocalMap的对象\n- 如果上述ThreadLocalMap对象不为空，则设置值，否则创建这个ThreadLocalMap对象并设置值\n所以，ThreadLocal的值是放入了当前线程的一个ThreadLocalMap实例中，所以只能在本线程中访问，其他线程无法访问。这就实现了“目标变量就像是线程的本地变量”这一特性。\n```\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n```\n\nThreadLocal的内存泄漏：\n\n> ThreadLocalMap里面的key为ThreadLocal对象的弱引用，当一个线程调用ThreadLocal的set方法设置变量时候，当前线程的ThreadLocalMap里面就会存放一个记录，这个记录的key为ThreadLocal的引用，value则为设置的值。如果当前线程一直存在而没有调用ThreadLocal的remove方法，并且这时候其它地方还是有对ThreadLocal的引用，则当前线程的ThreadLocalMap变量里面会存在ThreadLocal变量的引用和value对象的引用是不会被释放的，这就会造成内存泄露的。但是考虑如果这个ThreadLocal变量没有了其他强依赖，而当前线程还存在的情况下，由于线程的ThreadLocalMap里面的key是弱依赖，则当前线程的ThreadLocalMap里面的ThreadLocal变量的弱引用会被在gc的时候回收，但是对应value还是会造成内存泄露，这时候ThreadLocalMap里面就会存在key为null但是value不为null的entry项。\n\n\n\n用法实例：\n``` java\npublic class Shit{\n\tprivate static ThreadLocal<Integer> seqNum = new ThreadLocal<Integer>() {\n\t\tpublic Integer initialValue() {\n\t\t\treturn 0;\n\t\t}\n\t};\n\n\tpublic static void main(String [] args) {\n\t\tTestClient t1 = new TestClient();\n\t\tTestClient t2 = new TestClient();\n\t\tTestClient t3 = new TestClient();\n\t\tt1.start();\n\t\tt2.start();\n\t\tt3.start();\n\t}\n\t\n\tprivate static class TestClient extends Thread{\n\t\tpublic void run() {\n\t\t\tfor(int i =0;i<3;i++) {\n\t\t\t\tseqNum.set(i);\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \": seqNum = \" + seqNum.get());\n\t\t\t}\n\t\t}\n\t}\n}\n/* 输出：\nThread-0: seqNum = 0\nThread-1: seqNum = 0\nThread-2: seqNum = 0\nThread-1: seqNum = 1\nThread-0: seqNum = 1\nThread-0: seqNum = 2\nThread-1: seqNum = 2\nThread-2: seqNum = 1\nThread-2: seqNum = 2\n*/\n```","source":"_posts/JAVA并发编程之ThreadLocal.md","raw":"---\ntitle: JAVA并发编程之ThreadLocal\ndate: 2016-8-5\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n\n当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。从线程的角度看，目标变量就像是线程的本地变量。\n<!-- more -->\n下面是ThreadLocal的set方法源码，可以看出，set由以下几个步骤组成：\n- 首先获取当前线程\n- 从当前线程获取一个ThreadLocalMap的对象\n- 如果上述ThreadLocalMap对象不为空，则设置值，否则创建这个ThreadLocalMap对象并设置值\n所以，ThreadLocal的值是放入了当前线程的一个ThreadLocalMap实例中，所以只能在本线程中访问，其他线程无法访问。这就实现了“目标变量就像是线程的本地变量”这一特性。\n```\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n```\n\nThreadLocal的内存泄漏：\n\n> ThreadLocalMap里面的key为ThreadLocal对象的弱引用，当一个线程调用ThreadLocal的set方法设置变量时候，当前线程的ThreadLocalMap里面就会存放一个记录，这个记录的key为ThreadLocal的引用，value则为设置的值。如果当前线程一直存在而没有调用ThreadLocal的remove方法，并且这时候其它地方还是有对ThreadLocal的引用，则当前线程的ThreadLocalMap变量里面会存在ThreadLocal变量的引用和value对象的引用是不会被释放的，这就会造成内存泄露的。但是考虑如果这个ThreadLocal变量没有了其他强依赖，而当前线程还存在的情况下，由于线程的ThreadLocalMap里面的key是弱依赖，则当前线程的ThreadLocalMap里面的ThreadLocal变量的弱引用会被在gc的时候回收，但是对应value还是会造成内存泄露，这时候ThreadLocalMap里面就会存在key为null但是value不为null的entry项。\n\n\n\n用法实例：\n``` java\npublic class Shit{\n\tprivate static ThreadLocal<Integer> seqNum = new ThreadLocal<Integer>() {\n\t\tpublic Integer initialValue() {\n\t\t\treturn 0;\n\t\t}\n\t};\n\n\tpublic static void main(String [] args) {\n\t\tTestClient t1 = new TestClient();\n\t\tTestClient t2 = new TestClient();\n\t\tTestClient t3 = new TestClient();\n\t\tt1.start();\n\t\tt2.start();\n\t\tt3.start();\n\t}\n\t\n\tprivate static class TestClient extends Thread{\n\t\tpublic void run() {\n\t\t\tfor(int i =0;i<3;i++) {\n\t\t\t\tseqNum.set(i);\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \": seqNum = \" + seqNum.get());\n\t\t\t}\n\t\t}\n\t}\n}\n/* 输出：\nThread-0: seqNum = 0\nThread-1: seqNum = 0\nThread-2: seqNum = 0\nThread-1: seqNum = 1\nThread-0: seqNum = 1\nThread-0: seqNum = 2\nThread-1: seqNum = 2\nThread-2: seqNum = 1\nThread-2: seqNum = 2\n*/\n```","slug":"JAVA并发编程之ThreadLocal","published":1,"updated":"2018-03-04T12:58:50.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26j001ah0urqev91fos","content":"<p>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。从线程的角度看，目标变量就像是线程的本地变量。<br><a id=\"more\"></a><br>下面是ThreadLocal的set方法源码，可以看出，set由以下几个步骤组成：</p>\n<ul>\n<li>首先获取当前线程</li>\n<li>从当前线程获取一个ThreadLocalMap的对象</li>\n<li>如果上述ThreadLocalMap对象不为空，则设置值，否则创建这个ThreadLocalMap对象并设置值<br>所以，ThreadLocal的值是放入了当前线程的一个ThreadLocalMap实例中，所以只能在本线程中访问，其他线程无法访问。这就实现了“目标变量就像是线程的本地变量”这一特性。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(T value) &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    if (map != null)</span><br><span class=\"line\">        map.set(this, value);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ThreadLocal的内存泄漏：</p>\n<blockquote>\n<p>ThreadLocalMap里面的key为ThreadLocal对象的弱引用，当一个线程调用ThreadLocal的set方法设置变量时候，当前线程的ThreadLocalMap里面就会存放一个记录，这个记录的key为ThreadLocal的引用，value则为设置的值。如果当前线程一直存在而没有调用ThreadLocal的remove方法，并且这时候其它地方还是有对ThreadLocal的引用，则当前线程的ThreadLocalMap变量里面会存在ThreadLocal变量的引用和value对象的引用是不会被释放的，这就会造成内存泄露的。但是考虑如果这个ThreadLocal变量没有了其他强依赖，而当前线程还存在的情况下，由于线程的ThreadLocalMap里面的key是弱依赖，则当前线程的ThreadLocalMap里面的ThreadLocal变量的弱引用会被在gc的时候回收，但是对应value还是会造成内存泄露，这时候ThreadLocalMap里面就会存在key为null但是value不为null的entry项。</p>\n</blockquote>\n<p>用法实例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Integer&gt; seqNum = <span class=\"keyword\">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String [] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestClient t1 = <span class=\"keyword\">new</span> TestClient();</span><br><span class=\"line\">\t\tTestClient t2 = <span class=\"keyword\">new</span> TestClient();</span><br><span class=\"line\">\t\tTestClient t3 = <span class=\"keyword\">new</span> TestClient();</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t\tseqNum.set(i);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": seqNum = \"</span> + seqNum.get());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出：</span></span><br><span class=\"line\"><span class=\"comment\">Thread-0: seqNum = 0</span></span><br><span class=\"line\"><span class=\"comment\">Thread-1: seqNum = 0</span></span><br><span class=\"line\"><span class=\"comment\">Thread-2: seqNum = 0</span></span><br><span class=\"line\"><span class=\"comment\">Thread-1: seqNum = 1</span></span><br><span class=\"line\"><span class=\"comment\">Thread-0: seqNum = 1</span></span><br><span class=\"line\"><span class=\"comment\">Thread-0: seqNum = 2</span></span><br><span class=\"line\"><span class=\"comment\">Thread-1: seqNum = 2</span></span><br><span class=\"line\"><span class=\"comment\">Thread-2: seqNum = 1</span></span><br><span class=\"line\"><span class=\"comment\">Thread-2: seqNum = 2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。从线程的角度看，目标变量就像是线程的本地变量。<br>","more":"<br>下面是ThreadLocal的set方法源码，可以看出，set由以下几个步骤组成：</p>\n<ul>\n<li>首先获取当前线程</li>\n<li>从当前线程获取一个ThreadLocalMap的对象</li>\n<li>如果上述ThreadLocalMap对象不为空，则设置值，否则创建这个ThreadLocalMap对象并设置值<br>所以，ThreadLocal的值是放入了当前线程的一个ThreadLocalMap实例中，所以只能在本线程中访问，其他线程无法访问。这就实现了“目标变量就像是线程的本地变量”这一特性。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(T value) &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    if (map != null)</span><br><span class=\"line\">        map.set(this, value);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ThreadLocal的内存泄漏：</p>\n<blockquote>\n<p>ThreadLocalMap里面的key为ThreadLocal对象的弱引用，当一个线程调用ThreadLocal的set方法设置变量时候，当前线程的ThreadLocalMap里面就会存放一个记录，这个记录的key为ThreadLocal的引用，value则为设置的值。如果当前线程一直存在而没有调用ThreadLocal的remove方法，并且这时候其它地方还是有对ThreadLocal的引用，则当前线程的ThreadLocalMap变量里面会存在ThreadLocal变量的引用和value对象的引用是不会被释放的，这就会造成内存泄露的。但是考虑如果这个ThreadLocal变量没有了其他强依赖，而当前线程还存在的情况下，由于线程的ThreadLocalMap里面的key是弱依赖，则当前线程的ThreadLocalMap里面的ThreadLocal变量的弱引用会被在gc的时候回收，但是对应value还是会造成内存泄露，这时候ThreadLocalMap里面就会存在key为null但是value不为null的entry项。</p>\n</blockquote>\n<p>用法实例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Integer&gt; seqNum = <span class=\"keyword\">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String [] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestClient t1 = <span class=\"keyword\">new</span> TestClient();</span><br><span class=\"line\">\t\tTestClient t2 = <span class=\"keyword\">new</span> TestClient();</span><br><span class=\"line\">\t\tTestClient t3 = <span class=\"keyword\">new</span> TestClient();</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t\tseqNum.set(i);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\": seqNum = \"</span> + seqNum.get());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出：</span></span><br><span class=\"line\"><span class=\"comment\">Thread-0: seqNum = 0</span></span><br><span class=\"line\"><span class=\"comment\">Thread-1: seqNum = 0</span></span><br><span class=\"line\"><span class=\"comment\">Thread-2: seqNum = 0</span></span><br><span class=\"line\"><span class=\"comment\">Thread-1: seqNum = 1</span></span><br><span class=\"line\"><span class=\"comment\">Thread-0: seqNum = 1</span></span><br><span class=\"line\"><span class=\"comment\">Thread-0: seqNum = 2</span></span><br><span class=\"line\"><span class=\"comment\">Thread-1: seqNum = 2</span></span><br><span class=\"line\"><span class=\"comment\">Thread-2: seqNum = 1</span></span><br><span class=\"line\"><span class=\"comment\">Thread-2: seqNum = 2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>"},{"title":"JAVA并发编程之semaphore","date":"2016-08-01T16:00:00.000Z","_content":"信号量是对锁的扩展，无论是synchronized还是ReetrantLock，一次都只允许一个线程访问一个资源，而信号量却可以指定多个线程，同时访问一个资源。\n\n<!-- more -->\n``` java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Semaphore;\n\npublic class Shit implements Runnable {\n\tfinal Semaphore semp = new Semaphore(5);\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tExecutorService exec = Executors.newFixedThreadPool(20);\n\t\tfinal Shit shit = new Shit();\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\texec.submit(shit);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tsemp.acquire();\n\t\t\tThread.sleep(2000);\n\t\t\tSystem.out.println(Thread.currentThread().getId() + \":done\");\n\t\t\tsemp.release();\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n上面这个例子中，将会输出以5个线程为一组的提示文本。","source":"_posts/JAVA并发编程之semaphore.md","raw":"---\ntitle: JAVA并发编程之semaphore\ndate: 2016-8-2\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n信号量是对锁的扩展，无论是synchronized还是ReetrantLock，一次都只允许一个线程访问一个资源，而信号量却可以指定多个线程，同时访问一个资源。\n\n<!-- more -->\n``` java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Semaphore;\n\npublic class Shit implements Runnable {\n\tfinal Semaphore semp = new Semaphore(5);\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tExecutorService exec = Executors.newFixedThreadPool(20);\n\t\tfinal Shit shit = new Shit();\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\texec.submit(shit);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tsemp.acquire();\n\t\t\tThread.sleep(2000);\n\t\t\tSystem.out.println(Thread.currentThread().getId() + \":done\");\n\t\t\tsemp.release();\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n上面这个例子中，将会输出以5个线程为一组的提示文本。","slug":"JAVA并发编程之semaphore","published":1,"updated":"2018-03-03T12:09:46.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26k001ch0uron2fyk3d","content":"<p>信号量是对锁的扩展，无论是synchronized还是ReetrantLock，一次都只允许一个线程访问一个资源，而信号量却可以指定多个线程，同时访问一个资源。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Semaphore semp = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tExecutorService exec = Executors.newFixedThreadPool(<span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Shit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">\t\t\texec.submit(shit);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tsemp.acquire();</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getId() + <span class=\"string\">\":done\"</span>);</span><br><span class=\"line\">\t\t\tsemp.release();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个例子中，将会输出以5个线程为一组的提示文本。</p>\n","site":{"data":{}},"excerpt":"<p>信号量是对锁的扩展，无论是synchronized还是ReetrantLock，一次都只允许一个线程访问一个资源，而信号量却可以指定多个线程，同时访问一个资源。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Semaphore semp = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tExecutorService exec = Executors.newFixedThreadPool(<span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Shit shit = <span class=\"keyword\">new</span> Shit();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">\t\t\texec.submit(shit);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tsemp.acquire();</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getId() + <span class=\"string\">\":done\"</span>);</span><br><span class=\"line\">\t\t\tsemp.release();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个例子中，将会输出以5个线程为一组的提示文本。</p>"},{"title":"JAVA并发编程之线程池","date":"2016-08-08T16:00:00.000Z","_content":"## Executor框架提供了各种类型的线程池，主要有以下几个：\n- newFixedThreadPool()：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\n- newSingleThreadExecutor()：该方法返回一个只有一个线程的线程池。当有一个新的任务提交时，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\n<!-- more -->\n- newCachedThreadPool()：该方法返回一个根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但如果有空闲线程可以复用，则会优先使用可以复用的线程。如果所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。\n- newSingleThreadScheduledExecutor()：该方法返回一个``scheduledExecutorService``对象，线程池大小为1。``ScheduledExecutorService``接口在``ExecutorService``接口之上扩展了在给定时间内执行某人物的功能，如在某个固定的延时之后执行(schedule)，或者周期性(scheduleAtFixedRate, scheduleAtFixedDelay)的执行某个任务。\n- newScheduledThreadPool()：该方法也返回一个``ScheduledExecutorService``对象，但是可以指定线程的数量。\n\n- ThreadPoolExcutor()：\n\n  **corePollSize**: 池中所保存的线程数，包括空闲线程，也就是核心池的大小\n\n  **maximumPoolSize**：池中允许的最大线程数\n \n  **keepAliveTime**：当线程数量大于``corePoolSize``值时，在没有超过指定的时间内是不从线程池中将空闲线程删除的，如果超过此时间，则删除。\n  \n  **unit**: ``keepAliveTime``参数的时间单位\n  \n  **WorkQueue**：执行前用于保持任务的队列。此队列仅保持由``execute``方法提交的``Runnable``任务。\n  \n  为了更好地理解以上使用的关系，可以进行以下详细化的注释：\n  \n  A 代表欲执行的``runnable``的数量\n    \n  B 代表``corePoolSize``\n  \n  C 代表``maximumPoolSize``\n  \n  D 代表A-B\n  \n  E 代表 ``new LinkedBlockingDeque<Runnable>``；队列，无构造参数\n  \n  F 代表``SynchronousQueue``队列\n  \n  G 代表``KeepAliveTime``\n  \n  有几个操作结论：\n  \n  - 如果A<=B，那么马上创建线程运行这个任务，并不放入扩展队列中，其他参数功能忽略。\n  - 如果A>B&&A<=C&&E，则C和G参数忽略，并把D放入E中等待执行。\n  - 如果A>B&&&A<=C&&F，则C和G参数有效，马上创建线程运行这些任务，不把D放在F中，D执行完任务后在指定时间后发生超时则将D进行清除。\n  - 如果A>B&&A>C&&E，则C和G参数忽略，并把D放入E中等待执行。\n  - 如果A>B&&A>C&&E，则处理C的任务，其他任务则不再处理抛出异常。\n## Executor接口地invokeAny和invokeAll方法\n使用invokeAny()方法，当任意一个线程找到结果之后，立刻终结中断所有线程。\n执行结果可能会有以下三种情况：\n\n- 任务都执行成功，使用过第一个任务返回的结果。\n- 任务都失败了，抛出Exception，invokeAny方法将抛出ExecutionException。\n- 部分任务失败了，会使用第一个成功的任务返回的结果。\n\n使用invokeAll()方法，要么全成功，要么部分失败，中断退出。\n运行结果可能出现的情况：\n\n- 全部运行成功\n- 部分运行失败，剩余任务被取消\n  ","source":"_posts/JAVA并发编程之线程池.md","raw":"---\ntitle: JAVA并发编程之线程池\ndate: 2016-8-9\ncategories:\n- 后端\n- JAVA\ntags:\n- 后端\n- JAVA\n- 并发\n---\n## Executor框架提供了各种类型的线程池，主要有以下几个：\n- newFixedThreadPool()：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\n- newSingleThreadExecutor()：该方法返回一个只有一个线程的线程池。当有一个新的任务提交时，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\n<!-- more -->\n- newCachedThreadPool()：该方法返回一个根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但如果有空闲线程可以复用，则会优先使用可以复用的线程。如果所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。\n- newSingleThreadScheduledExecutor()：该方法返回一个``scheduledExecutorService``对象，线程池大小为1。``ScheduledExecutorService``接口在``ExecutorService``接口之上扩展了在给定时间内执行某人物的功能，如在某个固定的延时之后执行(schedule)，或者周期性(scheduleAtFixedRate, scheduleAtFixedDelay)的执行某个任务。\n- newScheduledThreadPool()：该方法也返回一个``ScheduledExecutorService``对象，但是可以指定线程的数量。\n\n- ThreadPoolExcutor()：\n\n  **corePollSize**: 池中所保存的线程数，包括空闲线程，也就是核心池的大小\n\n  **maximumPoolSize**：池中允许的最大线程数\n \n  **keepAliveTime**：当线程数量大于``corePoolSize``值时，在没有超过指定的时间内是不从线程池中将空闲线程删除的，如果超过此时间，则删除。\n  \n  **unit**: ``keepAliveTime``参数的时间单位\n  \n  **WorkQueue**：执行前用于保持任务的队列。此队列仅保持由``execute``方法提交的``Runnable``任务。\n  \n  为了更好地理解以上使用的关系，可以进行以下详细化的注释：\n  \n  A 代表欲执行的``runnable``的数量\n    \n  B 代表``corePoolSize``\n  \n  C 代表``maximumPoolSize``\n  \n  D 代表A-B\n  \n  E 代表 ``new LinkedBlockingDeque<Runnable>``；队列，无构造参数\n  \n  F 代表``SynchronousQueue``队列\n  \n  G 代表``KeepAliveTime``\n  \n  有几个操作结论：\n  \n  - 如果A<=B，那么马上创建线程运行这个任务，并不放入扩展队列中，其他参数功能忽略。\n  - 如果A>B&&A<=C&&E，则C和G参数忽略，并把D放入E中等待执行。\n  - 如果A>B&&&A<=C&&F，则C和G参数有效，马上创建线程运行这些任务，不把D放在F中，D执行完任务后在指定时间后发生超时则将D进行清除。\n  - 如果A>B&&A>C&&E，则C和G参数忽略，并把D放入E中等待执行。\n  - 如果A>B&&A>C&&E，则处理C的任务，其他任务则不再处理抛出异常。\n## Executor接口地invokeAny和invokeAll方法\n使用invokeAny()方法，当任意一个线程找到结果之后，立刻终结中断所有线程。\n执行结果可能会有以下三种情况：\n\n- 任务都执行成功，使用过第一个任务返回的结果。\n- 任务都失败了，抛出Exception，invokeAny方法将抛出ExecutionException。\n- 部分任务失败了，会使用第一个成功的任务返回的结果。\n\n使用invokeAll()方法，要么全成功，要么部分失败，中断退出。\n运行结果可能出现的情况：\n\n- 全部运行成功\n- 部分运行失败，剩余任务被取消\n  ","slug":"JAVA并发编程之线程池","published":1,"updated":"2018-03-06T04:33:25.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26n001hh0ur9ef55ipu","content":"<h2 id=\"Executor框架提供了各种类型的线程池，主要有以下几个：\"><a href=\"#Executor框架提供了各种类型的线程池，主要有以下几个：\" class=\"headerlink\" title=\"Executor框架提供了各种类型的线程池，主要有以下几个：\"></a>Executor框架提供了各种类型的线程池，主要有以下几个：</h2><ul>\n<li>newFixedThreadPool()：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li>\n<li>newSingleThreadExecutor()：该方法返回一个只有一个线程的线程池。当有一个新的任务提交时，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。<a id=\"more\"></a></li>\n<li>newCachedThreadPool()：该方法返回一个根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但如果有空闲线程可以复用，则会优先使用可以复用的线程。如果所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。</li>\n<li>newSingleThreadScheduledExecutor()：该方法返回一个<code>scheduledExecutorService</code>对象，线程池大小为1。<code>ScheduledExecutorService</code>接口在<code>ExecutorService</code>接口之上扩展了在给定时间内执行某人物的功能，如在某个固定的延时之后执行(schedule)，或者周期性(scheduleAtFixedRate, scheduleAtFixedDelay)的执行某个任务。</li>\n<li><p>newScheduledThreadPool()：该方法也返回一个<code>ScheduledExecutorService</code>对象，但是可以指定线程的数量。</p>\n</li>\n<li><p>ThreadPoolExcutor()：</p>\n<p><strong>corePollSize</strong>: 池中所保存的线程数，包括空闲线程，也就是核心池的大小</p>\n<p><strong>maximumPoolSize</strong>：池中允许的最大线程数</p>\n<p><strong>keepAliveTime</strong>：当线程数量大于<code>corePoolSize</code>值时，在没有超过指定的时间内是不从线程池中将空闲线程删除的，如果超过此时间，则删除。</p>\n<p><strong>unit</strong>: <code>keepAliveTime</code>参数的时间单位</p>\n<p><strong>WorkQueue</strong>：执行前用于保持任务的队列。此队列仅保持由<code>execute</code>方法提交的<code>Runnable</code>任务。</p>\n<p>为了更好地理解以上使用的关系，可以进行以下详细化的注释：</p>\n<p>A 代表欲执行的<code>runnable</code>的数量</p>\n<p>B 代表<code>corePoolSize</code></p>\n<p>C 代表<code>maximumPoolSize</code></p>\n<p>D 代表A-B</p>\n<p>E 代表 <code>new LinkedBlockingDeque&lt;Runnable&gt;</code>；队列，无构造参数</p>\n<p>F 代表<code>SynchronousQueue</code>队列</p>\n<p>G 代表<code>KeepAliveTime</code></p>\n<p>有几个操作结论：</p>\n<ul>\n<li>如果A&lt;=B，那么马上创建线程运行这个任务，并不放入扩展队列中，其他参数功能忽略。</li>\n<li>如果A&gt;B&amp;&amp;A&lt;=C&amp;&amp;E，则C和G参数忽略，并把D放入E中等待执行。</li>\n<li>如果A&gt;B&amp;&amp;&amp;A&lt;=C&amp;&amp;F，则C和G参数有效，马上创建线程运行这些任务，不把D放在F中，D执行完任务后在指定时间后发生超时则将D进行清除。</li>\n<li>如果A&gt;B&amp;&amp;A&gt;C&amp;&amp;E，则C和G参数忽略，并把D放入E中等待执行。</li>\n<li>如果A&gt;B&amp;&amp;A&gt;C&amp;&amp;E，则处理C的任务，其他任务则不再处理抛出异常。<h2 id=\"Executor接口地invokeAny和invokeAll方法\"><a href=\"#Executor接口地invokeAny和invokeAll方法\" class=\"headerlink\" title=\"Executor接口地invokeAny和invokeAll方法\"></a>Executor接口地invokeAny和invokeAll方法</h2>使用invokeAny()方法，当任意一个线程找到结果之后，立刻终结中断所有线程。<br>执行结果可能会有以下三种情况：</li>\n</ul>\n</li>\n<li><p>任务都执行成功，使用过第一个任务返回的结果。</p>\n</li>\n<li>任务都失败了，抛出Exception，invokeAny方法将抛出ExecutionException。</li>\n<li>部分任务失败了，会使用第一个成功的任务返回的结果。</li>\n</ul>\n<p>使用invokeAll()方法，要么全成功，要么部分失败，中断退出。<br>运行结果可能出现的情况：</p>\n<ul>\n<li>全部运行成功</li>\n<li>部分运行失败，剩余任务被取消</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Executor框架提供了各种类型的线程池，主要有以下几个：\"><a href=\"#Executor框架提供了各种类型的线程池，主要有以下几个：\" class=\"headerlink\" title=\"Executor框架提供了各种类型的线程池，主要有以下几个：\"></a>Executor框架提供了各种类型的线程池，主要有以下几个：</h2><ul>\n<li>newFixedThreadPool()：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li>\n<li>newSingleThreadExecutor()：该方法返回一个只有一个线程的线程池。当有一个新的任务提交时，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。","more":"</li>\n<li>newCachedThreadPool()：该方法返回一个根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但如果有空闲线程可以复用，则会优先使用可以复用的线程。如果所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。</li>\n<li>newSingleThreadScheduledExecutor()：该方法返回一个<code>scheduledExecutorService</code>对象，线程池大小为1。<code>ScheduledExecutorService</code>接口在<code>ExecutorService</code>接口之上扩展了在给定时间内执行某人物的功能，如在某个固定的延时之后执行(schedule)，或者周期性(scheduleAtFixedRate, scheduleAtFixedDelay)的执行某个任务。</li>\n<li><p>newScheduledThreadPool()：该方法也返回一个<code>ScheduledExecutorService</code>对象，但是可以指定线程的数量。</p>\n</li>\n<li><p>ThreadPoolExcutor()：</p>\n<p><strong>corePollSize</strong>: 池中所保存的线程数，包括空闲线程，也就是核心池的大小</p>\n<p><strong>maximumPoolSize</strong>：池中允许的最大线程数</p>\n<p><strong>keepAliveTime</strong>：当线程数量大于<code>corePoolSize</code>值时，在没有超过指定的时间内是不从线程池中将空闲线程删除的，如果超过此时间，则删除。</p>\n<p><strong>unit</strong>: <code>keepAliveTime</code>参数的时间单位</p>\n<p><strong>WorkQueue</strong>：执行前用于保持任务的队列。此队列仅保持由<code>execute</code>方法提交的<code>Runnable</code>任务。</p>\n<p>为了更好地理解以上使用的关系，可以进行以下详细化的注释：</p>\n<p>A 代表欲执行的<code>runnable</code>的数量</p>\n<p>B 代表<code>corePoolSize</code></p>\n<p>C 代表<code>maximumPoolSize</code></p>\n<p>D 代表A-B</p>\n<p>E 代表 <code>new LinkedBlockingDeque&lt;Runnable&gt;</code>；队列，无构造参数</p>\n<p>F 代表<code>SynchronousQueue</code>队列</p>\n<p>G 代表<code>KeepAliveTime</code></p>\n<p>有几个操作结论：</p>\n<ul>\n<li>如果A&lt;=B，那么马上创建线程运行这个任务，并不放入扩展队列中，其他参数功能忽略。</li>\n<li>如果A&gt;B&amp;&amp;A&lt;=C&amp;&amp;E，则C和G参数忽略，并把D放入E中等待执行。</li>\n<li>如果A&gt;B&amp;&amp;&amp;A&lt;=C&amp;&amp;F，则C和G参数有效，马上创建线程运行这些任务，不把D放在F中，D执行完任务后在指定时间后发生超时则将D进行清除。</li>\n<li>如果A&gt;B&amp;&amp;A&gt;C&amp;&amp;E，则C和G参数忽略，并把D放入E中等待执行。</li>\n<li>如果A&gt;B&amp;&amp;A&gt;C&amp;&amp;E，则处理C的任务，其他任务则不再处理抛出异常。<h2 id=\"Executor接口地invokeAny和invokeAll方法\"><a href=\"#Executor接口地invokeAny和invokeAll方法\" class=\"headerlink\" title=\"Executor接口地invokeAny和invokeAll方法\"></a>Executor接口地invokeAny和invokeAll方法</h2>使用invokeAny()方法，当任意一个线程找到结果之后，立刻终结中断所有线程。<br>执行结果可能会有以下三种情况：</li>\n</ul>\n</li>\n<li><p>任务都执行成功，使用过第一个任务返回的结果。</p>\n</li>\n<li>任务都失败了，抛出Exception，invokeAny方法将抛出ExecutionException。</li>\n<li>部分任务失败了，会使用第一个成功的任务返回的结果。</li>\n</ul>\n<p>使用invokeAll()方法，要么全成功，要么部分失败，中断退出。<br>运行结果可能出现的情况：</p>\n<ul>\n<li>全部运行成功</li>\n<li>部分运行失败，剩余任务被取消</li>\n</ul>"},{"title":"MySQL grant命令","date":"2015-04-19T16:00:00.000Z","_content":"1. grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。\n    ``` sql\n    grant select on testdb.* to common_user@'%'\n    grant insert on testdb.* to common_user@'%'\n    grant update on testdb.* to common_user@'%'\n    grant delete on testdb.* to common_user@'%'\n    ```\n    或者，用一条 MySQL 命令来替代：\n    ``` sql\n    grant select, insert, update, delete on testdb.* to common_user@'%'\\\n    ```\n<!-- more -->\n\n2. grant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。\n\n    grant 创建、修改、删除 MySQL 数据表结构权限。\n    ``` sql\n    grant create on testdb.* to developer@'192.168.0.%';\n    grant alter on testdb.* to developer@'192.168.0.%';\n    grant drop on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 外键权限。\n    ``` sql\n    grant references on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 临时表权限。\n    ``` sql\n    grant create temporary tables on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 索引权限。\n    ``` sql\n    grant index on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 视图、查看视图源代码 权限。\n    ``` sql\n    grant create view on testdb.* to developer@'192.168.0.%';\n    grant show view on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 存储过程、函数 权限。\n    ``` sql\n    grant create routine on testdb.* to developer@'192.168.0.%'; -- now, can show procedure status\n    grant alter routine on testdb.* to developer@'192.168.0.%'; -- now, you can drop a procedure\n    grant execute on testdb.* to developer@'192.168.0.%';\n    ```\n\n3. grant 普通 DBA 管理某个 MySQL 数据库的权限。\n    ``` sql\n    grant all privileges on testdb to dba@'localhost'\n    ```\n    其中，关键字 privileges 可以省略。\n\n4. grant 高级 DBA 管理 MySQL 中所有数据库的权限。\n    ``` sql\n    grant all on *.* to dba@'localhost'\n    ```\n\n5. MySQL grant 权限，分别可以作用在多个层次上。\n  grant 作用在整个 MySQL 服务器上：\n  ``` sql\n  grant select on *.* to dba@localhost; -- dba 可以查询 MySQL 中所有数据库中的表。\n  grant all on *.* to dba@localhost; -- dba 可以管理 MySQL 中的所有数据库\n  ```\n  grant 作用在单个数据库上：\n  ``` sql\n  grant select on testdb.* to dba@localhost; -- dba 可以查询 testdb 中的表。\n  ```\n  grant 作用在单个数据表上：\n  ``` sql\n  grant select, insert, update, delete on testdb.orders to dba@localhost;\n  ```\n  这里在给一个用户授权多张表时，可以多次执行以上语句。例如：\n  ``` sql\n  grant select(user_id,username) on smp.users to mo_user@'%' identified by '123345';\n  grant select on smp.mo_sms to mo_user@'%' identified by '123345';\n  ```\n  grant 作用在表中的列上：\n  ``` sql\n  grant select(id, se, rank) on testdb.apache_log to dba@localhost;\n  ```\n  grant 作用在存储过程、函数上：\n  ``` sql\n  grant execute on procedure testdb.pr_add to 'dba'@'localhost'\n  grant execute on function testdb.fn_add to 'dba'@'localhost'\n  ```\n\n6. 查看 MySQL 用户权限\n  查看当前用户（自己）权限：\n  ``` sql\n  show grants;\n  ``` \n  查看其他 MySQL 用户权限：\n  ``` sql\n  show grants for dba@localhost;\n  ```\n\n7. 撤销已经赋予给 MySQL 用户权限的权限。\n  revoke 跟 grant 的语法差不多，只需要把关键字 to 换成 from 即可：\n  ``` sql\n  grant all on *.* to dba@localhost;\n  revoke all on *.* from dba@localhost;\n  ```\n\n8. MySQL grant、revoke 用户权限注意事项\n  1. grant, revoke 用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效。\n  2. 如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 grant option\n  ``` sql\n  grant select on testdb.* to dba@localhost with grant option;\n  ```\n  这个特性一般用不到。实际中，数据库权限最好由 DBA 来统一管理。\n  注意：创建完成后需要执行 FLUSH PRIVILEGES 语句。","source":"_posts/MySQL grant命令.md","raw":"---\ntitle: MySQL grant命令\ndate: 2015-4-20\ncategories:\n- 后端\n- MySQL\ntags:\n- 后端\n- MySQL\n---\n1. grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。\n    ``` sql\n    grant select on testdb.* to common_user@'%'\n    grant insert on testdb.* to common_user@'%'\n    grant update on testdb.* to common_user@'%'\n    grant delete on testdb.* to common_user@'%'\n    ```\n    或者，用一条 MySQL 命令来替代：\n    ``` sql\n    grant select, insert, update, delete on testdb.* to common_user@'%'\\\n    ```\n<!-- more -->\n\n2. grant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。\n\n    grant 创建、修改、删除 MySQL 数据表结构权限。\n    ``` sql\n    grant create on testdb.* to developer@'192.168.0.%';\n    grant alter on testdb.* to developer@'192.168.0.%';\n    grant drop on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 外键权限。\n    ``` sql\n    grant references on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 临时表权限。\n    ``` sql\n    grant create temporary tables on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 索引权限。\n    ``` sql\n    grant index on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 视图、查看视图源代码 权限。\n    ``` sql\n    grant create view on testdb.* to developer@'192.168.0.%';\n    grant show view on testdb.* to developer@'192.168.0.%';\n    ```\n    grant 操作 MySQL 存储过程、函数 权限。\n    ``` sql\n    grant create routine on testdb.* to developer@'192.168.0.%'; -- now, can show procedure status\n    grant alter routine on testdb.* to developer@'192.168.0.%'; -- now, you can drop a procedure\n    grant execute on testdb.* to developer@'192.168.0.%';\n    ```\n\n3. grant 普通 DBA 管理某个 MySQL 数据库的权限。\n    ``` sql\n    grant all privileges on testdb to dba@'localhost'\n    ```\n    其中，关键字 privileges 可以省略。\n\n4. grant 高级 DBA 管理 MySQL 中所有数据库的权限。\n    ``` sql\n    grant all on *.* to dba@'localhost'\n    ```\n\n5. MySQL grant 权限，分别可以作用在多个层次上。\n  grant 作用在整个 MySQL 服务器上：\n  ``` sql\n  grant select on *.* to dba@localhost; -- dba 可以查询 MySQL 中所有数据库中的表。\n  grant all on *.* to dba@localhost; -- dba 可以管理 MySQL 中的所有数据库\n  ```\n  grant 作用在单个数据库上：\n  ``` sql\n  grant select on testdb.* to dba@localhost; -- dba 可以查询 testdb 中的表。\n  ```\n  grant 作用在单个数据表上：\n  ``` sql\n  grant select, insert, update, delete on testdb.orders to dba@localhost;\n  ```\n  这里在给一个用户授权多张表时，可以多次执行以上语句。例如：\n  ``` sql\n  grant select(user_id,username) on smp.users to mo_user@'%' identified by '123345';\n  grant select on smp.mo_sms to mo_user@'%' identified by '123345';\n  ```\n  grant 作用在表中的列上：\n  ``` sql\n  grant select(id, se, rank) on testdb.apache_log to dba@localhost;\n  ```\n  grant 作用在存储过程、函数上：\n  ``` sql\n  grant execute on procedure testdb.pr_add to 'dba'@'localhost'\n  grant execute on function testdb.fn_add to 'dba'@'localhost'\n  ```\n\n6. 查看 MySQL 用户权限\n  查看当前用户（自己）权限：\n  ``` sql\n  show grants;\n  ``` \n  查看其他 MySQL 用户权限：\n  ``` sql\n  show grants for dba@localhost;\n  ```\n\n7. 撤销已经赋予给 MySQL 用户权限的权限。\n  revoke 跟 grant 的语法差不多，只需要把关键字 to 换成 from 即可：\n  ``` sql\n  grant all on *.* to dba@localhost;\n  revoke all on *.* from dba@localhost;\n  ```\n\n8. MySQL grant、revoke 用户权限注意事项\n  1. grant, revoke 用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效。\n  2. 如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 grant option\n  ``` sql\n  grant select on testdb.* to dba@localhost with grant option;\n  ```\n  这个特性一般用不到。实际中，数据库权限最好由 DBA 来统一管理。\n  注意：创建完成后需要执行 FLUSH PRIVILEGES 语句。","slug":"MySQL grant命令","published":1,"updated":"2018-03-06T04:34:17.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26p001jh0urab3obrem","content":"<ol>\n<li><p>grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">update</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></span><br></pre></td></tr></table></figure>\n<p> 或者，用一条 MySQL 命令来替代：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>, <span class=\"keyword\">insert</span>, <span class=\"keyword\">update</span>, <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span>\\</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>grant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。</p>\n<p> grant 创建、修改、删除 MySQL 数据表结构权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">alter</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 外键权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">references</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 临时表权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tables</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 索引权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">index</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 视图、查看视图源代码 权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">view</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">show</span> <span class=\"keyword\">view</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 存储过程、函数 权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> routine <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>; <span class=\"comment\">-- now, can show procedure status</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">alter</span> routine <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>; <span class=\"comment\">-- now, you can drop a procedure</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>grant 普通 DBA 管理某个 MySQL 数据库的权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> testdb <span class=\"keyword\">to</span> dba@<span class=\"string\">'localhost'</span></span><br></pre></td></tr></table></figure>\n<p> 其中，关键字 privileges 可以省略。</p>\n</li>\n<li><p>grant 高级 DBA 管理 MySQL 中所有数据库的权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@<span class=\"string\">'localhost'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL grant 权限，分别可以作用在多个层次上。<br>grant 作用在整个 MySQL 服务器上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以查询 MySQL 中所有数据库中的表。</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以管理 MySQL 中的所有数据库</span></span><br></pre></td></tr></table></figure>\n<p>grant 作用在单个数据库上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以查询 testdb 中的表。</span></span><br></pre></td></tr></table></figure>\n<p>grant 作用在单个数据表上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>, <span class=\"keyword\">insert</span>, <span class=\"keyword\">update</span>, <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.orders <span class=\"keyword\">to</span> dba@localhost;</span><br></pre></td></tr></table></figure>\n<p>这里在给一个用户授权多张表时，可以多次执行以上语句。例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>(user_id,username) <span class=\"keyword\">on</span> smp.users <span class=\"keyword\">to</span> mo_user@<span class=\"string\">'%'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'123345'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> smp.mo_sms <span class=\"keyword\">to</span> mo_user@<span class=\"string\">'%'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'123345'</span>;</span><br></pre></td></tr></table></figure>\n<p>grant 作用在表中的列上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>(<span class=\"keyword\">id</span>, se, <span class=\"keyword\">rank</span>) <span class=\"keyword\">on</span> testdb.apache_log <span class=\"keyword\">to</span> dba@localhost;</span><br></pre></td></tr></table></figure>\n<p>grant 作用在存储过程、函数上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> <span class=\"keyword\">procedure</span> testdb.pr_add <span class=\"keyword\">to</span> <span class=\"string\">'dba'</span>@<span class=\"string\">'localhost'</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> <span class=\"keyword\">function</span> testdb.fn_add <span class=\"keyword\">to</span> <span class=\"string\">'dba'</span>@<span class=\"string\">'localhost'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 MySQL 用户权限<br>查看当前用户（自己）权限：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span>;</span><br><span class=\"line\">``` </span><br><span class=\"line\">查看其他 MySQL 用户权限：</span><br><span class=\"line\">``` sql</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> dba@localhost;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销已经赋予给 MySQL 用户权限的权限。<br>revoke 跟 grant 的语法差不多，只需要把关键字 to 换成 from 即可：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost;</span><br><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">from</span> dba@localhost;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL grant、revoke 用户权限注意事项</p>\n<ol>\n<li>grant, revoke 用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效。</li>\n<li>如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 grant option<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> dba@localhost <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这个特性一般用不到。实际中，数据库权限最好由 DBA 来统一管理。<br>注意：创建完成后需要执行 FLUSH PRIVILEGES 语句。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">update</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></span><br></pre></td></tr></table></figure>\n<p> 或者，用一条 MySQL 命令来替代：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>, <span class=\"keyword\">insert</span>, <span class=\"keyword\">update</span>, <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span>\\</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>grant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。</p>\n<p> grant 创建、修改、删除 MySQL 数据表结构权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">alter</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 外键权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">references</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 临时表权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tables</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 索引权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">index</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 视图、查看视图源代码 权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">view</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">show</span> <span class=\"keyword\">view</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n<p> grant 操作 MySQL 存储过程、函数 权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> routine <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>; <span class=\"comment\">-- now, can show procedure status</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">alter</span> routine <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>; <span class=\"comment\">-- now, you can drop a procedure</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>grant 普通 DBA 管理某个 MySQL 数据库的权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> testdb <span class=\"keyword\">to</span> dba@<span class=\"string\">'localhost'</span></span><br></pre></td></tr></table></figure>\n<p> 其中，关键字 privileges 可以省略。</p>\n</li>\n<li><p>grant 高级 DBA 管理 MySQL 中所有数据库的权限。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@<span class=\"string\">'localhost'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL grant 权限，分别可以作用在多个层次上。<br>grant 作用在整个 MySQL 服务器上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以查询 MySQL 中所有数据库中的表。</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以管理 MySQL 中的所有数据库</span></span><br></pre></td></tr></table></figure>\n<p>grant 作用在单个数据库上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以查询 testdb 中的表。</span></span><br></pre></td></tr></table></figure>\n<p>grant 作用在单个数据表上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>, <span class=\"keyword\">insert</span>, <span class=\"keyword\">update</span>, <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.orders <span class=\"keyword\">to</span> dba@localhost;</span><br></pre></td></tr></table></figure>\n<p>这里在给一个用户授权多张表时，可以多次执行以上语句。例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>(user_id,username) <span class=\"keyword\">on</span> smp.users <span class=\"keyword\">to</span> mo_user@<span class=\"string\">'%'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'123345'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> smp.mo_sms <span class=\"keyword\">to</span> mo_user@<span class=\"string\">'%'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'123345'</span>;</span><br></pre></td></tr></table></figure>\n<p>grant 作用在表中的列上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>(<span class=\"keyword\">id</span>, se, <span class=\"keyword\">rank</span>) <span class=\"keyword\">on</span> testdb.apache_log <span class=\"keyword\">to</span> dba@localhost;</span><br></pre></td></tr></table></figure>\n<p>grant 作用在存储过程、函数上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> <span class=\"keyword\">procedure</span> testdb.pr_add <span class=\"keyword\">to</span> <span class=\"string\">'dba'</span>@<span class=\"string\">'localhost'</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> <span class=\"keyword\">function</span> testdb.fn_add <span class=\"keyword\">to</span> <span class=\"string\">'dba'</span>@<span class=\"string\">'localhost'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 MySQL 用户权限<br>查看当前用户（自己）权限：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span>;</span><br><span class=\"line\">``` </span><br><span class=\"line\">查看其他 MySQL 用户权限：</span><br><span class=\"line\">``` sql</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> dba@localhost;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销已经赋予给 MySQL 用户权限的权限。<br>revoke 跟 grant 的语法差不多，只需要把关键字 to 换成 from 即可：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost;</span><br><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">from</span> dba@localhost;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL grant、revoke 用户权限注意事项</p>\n<ol>\n<li>grant, revoke 用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效。</li>\n<li>如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 grant option<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> dba@localhost <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这个特性一般用不到。实际中，数据库权限最好由 DBA 来统一管理。<br>注意：创建完成后需要执行 FLUSH PRIVILEGES 语句。</p>\n</li>\n</ol>"},{"title":"Redis常用命令","date":"2017-11-19T16:00:00.000Z","_content":"## String\n命令|解释\n--|--\nINCR key| 增加值+1\nDECR key| 减少值-1\nMSET|一次set多个值\nMGET|一次get多个值\nINCRBY key|按参数增加值\nDECRBY key|按参数减少值\nAPPEND key value|拼接字符串\nGETRANGE key offset|截取字符串\nSETRANGE key offset value|按位置更改字符串\nSTRLEN key|获取键对应的值的长度\nSETBIT key offset value|设置或者清空key的value(字符串)在offset处的bit值\nGETBIT key offset| 获得key的value(字符串)在offset处的bit值\nBITCOUNT key start end| 统计字符串的二级制码中，有多少个'1'\n## List\n命令|解释\n--|--\nRPUSH(LPUSH) key value| 从右端向key插入值 \nLRANGE key start stop|按范围返回值\nLINDEX key index| 按索引返回值\nRPOP(LPOP)|从右侧弹出一个值\nLTRIM key start stop| 按范围从左侧删除值\nBRPOP(BLPOP) key [key ...] timeout|阻塞式从右侧弹出值，有多个key时，从key的左边向右边遍历弹出值，直到没有值可以被弹出\nRPOPLPUSH source destination| 原子性地返回并移除存储在 source 的列表的最后一个元素（列表尾部元素）， 并把该元素放入存储在 destination 的列表的第一个元素位置（列表头部）\n<!-- more -->\n## Set\n命令|解释\n--|--\nSADD key member [member...] | 添加一个或多个元素\nSMEMBERS key|获得key的所有值\nSISMEMBER key member|判断一个member在不在set中\nSREM key member [member...]| 删除一个或多个member\nSCARD key| 获取集合中元素数量\nSPOP key [count] | 随机弹出一个或多个元素\nSRANDMEMBER key [count]| 返回一个或多个元素\nSMOVE source destination member| 把一个元素从一个set移动到另一个set\nSDIFF| 求两个set的差集\nSDIFFSTORE| 求两个set的差集并保存\nSINTER|求两个set的交集\nSINTERSTORE|求两个set的交集并保存\nSUNION|求两个set的并集\nSUNIONSTORE|求两个set的并集并保存\n## Hash\n命令|解释\n--|--\nHSET key field value| 添加一个hash\nHDEL key field [field ...]| 删除一个或多个键值\nHGET key field| 获得key下面field键的值\nHGETALL key| 返回key下面所有的键值对\nHKEYS key| 返回key下面所有的键\nHVALS key|返回key下面所有的值\nHINCRBY key field increment| key下面field的值增加1\nHLEN key| 返回key下面值键值对的数量\nHMSET key field value [field value...] | 添加多个hash\nHEXISTS key field| 判断一个key是否在hash内\n## Zset\n命令|解释\n--|--\nZRANGE key start stop [WITHSCORES]| 根据指定的index返回，返回sorted set的成员列表\nZRANGEBYSCORE key min max [WITHSCORES]|返回有序集合中指定分数区间内的成员，分数由低到高排序\nZREM key member [member...]| 从排序的集合中删除一个或多个成员\nZINCRBY key increment member| 增加一名成员的评分\nZCOUNT key min max| 返回分数范围内的成员数量\nZRANK key member| 返回成员在集合中的索引\nZSCORE key member| 返回成员的得分\nZREVRANK key member|返回分数从高到低的成员的排名\nZREVRANGE key start stop [WITHSCORES]|返回成员的范围，分数从高到低排序\nZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]|按照分数从大到小返回范围元素，可以增加limit进行数量限制\nZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]|按照分数从小到大返回范围元素，可以增加limit进行数量限制\nZADD key [NX or XX] [CH] [INCR] score member [score member ...]|将所有指定成员添加到键为key有序集合（sorted set）里面\nZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight] [SUM or MIN orMAX]|计算交集，并把结果放到destination中\nZUNIONSCORE|计算并集，并把结果放到destination中\nZRANGEBYLEX key min max [LIMIT offset count]|返回指定成员区间内的成员，按字典正序排列\nZREM key member [member ...]| 删除一个或多个成员","source":"_posts/Redis常用命令.md","raw":"---\ntitle: Redis常用命令\ndate: 2017-11-20\ncategories:\n- 后端\n- Redis\ntags:\n- 后端\n- Redis\n---\n## String\n命令|解释\n--|--\nINCR key| 增加值+1\nDECR key| 减少值-1\nMSET|一次set多个值\nMGET|一次get多个值\nINCRBY key|按参数增加值\nDECRBY key|按参数减少值\nAPPEND key value|拼接字符串\nGETRANGE key offset|截取字符串\nSETRANGE key offset value|按位置更改字符串\nSTRLEN key|获取键对应的值的长度\nSETBIT key offset value|设置或者清空key的value(字符串)在offset处的bit值\nGETBIT key offset| 获得key的value(字符串)在offset处的bit值\nBITCOUNT key start end| 统计字符串的二级制码中，有多少个'1'\n## List\n命令|解释\n--|--\nRPUSH(LPUSH) key value| 从右端向key插入值 \nLRANGE key start stop|按范围返回值\nLINDEX key index| 按索引返回值\nRPOP(LPOP)|从右侧弹出一个值\nLTRIM key start stop| 按范围从左侧删除值\nBRPOP(BLPOP) key [key ...] timeout|阻塞式从右侧弹出值，有多个key时，从key的左边向右边遍历弹出值，直到没有值可以被弹出\nRPOPLPUSH source destination| 原子性地返回并移除存储在 source 的列表的最后一个元素（列表尾部元素）， 并把该元素放入存储在 destination 的列表的第一个元素位置（列表头部）\n<!-- more -->\n## Set\n命令|解释\n--|--\nSADD key member [member...] | 添加一个或多个元素\nSMEMBERS key|获得key的所有值\nSISMEMBER key member|判断一个member在不在set中\nSREM key member [member...]| 删除一个或多个member\nSCARD key| 获取集合中元素数量\nSPOP key [count] | 随机弹出一个或多个元素\nSRANDMEMBER key [count]| 返回一个或多个元素\nSMOVE source destination member| 把一个元素从一个set移动到另一个set\nSDIFF| 求两个set的差集\nSDIFFSTORE| 求两个set的差集并保存\nSINTER|求两个set的交集\nSINTERSTORE|求两个set的交集并保存\nSUNION|求两个set的并集\nSUNIONSTORE|求两个set的并集并保存\n## Hash\n命令|解释\n--|--\nHSET key field value| 添加一个hash\nHDEL key field [field ...]| 删除一个或多个键值\nHGET key field| 获得key下面field键的值\nHGETALL key| 返回key下面所有的键值对\nHKEYS key| 返回key下面所有的键\nHVALS key|返回key下面所有的值\nHINCRBY key field increment| key下面field的值增加1\nHLEN key| 返回key下面值键值对的数量\nHMSET key field value [field value...] | 添加多个hash\nHEXISTS key field| 判断一个key是否在hash内\n## Zset\n命令|解释\n--|--\nZRANGE key start stop [WITHSCORES]| 根据指定的index返回，返回sorted set的成员列表\nZRANGEBYSCORE key min max [WITHSCORES]|返回有序集合中指定分数区间内的成员，分数由低到高排序\nZREM key member [member...]| 从排序的集合中删除一个或多个成员\nZINCRBY key increment member| 增加一名成员的评分\nZCOUNT key min max| 返回分数范围内的成员数量\nZRANK key member| 返回成员在集合中的索引\nZSCORE key member| 返回成员的得分\nZREVRANK key member|返回分数从高到低的成员的排名\nZREVRANGE key start stop [WITHSCORES]|返回成员的范围，分数从高到低排序\nZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]|按照分数从大到小返回范围元素，可以增加limit进行数量限制\nZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]|按照分数从小到大返回范围元素，可以增加limit进行数量限制\nZADD key [NX or XX] [CH] [INCR] score member [score member ...]|将所有指定成员添加到键为key有序集合（sorted set）里面\nZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight] [SUM or MIN orMAX]|计算交集，并把结果放到destination中\nZUNIONSCORE|计算并集，并把结果放到destination中\nZRANGEBYLEX key min max [LIMIT offset count]|返回指定成员区间内的成员，按字典正序排列\nZREM key member [member ...]| 删除一个或多个成员","slug":"Redis常用命令","published":1,"updated":"2019-04-08T05:35:34.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26s001oh0ur5xkg5f4l","content":"<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INCR key</td>\n<td>增加值+1</td>\n</tr>\n<tr>\n<td>DECR key</td>\n<td>减少值-1</td>\n</tr>\n<tr>\n<td>MSET</td>\n<td>一次set多个值</td>\n</tr>\n<tr>\n<td>MGET</td>\n<td>一次get多个值</td>\n</tr>\n<tr>\n<td>INCRBY key</td>\n<td>按参数增加值</td>\n</tr>\n<tr>\n<td>DECRBY key</td>\n<td>按参数减少值</td>\n</tr>\n<tr>\n<td>APPEND key value</td>\n<td>拼接字符串</td>\n</tr>\n<tr>\n<td>GETRANGE key offset</td>\n<td>截取字符串</td>\n</tr>\n<tr>\n<td>SETRANGE key offset value</td>\n<td>按位置更改字符串</td>\n</tr>\n<tr>\n<td>STRLEN key</td>\n<td>获取键对应的值的长度</td>\n</tr>\n<tr>\n<td>SETBIT key offset value</td>\n<td>设置或者清空key的value(字符串)在offset处的bit值</td>\n</tr>\n<tr>\n<td>GETBIT key offset</td>\n<td>获得key的value(字符串)在offset处的bit值</td>\n</tr>\n<tr>\n<td>BITCOUNT key start end</td>\n<td>统计字符串的二级制码中，有多少个’1’</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RPUSH(LPUSH) key value</td>\n<td>从右端向key插入值 </td>\n</tr>\n<tr>\n<td>LRANGE key start stop</td>\n<td>按范围返回值</td>\n</tr>\n<tr>\n<td>LINDEX key index</td>\n<td>按索引返回值</td>\n</tr>\n<tr>\n<td>RPOP(LPOP)</td>\n<td>从右侧弹出一个值</td>\n</tr>\n<tr>\n<td>LTRIM key start stop</td>\n<td>按范围从左侧删除值</td>\n</tr>\n<tr>\n<td>BRPOP(BLPOP) key [key …] timeout</td>\n<td>阻塞式从右侧弹出值，有多个key时，从key的左边向右边遍历弹出值，直到没有值可以被弹出</td>\n</tr>\n<tr>\n<td>RPOPLPUSH source destination</td>\n<td>原子性地返回并移除存储在 source 的列表的最后一个元素（列表尾部元素）， 并把该元素放入存储在 destination 的列表的第一个元素位置（列表头部）</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SADD key member [member…]</td>\n<td>添加一个或多个元素</td>\n</tr>\n<tr>\n<td>SMEMBERS key</td>\n<td>获得key的所有值</td>\n</tr>\n<tr>\n<td>SISMEMBER key member</td>\n<td>判断一个member在不在set中</td>\n</tr>\n<tr>\n<td>SREM key member [member…]</td>\n<td>删除一个或多个member</td>\n</tr>\n<tr>\n<td>SCARD key</td>\n<td>获取集合中元素数量</td>\n</tr>\n<tr>\n<td>SPOP key [count]</td>\n<td>随机弹出一个或多个元素</td>\n</tr>\n<tr>\n<td>SRANDMEMBER key [count]</td>\n<td>返回一个或多个元素</td>\n</tr>\n<tr>\n<td>SMOVE source destination member</td>\n<td>把一个元素从一个set移动到另一个set</td>\n</tr>\n<tr>\n<td>SDIFF</td>\n<td>求两个set的差集</td>\n</tr>\n<tr>\n<td>SDIFFSTORE</td>\n<td>求两个set的差集并保存</td>\n</tr>\n<tr>\n<td>SINTER</td>\n<td>求两个set的交集</td>\n</tr>\n<tr>\n<td>SINTERSTORE</td>\n<td>求两个set的交集并保存</td>\n</tr>\n<tr>\n<td>SUNION</td>\n<td>求两个set的并集</td>\n</tr>\n<tr>\n<td>SUNIONSTORE</td>\n<td>求两个set的并集并保存</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HSET key field value</td>\n<td>添加一个hash</td>\n</tr>\n<tr>\n<td>HDEL key field [field …]</td>\n<td>删除一个或多个键值</td>\n</tr>\n<tr>\n<td>HGET key field</td>\n<td>获得key下面field键的值</td>\n</tr>\n<tr>\n<td>HGETALL key</td>\n<td>返回key下面所有的键值对</td>\n</tr>\n<tr>\n<td>HKEYS key</td>\n<td>返回key下面所有的键</td>\n</tr>\n<tr>\n<td>HVALS key</td>\n<td>返回key下面所有的值</td>\n</tr>\n<tr>\n<td>HINCRBY key field increment</td>\n<td>key下面field的值增加1</td>\n</tr>\n<tr>\n<td>HLEN key</td>\n<td>返回key下面值键值对的数量</td>\n</tr>\n<tr>\n<td>HMSET key field value [field value…]</td>\n<td>添加多个hash</td>\n</tr>\n<tr>\n<td>HEXISTS key field</td>\n<td>判断一个key是否在hash内</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Zset\"><a href=\"#Zset\" class=\"headerlink\" title=\"Zset\"></a>Zset</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ZRANGE key start stop [WITHSCORES]</td>\n<td>根据指定的index返回，返回sorted set的成员列表</td>\n</tr>\n<tr>\n<td>ZRANGEBYSCORE key min max [WITHSCORES]</td>\n<td>返回有序集合中指定分数区间内的成员，分数由低到高排序</td>\n</tr>\n<tr>\n<td>ZREM key member [member…]</td>\n<td>从排序的集合中删除一个或多个成员</td>\n</tr>\n<tr>\n<td>ZINCRBY key increment member</td>\n<td>增加一名成员的评分</td>\n</tr>\n<tr>\n<td>ZCOUNT key min max</td>\n<td>返回分数范围内的成员数量</td>\n</tr>\n<tr>\n<td>ZRANK key member</td>\n<td>返回成员在集合中的索引</td>\n</tr>\n<tr>\n<td>ZSCORE key member</td>\n<td>返回成员的得分</td>\n</tr>\n<tr>\n<td>ZREVRANK key member</td>\n<td>返回分数从高到低的成员的排名</td>\n</tr>\n<tr>\n<td>ZREVRANGE key start stop [WITHSCORES]</td>\n<td>返回成员的范围，分数从高到低排序</td>\n</tr>\n<tr>\n<td>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</td>\n<td>按照分数从大到小返回范围元素，可以增加limit进行数量限制</td>\n</tr>\n<tr>\n<td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</td>\n<td>按照分数从小到大返回范围元素，可以增加limit进行数量限制</td>\n</tr>\n<tr>\n<td>ZADD key [NX or XX] [CH] [INCR] score member [score member …]</td>\n<td>将所有指定成员添加到键为key有序集合（sorted set）里面</td>\n</tr>\n<tr>\n<td>ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight] [SUM or MIN orMAX]</td>\n<td>计算交集，并把结果放到destination中</td>\n</tr>\n<tr>\n<td>ZUNIONSCORE</td>\n<td>计算并集，并把结果放到destination中</td>\n</tr>\n<tr>\n<td>ZRANGEBYLEX key min max [LIMIT offset count]</td>\n<td>返回指定成员区间内的成员，按字典正序排列</td>\n</tr>\n<tr>\n<td>ZREM key member [member …]</td>\n<td>删除一个或多个成员</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INCR key</td>\n<td>增加值+1</td>\n</tr>\n<tr>\n<td>DECR key</td>\n<td>减少值-1</td>\n</tr>\n<tr>\n<td>MSET</td>\n<td>一次set多个值</td>\n</tr>\n<tr>\n<td>MGET</td>\n<td>一次get多个值</td>\n</tr>\n<tr>\n<td>INCRBY key</td>\n<td>按参数增加值</td>\n</tr>\n<tr>\n<td>DECRBY key</td>\n<td>按参数减少值</td>\n</tr>\n<tr>\n<td>APPEND key value</td>\n<td>拼接字符串</td>\n</tr>\n<tr>\n<td>GETRANGE key offset</td>\n<td>截取字符串</td>\n</tr>\n<tr>\n<td>SETRANGE key offset value</td>\n<td>按位置更改字符串</td>\n</tr>\n<tr>\n<td>STRLEN key</td>\n<td>获取键对应的值的长度</td>\n</tr>\n<tr>\n<td>SETBIT key offset value</td>\n<td>设置或者清空key的value(字符串)在offset处的bit值</td>\n</tr>\n<tr>\n<td>GETBIT key offset</td>\n<td>获得key的value(字符串)在offset处的bit值</td>\n</tr>\n<tr>\n<td>BITCOUNT key start end</td>\n<td>统计字符串的二级制码中，有多少个’1’</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RPUSH(LPUSH) key value</td>\n<td>从右端向key插入值 </td>\n</tr>\n<tr>\n<td>LRANGE key start stop</td>\n<td>按范围返回值</td>\n</tr>\n<tr>\n<td>LINDEX key index</td>\n<td>按索引返回值</td>\n</tr>\n<tr>\n<td>RPOP(LPOP)</td>\n<td>从右侧弹出一个值</td>\n</tr>\n<tr>\n<td>LTRIM key start stop</td>\n<td>按范围从左侧删除值</td>\n</tr>\n<tr>\n<td>BRPOP(BLPOP) key [key …] timeout</td>\n<td>阻塞式从右侧弹出值，有多个key时，从key的左边向右边遍历弹出值，直到没有值可以被弹出</td>\n</tr>\n<tr>\n<td>RPOPLPUSH source destination</td>\n<td>原子性地返回并移除存储在 source 的列表的最后一个元素（列表尾部元素）， 并把该元素放入存储在 destination 的列表的第一个元素位置（列表头部）</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SADD key member [member…]</td>\n<td>添加一个或多个元素</td>\n</tr>\n<tr>\n<td>SMEMBERS key</td>\n<td>获得key的所有值</td>\n</tr>\n<tr>\n<td>SISMEMBER key member</td>\n<td>判断一个member在不在set中</td>\n</tr>\n<tr>\n<td>SREM key member [member…]</td>\n<td>删除一个或多个member</td>\n</tr>\n<tr>\n<td>SCARD key</td>\n<td>获取集合中元素数量</td>\n</tr>\n<tr>\n<td>SPOP key [count]</td>\n<td>随机弹出一个或多个元素</td>\n</tr>\n<tr>\n<td>SRANDMEMBER key [count]</td>\n<td>返回一个或多个元素</td>\n</tr>\n<tr>\n<td>SMOVE source destination member</td>\n<td>把一个元素从一个set移动到另一个set</td>\n</tr>\n<tr>\n<td>SDIFF</td>\n<td>求两个set的差集</td>\n</tr>\n<tr>\n<td>SDIFFSTORE</td>\n<td>求两个set的差集并保存</td>\n</tr>\n<tr>\n<td>SINTER</td>\n<td>求两个set的交集</td>\n</tr>\n<tr>\n<td>SINTERSTORE</td>\n<td>求两个set的交集并保存</td>\n</tr>\n<tr>\n<td>SUNION</td>\n<td>求两个set的并集</td>\n</tr>\n<tr>\n<td>SUNIONSTORE</td>\n<td>求两个set的并集并保存</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HSET key field value</td>\n<td>添加一个hash</td>\n</tr>\n<tr>\n<td>HDEL key field [field …]</td>\n<td>删除一个或多个键值</td>\n</tr>\n<tr>\n<td>HGET key field</td>\n<td>获得key下面field键的值</td>\n</tr>\n<tr>\n<td>HGETALL key</td>\n<td>返回key下面所有的键值对</td>\n</tr>\n<tr>\n<td>HKEYS key</td>\n<td>返回key下面所有的键</td>\n</tr>\n<tr>\n<td>HVALS key</td>\n<td>返回key下面所有的值</td>\n</tr>\n<tr>\n<td>HINCRBY key field increment</td>\n<td>key下面field的值增加1</td>\n</tr>\n<tr>\n<td>HLEN key</td>\n<td>返回key下面值键值对的数量</td>\n</tr>\n<tr>\n<td>HMSET key field value [field value…]</td>\n<td>添加多个hash</td>\n</tr>\n<tr>\n<td>HEXISTS key field</td>\n<td>判断一个key是否在hash内</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Zset\"><a href=\"#Zset\" class=\"headerlink\" title=\"Zset\"></a>Zset</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ZRANGE key start stop [WITHSCORES]</td>\n<td>根据指定的index返回，返回sorted set的成员列表</td>\n</tr>\n<tr>\n<td>ZRANGEBYSCORE key min max [WITHSCORES]</td>\n<td>返回有序集合中指定分数区间内的成员，分数由低到高排序</td>\n</tr>\n<tr>\n<td>ZREM key member [member…]</td>\n<td>从排序的集合中删除一个或多个成员</td>\n</tr>\n<tr>\n<td>ZINCRBY key increment member</td>\n<td>增加一名成员的评分</td>\n</tr>\n<tr>\n<td>ZCOUNT key min max</td>\n<td>返回分数范围内的成员数量</td>\n</tr>\n<tr>\n<td>ZRANK key member</td>\n<td>返回成员在集合中的索引</td>\n</tr>\n<tr>\n<td>ZSCORE key member</td>\n<td>返回成员的得分</td>\n</tr>\n<tr>\n<td>ZREVRANK key member</td>\n<td>返回分数从高到低的成员的排名</td>\n</tr>\n<tr>\n<td>ZREVRANGE key start stop [WITHSCORES]</td>\n<td>返回成员的范围，分数从高到低排序</td>\n</tr>\n<tr>\n<td>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</td>\n<td>按照分数从大到小返回范围元素，可以增加limit进行数量限制</td>\n</tr>\n<tr>\n<td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</td>\n<td>按照分数从小到大返回范围元素，可以增加limit进行数量限制</td>\n</tr>\n<tr>\n<td>ZADD key [NX or XX] [CH] [INCR] score member [score member …]</td>\n<td>将所有指定成员添加到键为key有序集合（sorted set）里面</td>\n</tr>\n<tr>\n<td>ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight] [SUM or MIN orMAX]</td>\n<td>计算交集，并把结果放到destination中</td>\n</tr>\n<tr>\n<td>ZUNIONSCORE</td>\n<td>计算并集，并把结果放到destination中</td>\n</tr>\n<tr>\n<td>ZRANGEBYLEX key min max [LIMIT offset count]</td>\n<td>返回指定成员区间内的成员，按字典正序排列</td>\n</tr>\n<tr>\n<td>ZREM key member [member …]</td>\n<td>删除一个或多个成员</td>\n</tr>\n</tbody>\n</table>"},{"title":"SpringDataRedis简单使用","date":"2016-11-22T16:00:00.000Z","_content":"1. 首先启动一个redis容器，作为要使用的数据库\n``` docker\ndocker run --name redis-server -d -p 6379:6379 redis\n```\n<!-- more -->\n2. 新建一个maven项目，引入spring data redis\n``` pom\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-redis</artifactId>\n        <version>2.0.5.RELEASE</version>\n    </dependency>\n</dependencies>\n<repositories>\n    <repository>\n        <id>spring-libs-release</id>\n        <name>Spring Releases</name>\n        <url>https://repo.spring.io/libs-release</url>\n        <snapshots>\n            <enabled>false</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n```\n配置application.properties来连接redis\n```\nspring.redis.host = 127.0.0.1\nspring.redis.database = 0\nspring.redis.port = 6379\nspring.redis.password =\n```\n3. 写java代码，用来操作redis，用一个简单的lpop来演示：\n``` java\npackage com.test;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.data.redis.core.StringRedisTemplate;\n\n@SpringBootApplication\npublic class App {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n\n    public static void main(String[] args) {\n        ApplicationContext ctx = SpringApplication.run(App.class, args);\n        // 或者可以用@AutoWired\n        StringRedisTemplate template = ctx.getBean(StringRedisTemplate.class);\n        template.opsForList().leftPush(\"key\", \"value\");\n        String data = template.opsForList().leftPop(\"key\");\n        LOGGER.info(\"Get data : \" + data);\n        System.exit(0);\n    }\n}\n\n```\n\n另外，可以配置Lettuce连接\n``` java\n@Configuration\nclass AppConfig {\n\n  @Bean\n  public LettuceConnectionFactory redisConnectionFactory() {\n\n    return new LettuceConnectionFactory(new RedisStandaloneConfiguration(\"server\", 6379));\n  }\n}\n```\n和Jedis连接\n``` java\n@Configuration\nclass RedisConfiguration {\n\n  @Bean\n  public JedisConnectionFactory redisConnectionFactory() {\n\n    RedisStandaloneConfiguration config = new RedisStandaloneConfiguration(\"server\", 6379);\n    return new JedisConnectionFactory(config);\n  }\n}\n```","source":"_posts/SpringDataRedis简单使用.md","raw":"---\ntitle: SpringDataRedis简单使用\ndate: 2016-11-23\ncategories:\n- 后端\n- redis\ntags:\n- 后端\n- spring\n- redis\n---\n1. 首先启动一个redis容器，作为要使用的数据库\n``` docker\ndocker run --name redis-server -d -p 6379:6379 redis\n```\n<!-- more -->\n2. 新建一个maven项目，引入spring data redis\n``` pom\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-redis</artifactId>\n        <version>2.0.5.RELEASE</version>\n    </dependency>\n</dependencies>\n<repositories>\n    <repository>\n        <id>spring-libs-release</id>\n        <name>Spring Releases</name>\n        <url>https://repo.spring.io/libs-release</url>\n        <snapshots>\n            <enabled>false</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n```\n配置application.properties来连接redis\n```\nspring.redis.host = 127.0.0.1\nspring.redis.database = 0\nspring.redis.port = 6379\nspring.redis.password =\n```\n3. 写java代码，用来操作redis，用一个简单的lpop来演示：\n``` java\npackage com.test;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.data.redis.core.StringRedisTemplate;\n\n@SpringBootApplication\npublic class App {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n\n    public static void main(String[] args) {\n        ApplicationContext ctx = SpringApplication.run(App.class, args);\n        // 或者可以用@AutoWired\n        StringRedisTemplate template = ctx.getBean(StringRedisTemplate.class);\n        template.opsForList().leftPush(\"key\", \"value\");\n        String data = template.opsForList().leftPop(\"key\");\n        LOGGER.info(\"Get data : \" + data);\n        System.exit(0);\n    }\n}\n\n```\n\n另外，可以配置Lettuce连接\n``` java\n@Configuration\nclass AppConfig {\n\n  @Bean\n  public LettuceConnectionFactory redisConnectionFactory() {\n\n    return new LettuceConnectionFactory(new RedisStandaloneConfiguration(\"server\", 6379));\n  }\n}\n```\n和Jedis连接\n``` java\n@Configuration\nclass RedisConfiguration {\n\n  @Bean\n  public JedisConnectionFactory redisConnectionFactory() {\n\n    RedisStandaloneConfiguration config = new RedisStandaloneConfiguration(\"server\", 6379);\n    return new JedisConnectionFactory(config);\n  }\n}\n```","slug":"SpringDataRedis简单使用","published":1,"updated":"2018-03-08T10:57:16.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26u001rh0urxooq4it2","content":"<ol>\n<li>首先启动一个redis容器，作为要使用的数据库<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span> --name redis-server -d -p 6379:6379 redis</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li>新建一个maven项目，引入spring data redis<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.0.5.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;repositories&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">        &lt;id&gt;spring-libs-release&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Spring Releases&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;</span><br><span class=\"line\">        &lt;snapshots&gt;</span><br><span class=\"line\">            &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/snapshots&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">&lt;/repositories&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>配置application.properties来连接redis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.redis.host = 127.0.0.1</span><br><span class=\"line\">spring.redis.database = 0</span><br><span class=\"line\">spring.redis.port = 6379</span><br><span class=\"line\">spring.redis.password =</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>写java代码，用来操作redis，用一个简单的lpop来演示：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(App.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ctx = SpringApplication.run(App.class, args);</span><br><span class=\"line\">        <span class=\"comment\">// 或者可以用@AutoWired</span></span><br><span class=\"line\">        StringRedisTemplate template = ctx.getBean(StringRedisTemplate.class);</span><br><span class=\"line\">        template.opsForList().leftPush(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">        String data = template.opsForList().leftPop(<span class=\"string\">\"key\"</span>);</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">\"Get data : \"</span> + data);</span><br><span class=\"line\">        System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>另外，可以配置Lettuce连接<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> LettuceConnectionFactory <span class=\"title\">redisConnectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LettuceConnectionFactory(<span class=\"keyword\">new</span> RedisStandaloneConfiguration(<span class=\"string\">\"server\"</span>, <span class=\"number\">6379</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和Jedis连接<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> JedisConnectionFactory <span class=\"title\">redisConnectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    RedisStandaloneConfiguration config = <span class=\"keyword\">new</span> RedisStandaloneConfiguration(<span class=\"string\">\"server\"</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JedisConnectionFactory(config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>首先启动一个redis容器，作为要使用的数据库<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span> --name redis-server -d -p 6379:6379 redis</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li>新建一个maven项目，引入spring data redis<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.0.5.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;repositories&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">        &lt;id&gt;spring-libs-release&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Spring Releases&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;</span><br><span class=\"line\">        &lt;snapshots&gt;</span><br><span class=\"line\">            &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/snapshots&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">&lt;/repositories&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>配置application.properties来连接redis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.redis.host = 127.0.0.1</span><br><span class=\"line\">spring.redis.database = 0</span><br><span class=\"line\">spring.redis.port = 6379</span><br><span class=\"line\">spring.redis.password =</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>写java代码，用来操作redis，用一个简单的lpop来演示：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(App.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ctx = SpringApplication.run(App.class, args);</span><br><span class=\"line\">        <span class=\"comment\">// 或者可以用@AutoWired</span></span><br><span class=\"line\">        StringRedisTemplate template = ctx.getBean(StringRedisTemplate.class);</span><br><span class=\"line\">        template.opsForList().leftPush(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">        String data = template.opsForList().leftPop(<span class=\"string\">\"key\"</span>);</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">\"Get data : \"</span> + data);</span><br><span class=\"line\">        System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>另外，可以配置Lettuce连接<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> LettuceConnectionFactory <span class=\"title\">redisConnectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LettuceConnectionFactory(<span class=\"keyword\">new</span> RedisStandaloneConfiguration(<span class=\"string\">\"server\"</span>, <span class=\"number\">6379</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和Jedis连接<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> JedisConnectionFactory <span class=\"title\">redisConnectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    RedisStandaloneConfiguration config = <span class=\"keyword\">new</span> RedisStandaloneConfiguration(<span class=\"string\">\"server\"</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JedisConnectionFactory(config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"ng-alain源码简析","date":"2016-05-19T16:00:00.000Z","_content":"# 外围配置\n\n## Dockerfile\n```\n# STEP 1: Build\n// copy package.json和lock到当前工作目录\n// node执行install,把创建好的./node_modules复制到新创建的ng-alain文件夹下\n// 设置工作目录为/ng-alain\n// 拷贝所有源文件到工作目录中\nFROM node:8-alpine as builder\n\nLABEL authors=\"cipchk <cipchk@qq.com>\"\n\nCOPY package.json package-lock.json ./\n\nRUN npm set progress=false && npm config set depth 0 && npm cache clean --force\nRUN npm i && mkdir /ng-alain && cp -R ./node_modules ./ng-alain\n\nWORKDIR /ng-alain\n\nCOPY . .\n\nRUN npm run build\n\n# STEP 2: Setup\n// 拷贝nginx配置，ssl配置到nginx中\n// 拷贝/ng-alain下的dist目录到nginx文件夹\n// 运行nginx对页面进行代理\nFROM nginx:1.13.5-alpine\n\nCOPY --from=builder /ng-alain/_nginx/default.conf /etc/nginx/conf.d/default.conf\nCOPY --from=builder /ng-alain/_nginx/ssl/* /etc/nginx/ssl/\n\nRUN rm -rf /usr/share/nginx/html/*\n\nCOPY --from=builder /ng-alain/dist /usr/share/nginx/html\n\nCMD [ \"nginx\", \"-g\", \"daemon off;\"]\n```\n<!-- more -->\n## nginx配置\n配置了端口80，虚拟主机名localhost，主目录/usr/share/nginx/html，首页index.html，错误处理画面50x.html\n``` config\nserver {\n    listen       80;\n    # listen 443;\n    # ssl on;\n    # ssl_certificate /etc/nginx/ssl/server.crt;\n    # ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n## docker compose\n简单的使用上面的dockerfile进行build，并传入环境变量NODE_ENV:production\n\n# 结构\n\nng-alain由以下几大模块组成：\n- core\n- layout\n- routes\n- shared\n\n## core模块\ncore模块首先提供了i18n服务，下面来看ng-alain是如何实现i18n转换的：\n\n1. I18NService实现了AlainI18NService接口，这个接口是这样定义的：\n``` typescript\nexport interface AlainI18NService {\n    [key: string]: any;\n    use(lang: string, firstLoad: boolean): void;\n    getLangs(): any[];\n    fanyi(key: string): any;\n}\n```\n2. 构造方法中调用``ngx-translate``的``addLangs``方法来增加可选语言。``use``方法内设置了ng-zorro的国际化，如果是初次加载时，需要重新刷新页面，也就是重定向到``/``，``use``方法的最后，调用了``ngx-translate``的``use``方法。这样，就可以使用``assets/i18n``中的文件，然后利用模板内的``translate``标识符进行翻译。\n```\nexport function HttpLoaderFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http, `assets/i18n/`, '.json');\n}.\n\n```\n\n接下来，core模块实现了http拦截器，通过对``HttpInterceptor``接口的实现，将错误全部导入``handleData``方法进行处理，然后根据错误代码导向不同的页面。\n\n最后，core模块制作了一个初始化器，用来加载app内必要的数据。然后设置应用信息，用户信息，初始化菜单等，这期间，调用了@delon theme中的几个服务，例如：``MenuService,SettingsService，TitleService``，这几个服务将会贯穿整个app的始终。\n\n## layout模块\n\nlayout模块制定了页面布局，也就是以下几个部分：\n\n-  header \n-  sidebar\n-  passport\n-  default: 页面的标准布局\n\n其中，header，sidebar的每一个部分都是一个独立的组件，这两个模块的详细解析放在专门章节解读。\n\npassport模块定义了路由插槽，login,register两个模块可以在passport模块上来回切换。\n\ndefault页面的布局如下：\n``` html\n<div class=\"wrapper\">\n    <div class=\"router-progress-bar\" *ngIf=\"isFetching\"></div>\n    <app-header class=\"header\"></app-header>\n    <app-sidebar class=\"aside\"></app-sidebar>\n    <section class=\"content\">\n        <!-- 引用自@delon/abc/reuse-tab -->\n        <reuse-tab></reuse-tab>\n        <router-outlet></router-outlet>\n    </section>\n</div>\n```\n\ndefault模块内订阅了router事件，当发生错误时停止``router-progress-bar``的滚动，100毫秒后隐藏``progress-bar``，它的css在@delon/theme/styles/app/router-progress-bar.less中。\n\n## routes模块\n\nroutes模块中定义了整个app的路由表和对应的组件，事实上把路由表与组件分开会让src的结构更加清晰。\n\n## shared模块\n\n将常用模块包装后又导出。跟正常的shared模块的用途一致。","source":"_posts/ng-alain源码简析.md","raw":"---\ntitle: ng-alain源码简析\ndate: 2016-5-20\ncategories:\n- 前端\n- angular\ntags:\n- 前端\n- 源码\n- ng-alain\n---\n# 外围配置\n\n## Dockerfile\n```\n# STEP 1: Build\n// copy package.json和lock到当前工作目录\n// node执行install,把创建好的./node_modules复制到新创建的ng-alain文件夹下\n// 设置工作目录为/ng-alain\n// 拷贝所有源文件到工作目录中\nFROM node:8-alpine as builder\n\nLABEL authors=\"cipchk <cipchk@qq.com>\"\n\nCOPY package.json package-lock.json ./\n\nRUN npm set progress=false && npm config set depth 0 && npm cache clean --force\nRUN npm i && mkdir /ng-alain && cp -R ./node_modules ./ng-alain\n\nWORKDIR /ng-alain\n\nCOPY . .\n\nRUN npm run build\n\n# STEP 2: Setup\n// 拷贝nginx配置，ssl配置到nginx中\n// 拷贝/ng-alain下的dist目录到nginx文件夹\n// 运行nginx对页面进行代理\nFROM nginx:1.13.5-alpine\n\nCOPY --from=builder /ng-alain/_nginx/default.conf /etc/nginx/conf.d/default.conf\nCOPY --from=builder /ng-alain/_nginx/ssl/* /etc/nginx/ssl/\n\nRUN rm -rf /usr/share/nginx/html/*\n\nCOPY --from=builder /ng-alain/dist /usr/share/nginx/html\n\nCMD [ \"nginx\", \"-g\", \"daemon off;\"]\n```\n<!-- more -->\n## nginx配置\n配置了端口80，虚拟主机名localhost，主目录/usr/share/nginx/html，首页index.html，错误处理画面50x.html\n``` config\nserver {\n    listen       80;\n    # listen 443;\n    # ssl on;\n    # ssl_certificate /etc/nginx/ssl/server.crt;\n    # ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n## docker compose\n简单的使用上面的dockerfile进行build，并传入环境变量NODE_ENV:production\n\n# 结构\n\nng-alain由以下几大模块组成：\n- core\n- layout\n- routes\n- shared\n\n## core模块\ncore模块首先提供了i18n服务，下面来看ng-alain是如何实现i18n转换的：\n\n1. I18NService实现了AlainI18NService接口，这个接口是这样定义的：\n``` typescript\nexport interface AlainI18NService {\n    [key: string]: any;\n    use(lang: string, firstLoad: boolean): void;\n    getLangs(): any[];\n    fanyi(key: string): any;\n}\n```\n2. 构造方法中调用``ngx-translate``的``addLangs``方法来增加可选语言。``use``方法内设置了ng-zorro的国际化，如果是初次加载时，需要重新刷新页面，也就是重定向到``/``，``use``方法的最后，调用了``ngx-translate``的``use``方法。这样，就可以使用``assets/i18n``中的文件，然后利用模板内的``translate``标识符进行翻译。\n```\nexport function HttpLoaderFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http, `assets/i18n/`, '.json');\n}.\n\n```\n\n接下来，core模块实现了http拦截器，通过对``HttpInterceptor``接口的实现，将错误全部导入``handleData``方法进行处理，然后根据错误代码导向不同的页面。\n\n最后，core模块制作了一个初始化器，用来加载app内必要的数据。然后设置应用信息，用户信息，初始化菜单等，这期间，调用了@delon theme中的几个服务，例如：``MenuService,SettingsService，TitleService``，这几个服务将会贯穿整个app的始终。\n\n## layout模块\n\nlayout模块制定了页面布局，也就是以下几个部分：\n\n-  header \n-  sidebar\n-  passport\n-  default: 页面的标准布局\n\n其中，header，sidebar的每一个部分都是一个独立的组件，这两个模块的详细解析放在专门章节解读。\n\npassport模块定义了路由插槽，login,register两个模块可以在passport模块上来回切换。\n\ndefault页面的布局如下：\n``` html\n<div class=\"wrapper\">\n    <div class=\"router-progress-bar\" *ngIf=\"isFetching\"></div>\n    <app-header class=\"header\"></app-header>\n    <app-sidebar class=\"aside\"></app-sidebar>\n    <section class=\"content\">\n        <!-- 引用自@delon/abc/reuse-tab -->\n        <reuse-tab></reuse-tab>\n        <router-outlet></router-outlet>\n    </section>\n</div>\n```\n\ndefault模块内订阅了router事件，当发生错误时停止``router-progress-bar``的滚动，100毫秒后隐藏``progress-bar``，它的css在@delon/theme/styles/app/router-progress-bar.less中。\n\n## routes模块\n\nroutes模块中定义了整个app的路由表和对应的组件，事实上把路由表与组件分开会让src的结构更加清晰。\n\n## shared模块\n\n将常用模块包装后又导出。跟正常的shared模块的用途一致。","slug":"ng-alain源码简析","published":1,"updated":"2019-04-08T05:39:58.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26y001vh0urlhisij1z","content":"<h1 id=\"外围配置\"><a href=\"#外围配置\" class=\"headerlink\" title=\"外围配置\"></a>外围配置</h1><h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># STEP 1: Build</span><br><span class=\"line\">// copy package.json和lock到当前工作目录</span><br><span class=\"line\">// node执行install,把创建好的./node_modules复制到新创建的ng-alain文件夹下</span><br><span class=\"line\">// 设置工作目录为/ng-alain</span><br><span class=\"line\">// 拷贝所有源文件到工作目录中</span><br><span class=\"line\">FROM node:8-alpine as builder</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL authors=&quot;cipchk &lt;cipchk@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">COPY package.json package-lock.json ./</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm set progress=false &amp;&amp; npm config set depth 0 &amp;&amp; npm cache clean --force</span><br><span class=\"line\">RUN npm i &amp;&amp; mkdir /ng-alain &amp;&amp; cp -R ./node_modules ./ng-alain</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /ng-alain</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"># STEP 2: Setup</span><br><span class=\"line\">// 拷贝nginx配置，ssl配置到nginx中</span><br><span class=\"line\">// 拷贝/ng-alain下的dist目录到nginx文件夹</span><br><span class=\"line\">// 运行nginx对页面进行代理</span><br><span class=\"line\">FROM nginx:1.13.5-alpine</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=builder /ng-alain/_nginx/default.conf /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">COPY --from=builder /ng-alain/_nginx/ssl/* /etc/nginx/ssl/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rm -rf /usr/share/nginx/html/*</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=builder /ng-alain/dist /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [ &quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>配置了端口80，虚拟主机名localhost，主目录/usr/share/nginx/html，首页index.html，错误处理画面50x.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    # listen 443;</span><br><span class=\"line\">    # ssl on;</span><br><span class=\"line\">    # ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class=\"line\">    # ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h2><p>简单的使用上面的dockerfile进行build，并传入环境变量NODE_ENV:production</p>\n<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><p>ng-alain由以下几大模块组成：</p>\n<ul>\n<li>core</li>\n<li>layout</li>\n<li>routes</li>\n<li>shared</li>\n</ul>\n<h2 id=\"core模块\"><a href=\"#core模块\" class=\"headerlink\" title=\"core模块\"></a>core模块</h2><p>core模块首先提供了i18n服务，下面来看ng-alain是如何实现i18n转换的：</p>\n<ol>\n<li><p>I18NService实现了AlainI18NService接口，这个接口是这样定义的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AlainI18NService &#123;</span><br><span class=\"line\">    [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    use(lang: <span class=\"built_in\">string</span>, firstLoad: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    getLangs(): <span class=\"built_in\">any</span>[];</span><br><span class=\"line\">    fanyi(key: <span class=\"built_in\">string</span>): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造方法中调用<code>ngx-translate</code>的<code>addLangs</code>方法来增加可选语言。<code>use</code>方法内设置了ng-zorro的国际化，如果是初次加载时，需要重新刷新页面，也就是重定向到<code>/</code>，<code>use</code>方法的最后，调用了<code>ngx-translate</code>的<code>use</code>方法。这样，就可以使用<code>assets/i18n</code>中的文件，然后利用模板内的<code>translate</code>标识符进行翻译。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function HttpLoaderFactory(http: HttpClient) &#123;</span><br><span class=\"line\">    return new TranslateHttpLoader(http, `assets/i18n/`, &apos;.json&apos;);</span><br><span class=\"line\">&#125;.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>接下来，core模块实现了http拦截器，通过对<code>HttpInterceptor</code>接口的实现，将错误全部导入<code>handleData</code>方法进行处理，然后根据错误代码导向不同的页面。</p>\n<p>最后，core模块制作了一个初始化器，用来加载app内必要的数据。然后设置应用信息，用户信息，初始化菜单等，这期间，调用了@delon theme中的几个服务，例如：<code>MenuService,SettingsService，TitleService</code>，这几个服务将会贯穿整个app的始终。</p>\n<h2 id=\"layout模块\"><a href=\"#layout模块\" class=\"headerlink\" title=\"layout模块\"></a>layout模块</h2><p>layout模块制定了页面布局，也就是以下几个部分：</p>\n<ul>\n<li>header </li>\n<li>sidebar</li>\n<li>passport</li>\n<li>default: 页面的标准布局</li>\n</ul>\n<p>其中，header，sidebar的每一个部分都是一个独立的组件，这两个模块的详细解析放在专门章节解读。</p>\n<p>passport模块定义了路由插槽，login,register两个模块可以在passport模块上来回切换。</p>\n<p>default页面的布局如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"router-progress-bar\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"isFetching\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-sidebar</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sidebar</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 引用自@delon/abc/reuse-tab --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">reuse-tab</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">reuse-tab</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>default模块内订阅了router事件，当发生错误时停止<code>router-progress-bar</code>的滚动，100毫秒后隐藏<code>progress-bar</code>，它的css在@delon/theme/styles/app/router-progress-bar.less中。</p>\n<h2 id=\"routes模块\"><a href=\"#routes模块\" class=\"headerlink\" title=\"routes模块\"></a>routes模块</h2><p>routes模块中定义了整个app的路由表和对应的组件，事实上把路由表与组件分开会让src的结构更加清晰。</p>\n<h2 id=\"shared模块\"><a href=\"#shared模块\" class=\"headerlink\" title=\"shared模块\"></a>shared模块</h2><p>将常用模块包装后又导出。跟正常的shared模块的用途一致。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"外围配置\"><a href=\"#外围配置\" class=\"headerlink\" title=\"外围配置\"></a>外围配置</h1><h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># STEP 1: Build</span><br><span class=\"line\">// copy package.json和lock到当前工作目录</span><br><span class=\"line\">// node执行install,把创建好的./node_modules复制到新创建的ng-alain文件夹下</span><br><span class=\"line\">// 设置工作目录为/ng-alain</span><br><span class=\"line\">// 拷贝所有源文件到工作目录中</span><br><span class=\"line\">FROM node:8-alpine as builder</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL authors=&quot;cipchk &lt;cipchk@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">COPY package.json package-lock.json ./</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm set progress=false &amp;&amp; npm config set depth 0 &amp;&amp; npm cache clean --force</span><br><span class=\"line\">RUN npm i &amp;&amp; mkdir /ng-alain &amp;&amp; cp -R ./node_modules ./ng-alain</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /ng-alain</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"># STEP 2: Setup</span><br><span class=\"line\">// 拷贝nginx配置，ssl配置到nginx中</span><br><span class=\"line\">// 拷贝/ng-alain下的dist目录到nginx文件夹</span><br><span class=\"line\">// 运行nginx对页面进行代理</span><br><span class=\"line\">FROM nginx:1.13.5-alpine</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=builder /ng-alain/_nginx/default.conf /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">COPY --from=builder /ng-alain/_nginx/ssl/* /etc/nginx/ssl/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rm -rf /usr/share/nginx/html/*</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=builder /ng-alain/dist /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [ &quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>配置了端口80，虚拟主机名localhost，主目录/usr/share/nginx/html，首页index.html，错误处理画面50x.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    # listen 443;</span><br><span class=\"line\">    # ssl on;</span><br><span class=\"line\">    # ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class=\"line\">    # ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h2><p>简单的使用上面的dockerfile进行build，并传入环境变量NODE_ENV:production</p>\n<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><p>ng-alain由以下几大模块组成：</p>\n<ul>\n<li>core</li>\n<li>layout</li>\n<li>routes</li>\n<li>shared</li>\n</ul>\n<h2 id=\"core模块\"><a href=\"#core模块\" class=\"headerlink\" title=\"core模块\"></a>core模块</h2><p>core模块首先提供了i18n服务，下面来看ng-alain是如何实现i18n转换的：</p>\n<ol>\n<li><p>I18NService实现了AlainI18NService接口，这个接口是这样定义的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AlainI18NService &#123;</span><br><span class=\"line\">    [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    use(lang: <span class=\"built_in\">string</span>, firstLoad: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    getLangs(): <span class=\"built_in\">any</span>[];</span><br><span class=\"line\">    fanyi(key: <span class=\"built_in\">string</span>): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造方法中调用<code>ngx-translate</code>的<code>addLangs</code>方法来增加可选语言。<code>use</code>方法内设置了ng-zorro的国际化，如果是初次加载时，需要重新刷新页面，也就是重定向到<code>/</code>，<code>use</code>方法的最后，调用了<code>ngx-translate</code>的<code>use</code>方法。这样，就可以使用<code>assets/i18n</code>中的文件，然后利用模板内的<code>translate</code>标识符进行翻译。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function HttpLoaderFactory(http: HttpClient) &#123;</span><br><span class=\"line\">    return new TranslateHttpLoader(http, `assets/i18n/`, &apos;.json&apos;);</span><br><span class=\"line\">&#125;.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>接下来，core模块实现了http拦截器，通过对<code>HttpInterceptor</code>接口的实现，将错误全部导入<code>handleData</code>方法进行处理，然后根据错误代码导向不同的页面。</p>\n<p>最后，core模块制作了一个初始化器，用来加载app内必要的数据。然后设置应用信息，用户信息，初始化菜单等，这期间，调用了@delon theme中的几个服务，例如：<code>MenuService,SettingsService，TitleService</code>，这几个服务将会贯穿整个app的始终。</p>\n<h2 id=\"layout模块\"><a href=\"#layout模块\" class=\"headerlink\" title=\"layout模块\"></a>layout模块</h2><p>layout模块制定了页面布局，也就是以下几个部分：</p>\n<ul>\n<li>header </li>\n<li>sidebar</li>\n<li>passport</li>\n<li>default: 页面的标准布局</li>\n</ul>\n<p>其中，header，sidebar的每一个部分都是一个独立的组件，这两个模块的详细解析放在专门章节解读。</p>\n<p>passport模块定义了路由插槽，login,register两个模块可以在passport模块上来回切换。</p>\n<p>default页面的布局如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"router-progress-bar\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"isFetching\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-sidebar</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sidebar</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 引用自@delon/abc/reuse-tab --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">reuse-tab</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">reuse-tab</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>default模块内订阅了router事件，当发生错误时停止<code>router-progress-bar</code>的滚动，100毫秒后隐藏<code>progress-bar</code>，它的css在@delon/theme/styles/app/router-progress-bar.less中。</p>\n<h2 id=\"routes模块\"><a href=\"#routes模块\" class=\"headerlink\" title=\"routes模块\"></a>routes模块</h2><p>routes模块中定义了整个app的路由表和对应的组件，事实上把路由表与组件分开会让src的结构更加清晰。</p>\n<h2 id=\"shared模块\"><a href=\"#shared模块\" class=\"headerlink\" title=\"shared模块\"></a>shared模块</h2><p>将常用模块包装后又导出。跟正常的shared模块的用途一致。</p>"},{"title":"nodejs中三种方式执行任务流","date":"2016-04-28T16:00:00.000Z","_content":"nodejs作为异步平台，有时候也有按顺序执行同步任务的需求。假设有这样一个任务：\n\n首先根据singer去数据库中取ablum,然后从ablum中取song。看以看出，这些任务都是后面依赖前面的，所以传统的异步方法是不行的。有以下三种方法来完成这个任务：\n<!-- more -->\n## Async.parallel\n使用``async``库中的方法来完成这个任务：\n``` javascript\nfunction parallelDemo(req, res, next) {\n    async.parallel({\n        albums: cb => {\n            restApi.getAblums(singer).then((response) => {\n                if (response.statusCode !== 200) {\n                    return cb('Unable to process ablum request');\n                }\n                return cb(null, albums);\n            })\n        },\n        songs: cb => {\n            restApi.getSongs(album).then((response) => {\n                if (response.statusCode !== 200) {\n                    return cb('Unable to process song request');\n                }\n                return cb(null, songs);\n            })\n        }\n    }, (err, result) => {\n        if (err) {\n            return res.status(500).send(err);\n        }\n        return res.json(result);\n    })\n}\n```\n\n## 使用Promise.all\n``` javascript\nfunction parallelDemo(req, res, next) {\n    Promise.all([\n            getAblums(singer),\n            getSongs(ablum)\n        ])\n        .then(results => {\n            let [albums, songs] = results;\n            return res.json({\n                albums: albums.data,\n                songs: songs.data\n            });\n        })\n        .catch(err => {\n            return res.status(500).send(err);\n        })\n}\n```\n\n## 使用async,await\n``` javascript\n const processRequest = async () => {\n        const [posts, albums, photos] = await Promise.all([\n            getAblums(singer),\n            getSongs(ablum)\n        ]);\n        return {\n            albums: albums.data,\n            songs: songs.data\n        };\n    };\nprocessRequest()\n    .then(rsp => {\n        return res.json(rsp);\n    })\n    .catch(err => {\n        return res.stats(500).send(err);\n    });\n```","source":"_posts/nodejs中三种方式执行任务流.md","raw":"---\ntitle: nodejs中三种方式执行任务流\ndate: 2016-4-29\ncategories:\n- 前端\n- ES6\ntags:\n- 前端\n- javascript\n- ES6\n- Promise\n- async/await\n---\nnodejs作为异步平台，有时候也有按顺序执行同步任务的需求。假设有这样一个任务：\n\n首先根据singer去数据库中取ablum,然后从ablum中取song。看以看出，这些任务都是后面依赖前面的，所以传统的异步方法是不行的。有以下三种方法来完成这个任务：\n<!-- more -->\n## Async.parallel\n使用``async``库中的方法来完成这个任务：\n``` javascript\nfunction parallelDemo(req, res, next) {\n    async.parallel({\n        albums: cb => {\n            restApi.getAblums(singer).then((response) => {\n                if (response.statusCode !== 200) {\n                    return cb('Unable to process ablum request');\n                }\n                return cb(null, albums);\n            })\n        },\n        songs: cb => {\n            restApi.getSongs(album).then((response) => {\n                if (response.statusCode !== 200) {\n                    return cb('Unable to process song request');\n                }\n                return cb(null, songs);\n            })\n        }\n    }, (err, result) => {\n        if (err) {\n            return res.status(500).send(err);\n        }\n        return res.json(result);\n    })\n}\n```\n\n## 使用Promise.all\n``` javascript\nfunction parallelDemo(req, res, next) {\n    Promise.all([\n            getAblums(singer),\n            getSongs(ablum)\n        ])\n        .then(results => {\n            let [albums, songs] = results;\n            return res.json({\n                albums: albums.data,\n                songs: songs.data\n            });\n        })\n        .catch(err => {\n            return res.status(500).send(err);\n        })\n}\n```\n\n## 使用async,await\n``` javascript\n const processRequest = async () => {\n        const [posts, albums, photos] = await Promise.all([\n            getAblums(singer),\n            getSongs(ablum)\n        ]);\n        return {\n            albums: albums.data,\n            songs: songs.data\n        };\n    };\nprocessRequest()\n    .then(rsp => {\n        return res.json(rsp);\n    })\n    .catch(err => {\n        return res.stats(500).send(err);\n    });\n```","slug":"nodejs中三种方式执行任务流","published":1,"updated":"2018-02-28T07:51:57.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv26z001yh0urgkcyqlhn","content":"<p>nodejs作为异步平台，有时候也有按顺序执行同步任务的需求。假设有这样一个任务：</p>\n<p>首先根据singer去数据库中取ablum,然后从ablum中取song。看以看出，这些任务都是后面依赖前面的，所以传统的异步方法是不行的。有以下三种方法来完成这个任务：<br><a id=\"more\"></a></p>\n<h2 id=\"Async-parallel\"><a href=\"#Async-parallel\" class=\"headerlink\" title=\"Async.parallel\"></a>Async.parallel</h2><p>使用<code>async</code>库中的方法来完成这个任务：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parallelDemo</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>.parallel(&#123;</span><br><span class=\"line\">        albums: <span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            restApi.getAblums(singer).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.statusCode !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cb(<span class=\"string\">'Unable to process ablum request'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, albums);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        songs: <span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            restApi.getSongs(album).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.statusCode !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cb(<span class=\"string\">'Unable to process song request'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, songs);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, (err, result) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用Promise-all\"><a href=\"#使用Promise-all\" class=\"headerlink\" title=\"使用Promise.all\"></a>使用Promise.all</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parallelDemo</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">            getAblums(singer),</span><br><span class=\"line\">            getSongs(ablum)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> [albums, songs] = results;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">                albums: albums.data,</span><br><span class=\"line\">                songs: songs.data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用async-await\"><a href=\"#使用async-await\" class=\"headerlink\" title=\"使用async,await\"></a>使用async,await</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> processRequest = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [posts, albums, photos] = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">            getAblums(singer),</span><br><span class=\"line\">            getSongs(ablum)</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            albums: albums.data,</span><br><span class=\"line\">            songs: songs.data</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">processRequest()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(rsp);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.stats(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>nodejs作为异步平台，有时候也有按顺序执行同步任务的需求。假设有这样一个任务：</p>\n<p>首先根据singer去数据库中取ablum,然后从ablum中取song。看以看出，这些任务都是后面依赖前面的，所以传统的异步方法是不行的。有以下三种方法来完成这个任务：<br>","more":"</p>\n<h2 id=\"Async-parallel\"><a href=\"#Async-parallel\" class=\"headerlink\" title=\"Async.parallel\"></a>Async.parallel</h2><p>使用<code>async</code>库中的方法来完成这个任务：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parallelDemo</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>.parallel(&#123;</span><br><span class=\"line\">        albums: <span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            restApi.getAblums(singer).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.statusCode !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cb(<span class=\"string\">'Unable to process ablum request'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, albums);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        songs: <span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            restApi.getSongs(album).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.statusCode !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cb(<span class=\"string\">'Unable to process song request'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, songs);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, (err, result) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用Promise-all\"><a href=\"#使用Promise-all\" class=\"headerlink\" title=\"使用Promise.all\"></a>使用Promise.all</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parallelDemo</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">            getAblums(singer),</span><br><span class=\"line\">            getSongs(ablum)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> [albums, songs] = results;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">                albums: albums.data,</span><br><span class=\"line\">                songs: songs.data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用async-await\"><a href=\"#使用async-await\" class=\"headerlink\" title=\"使用async,await\"></a>使用async,await</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> processRequest = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [posts, albums, photos] = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">            getAblums(singer),</span><br><span class=\"line\">            getSongs(ablum)</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            albums: albums.data,</span><br><span class=\"line\">            songs: songs.data</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">processRequest()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(rsp);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.stats(<span class=\"number\">500</span>).send(err);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>"},{"title":"nodejs常见坑解决","date":"2016-05-18T16:00:00.000Z","_content":"1. node-sass包内安装失败\n``` javascript\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm install node-sass\n\n// angular全局安装出错时手动替换node-sass\nC:\\Users\\xxxx\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules\\node-sass\\vendor\\win32-x64-57\\\n下的binding.node，换成从网上下载的win32-x64-57_binding.node\n```\n<!-- more -->\n2. 换源\n```\nnpm config set registry=https://registry.npm.taobao.org\n```","source":"_posts/nodejs常见坑解决.md","raw":"---\ntitle: nodejs常见坑解决\ndate: 2016-5-19\ncategories:\n- 前端\n- nodejs\ntags:\n- 前端\n- javascript\n- nodejs\n---\n1. node-sass包内安装失败\n``` javascript\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm install node-sass\n\n// angular全局安装出错时手动替换node-sass\nC:\\Users\\xxxx\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules\\node-sass\\vendor\\win32-x64-57\\\n下的binding.node，换成从网上下载的win32-x64-57_binding.node\n```\n<!-- more -->\n2. 换源\n```\nnpm config set registry=https://registry.npm.taobao.org\n```","slug":"nodejs常见坑解决","published":1,"updated":"2018-02-28T07:52:52.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv2720023h0ura6rs2ao3","content":"<ol>\n<li>node-sass包内安装失败<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\">cnpm install node-sass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// angular全局安装出错时手动替换node-sass</span></span><br><span class=\"line\">C:\\Users\\xxxx\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules\\node-sass\\vendor\\win32-x64<span class=\"number\">-57</span>\\</span><br><span class=\"line\">下的binding.node，换成从网上下载的win32-x64<span class=\"number\">-57</span>_binding.node</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li>换源<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>node-sass包内安装失败<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\">cnpm install node-sass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// angular全局安装出错时手动替换node-sass</span></span><br><span class=\"line\">C:\\Users\\xxxx\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules\\node-sass\\vendor\\win32-x64<span class=\"number\">-57</span>\\</span><br><span class=\"line\">下的binding.node，换成从网上下载的win32-x64<span class=\"number\">-57</span>_binding.node</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li>换源<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"sequelizejs中model定义方法","date":"2017-01-20T16:00:00.000Z","_content":"\n以下是对sequelize.define方法的详解：\n\n# 可以为define方法添加getter,setter\n<!-- more -->\n``` javascript\nconst Employee = sequelize.define('employee', {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    // 字段内的get方法\n    get() {\n      const title = this.getDataValue('title');\n      return this.getDataValue('name') + ' (' + title + ')';\n      // this.getDataValue是内建的help方法，用来取得字段的值\n    },\n  },\n  title: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    // 字段内的set方法\n    set(val) {\n      this.setDataValue('title', val.toUpperCase());\n      // 同上\n    }\n  }\n});\n```\n# 如果要后台检验值时，可以使用model内的validations\n``` javascript\n// msg属性可以作为错误信息传递到前台\nconst ValidateMe = sequelize.define('foo', {\n  foo: {\n    type: Sequelize.STRING,\n    validate: {\n      is: [\"^[a-z]+$\",'i'],     // will only allow letters\n      is: /^[a-z]+$/i,          // same as the previous example using real RegExp\n      not: [\"[a-z]\",'i'],       // will not allow letters\n      isEmail: true,            // checks for email format (foo@bar.com)\n      isUrl: true,              // checks for url format (http://foo.com)\n      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format\n      isIPv4: true,             // checks for IPv4 (129.89.23.1)\n      isIPv6: true,             // checks for IPv6 format\n      isAlpha: true,            // will only allow letters\n      isAlphanumeric: true,     // will only allow alphanumeric characters, so \"_abc\" will fail\n      isNumeric: true,          // will only allow numbers\n      isInt: true,              // checks for valid integers\n      isFloat: true,            // checks for valid floating point numbers\n      isDecimal: true,          // checks for any numbers\n      isLowercase: true,        // checks for lowercase\n      isUppercase: true,        // checks for uppercase\n      notNull: true,            // won't allow null\n      isNull: true,             // only allows null\n      notEmpty: true,           // don't allow empty strings\n      equals: 'specific value', // only allow a specific value\n      contains: 'foo',          // force specific substrings\n      notIn: [['foo', 'bar']],  // check the value is not one of these\n      isIn: [['foo', 'bar']],   // check the value is one of these\n      notContains: 'bar',       // don't allow specific substrings\n      len: [2,10],              // only allow values with length between 2 and 10\n      isUUID: 4,                // only allow uuids\n      isDate: true,             // only allow date strings\n      isAfter: \"2011-11-05\",    // only allow date strings after a specific date\n      isBefore: \"2011-11-05\",   // only allow date strings before a specific date\n      max: 23,                  // only allow values <= 23\n      min: 23,                  // only allow values >= 23\n      isCreditCard: true,       // check for valid credit card numbers\n\n      // custom validations are also possible:\n      isEven(value) {\n        if (parseInt(value) % 2 != 0) {\n          throw new Error('Only even values are allowed!')\n          // we also are in the model's context here, so this.otherField\n          // would get the value of otherField if it existed\n        }\n      }\n    }\n  }\n});\n```\n# 可以在表结构上附加Options\n``` javascript\n{\n  // 不需要updatedAt, createdAt时填false\n  timestamps: false,\n  // 在删除操作时，并不真正删除，而是设置deletedAt字段。必须和timestamps连用\n  paranoid: true,\n  // 新加入的字段，例如updatedAt，由驼峰式改为下划线式，updated_at\n  underscored: true,\n  // 禁止自动更改表名，用默认model名作为表名（即自动由单数转为复数）\n  freezeTableName: true,\n  // 设置表名\n  tableName: 'my_very_custom_table_name',\n  // 增加version字段，设为true或者想要的字段名\n  version: true\n  // 不要createdAt\n  createdAt: false,\n  // 把updatedAt改成updateTimestamp\n  updatedAt: 'updateTimestamp',\n  // 同理\n  deletedAt: 'destroyTime',\n  // engine，设置表引擎\n  engine: 'MYISAM'\n  // 设置表注释\n  comment: \"I'm a table comment!\",\n  // 索引选项，用来生成表时建立索引\n   indexes: [\n    // Create a unique index on email\n    {\n      unique: true,\n      fields: ['email']\n    },\n\n    // Creates a gin index on data with the jsonb_path_ops operator\n    {\n      fields: ['data'],\n      using: 'gin', //PostgreSQL\n      operator: 'jsonb_path_ops'\n    },\n\n    // By default index name will be [table]_[fields]\n    // Creates a multi column partial index\n    {\n      name: 'public_by_author',\n      fields: ['author', 'status'], //聚合索引，带有条件\n      where: {\n        status: 'public'\n      }\n    },\n\n    // A BTREE index with a ordered field\n    {\n      name: 'title_index',\n      method: 'BTREE', // 建立一个btree索引\n      fields: ['author', {attribute: 'title', collate: 'en_US', order: 'DESC', length: 5}]\n    }\n  ]\n\n})\n```","source":"_posts/sequelizejs中model定义方法.md","raw":"---\ntitle: sequelizejs中model定义方法\ndate: 2017-1-21\ncategories:\n- 后端\n- sequelizejs\ntags:\n- 后端\n- javascript\n- sequelizejs\n---\n\n以下是对sequelize.define方法的详解：\n\n# 可以为define方法添加getter,setter\n<!-- more -->\n``` javascript\nconst Employee = sequelize.define('employee', {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    // 字段内的get方法\n    get() {\n      const title = this.getDataValue('title');\n      return this.getDataValue('name') + ' (' + title + ')';\n      // this.getDataValue是内建的help方法，用来取得字段的值\n    },\n  },\n  title: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    // 字段内的set方法\n    set(val) {\n      this.setDataValue('title', val.toUpperCase());\n      // 同上\n    }\n  }\n});\n```\n# 如果要后台检验值时，可以使用model内的validations\n``` javascript\n// msg属性可以作为错误信息传递到前台\nconst ValidateMe = sequelize.define('foo', {\n  foo: {\n    type: Sequelize.STRING,\n    validate: {\n      is: [\"^[a-z]+$\",'i'],     // will only allow letters\n      is: /^[a-z]+$/i,          // same as the previous example using real RegExp\n      not: [\"[a-z]\",'i'],       // will not allow letters\n      isEmail: true,            // checks for email format (foo@bar.com)\n      isUrl: true,              // checks for url format (http://foo.com)\n      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format\n      isIPv4: true,             // checks for IPv4 (129.89.23.1)\n      isIPv6: true,             // checks for IPv6 format\n      isAlpha: true,            // will only allow letters\n      isAlphanumeric: true,     // will only allow alphanumeric characters, so \"_abc\" will fail\n      isNumeric: true,          // will only allow numbers\n      isInt: true,              // checks for valid integers\n      isFloat: true,            // checks for valid floating point numbers\n      isDecimal: true,          // checks for any numbers\n      isLowercase: true,        // checks for lowercase\n      isUppercase: true,        // checks for uppercase\n      notNull: true,            // won't allow null\n      isNull: true,             // only allows null\n      notEmpty: true,           // don't allow empty strings\n      equals: 'specific value', // only allow a specific value\n      contains: 'foo',          // force specific substrings\n      notIn: [['foo', 'bar']],  // check the value is not one of these\n      isIn: [['foo', 'bar']],   // check the value is one of these\n      notContains: 'bar',       // don't allow specific substrings\n      len: [2,10],              // only allow values with length between 2 and 10\n      isUUID: 4,                // only allow uuids\n      isDate: true,             // only allow date strings\n      isAfter: \"2011-11-05\",    // only allow date strings after a specific date\n      isBefore: \"2011-11-05\",   // only allow date strings before a specific date\n      max: 23,                  // only allow values <= 23\n      min: 23,                  // only allow values >= 23\n      isCreditCard: true,       // check for valid credit card numbers\n\n      // custom validations are also possible:\n      isEven(value) {\n        if (parseInt(value) % 2 != 0) {\n          throw new Error('Only even values are allowed!')\n          // we also are in the model's context here, so this.otherField\n          // would get the value of otherField if it existed\n        }\n      }\n    }\n  }\n});\n```\n# 可以在表结构上附加Options\n``` javascript\n{\n  // 不需要updatedAt, createdAt时填false\n  timestamps: false,\n  // 在删除操作时，并不真正删除，而是设置deletedAt字段。必须和timestamps连用\n  paranoid: true,\n  // 新加入的字段，例如updatedAt，由驼峰式改为下划线式，updated_at\n  underscored: true,\n  // 禁止自动更改表名，用默认model名作为表名（即自动由单数转为复数）\n  freezeTableName: true,\n  // 设置表名\n  tableName: 'my_very_custom_table_name',\n  // 增加version字段，设为true或者想要的字段名\n  version: true\n  // 不要createdAt\n  createdAt: false,\n  // 把updatedAt改成updateTimestamp\n  updatedAt: 'updateTimestamp',\n  // 同理\n  deletedAt: 'destroyTime',\n  // engine，设置表引擎\n  engine: 'MYISAM'\n  // 设置表注释\n  comment: \"I'm a table comment!\",\n  // 索引选项，用来生成表时建立索引\n   indexes: [\n    // Create a unique index on email\n    {\n      unique: true,\n      fields: ['email']\n    },\n\n    // Creates a gin index on data with the jsonb_path_ops operator\n    {\n      fields: ['data'],\n      using: 'gin', //PostgreSQL\n      operator: 'jsonb_path_ops'\n    },\n\n    // By default index name will be [table]_[fields]\n    // Creates a multi column partial index\n    {\n      name: 'public_by_author',\n      fields: ['author', 'status'], //聚合索引，带有条件\n      where: {\n        status: 'public'\n      }\n    },\n\n    // A BTREE index with a ordered field\n    {\n      name: 'title_index',\n      method: 'BTREE', // 建立一个btree索引\n      fields: ['author', {attribute: 'title', collate: 'en_US', order: 'DESC', length: 5}]\n    }\n  ]\n\n})\n```","slug":"sequelizejs中model定义方法","published":1,"updated":"2018-02-28T08:24:23.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv2740026h0uroewhzfw3","content":"<p>以下是对sequelize.define方法的详解：</p>\n<h1 id=\"可以为define方法添加getter-setter\"><a href=\"#可以为define方法添加getter-setter\" class=\"headerlink\" title=\"可以为define方法添加getter,setter\"></a>可以为define方法添加getter,setter</h1><a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Employee = sequelize.define(<span class=\"string\">'employee'</span>, &#123;</span><br><span class=\"line\">  name: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 字段内的get方法</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> title = <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">'title'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">'name'</span>) + <span class=\"string\">' ('</span> + title + <span class=\"string\">')'</span>;</span><br><span class=\"line\">      <span class=\"comment\">// this.getDataValue是内建的help方法，用来取得字段的值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 字段内的set方法</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>(val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setDataValue(<span class=\"string\">'title'</span>, val.toUpperCase());</span><br><span class=\"line\">      <span class=\"comment\">// 同上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"如果要后台检验值时，可以使用model内的validations\"><a href=\"#如果要后台检验值时，可以使用model内的validations\" class=\"headerlink\" title=\"如果要后台检验值时，可以使用model内的validations\"></a>如果要后台检验值时，可以使用model内的validations</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// msg属性可以作为错误信息传递到前台</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ValidateMe = sequelize.define(<span class=\"string\">'foo'</span>, &#123;</span><br><span class=\"line\">  foo: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    validate: &#123;</span><br><span class=\"line\">      is: [<span class=\"string\">\"^[a-z]+$\"</span>,<span class=\"string\">'i'</span>],     <span class=\"comment\">// will only allow letters</span></span><br><span class=\"line\">      is: <span class=\"regexp\">/^[a-z]+$/i</span>,          <span class=\"comment\">// same as the previous example using real RegExp</span></span><br><span class=\"line\">      not: [<span class=\"string\">\"[a-z]\"</span>,<span class=\"string\">'i'</span>],       <span class=\"comment\">// will not allow letters</span></span><br><span class=\"line\">      isEmail: <span class=\"literal\">true</span>,            <span class=\"comment\">// checks for email format (foo@bar.com)</span></span><br><span class=\"line\">      isUrl: <span class=\"literal\">true</span>,              <span class=\"comment\">// checks for url format (http://foo.com)</span></span><br><span class=\"line\">      isIP: <span class=\"literal\">true</span>,               <span class=\"comment\">// checks for IPv4 (129.89.23.1) or IPv6 format</span></span><br><span class=\"line\">      isIPv4: <span class=\"literal\">true</span>,             <span class=\"comment\">// checks for IPv4 (129.89.23.1)</span></span><br><span class=\"line\">      isIPv6: <span class=\"literal\">true</span>,             <span class=\"comment\">// checks for IPv6 format</span></span><br><span class=\"line\">      isAlpha: <span class=\"literal\">true</span>,            <span class=\"comment\">// will only allow letters</span></span><br><span class=\"line\">      isAlphanumeric: <span class=\"literal\">true</span>,     <span class=\"comment\">// will only allow alphanumeric characters, so \"_abc\" will fail</span></span><br><span class=\"line\">      isNumeric: <span class=\"literal\">true</span>,          <span class=\"comment\">// will only allow numbers</span></span><br><span class=\"line\">      isInt: <span class=\"literal\">true</span>,              <span class=\"comment\">// checks for valid integers</span></span><br><span class=\"line\">      isFloat: <span class=\"literal\">true</span>,            <span class=\"comment\">// checks for valid floating point numbers</span></span><br><span class=\"line\">      isDecimal: <span class=\"literal\">true</span>,          <span class=\"comment\">// checks for any numbers</span></span><br><span class=\"line\">      isLowercase: <span class=\"literal\">true</span>,        <span class=\"comment\">// checks for lowercase</span></span><br><span class=\"line\">      isUppercase: <span class=\"literal\">true</span>,        <span class=\"comment\">// checks for uppercase</span></span><br><span class=\"line\">      notNull: <span class=\"literal\">true</span>,            <span class=\"comment\">// won't allow null</span></span><br><span class=\"line\">      isNull: <span class=\"literal\">true</span>,             <span class=\"comment\">// only allows null</span></span><br><span class=\"line\">      notEmpty: <span class=\"literal\">true</span>,           <span class=\"comment\">// don't allow empty strings</span></span><br><span class=\"line\">      equals: <span class=\"string\">'specific value'</span>, <span class=\"comment\">// only allow a specific value</span></span><br><span class=\"line\">      contains: <span class=\"string\">'foo'</span>,          <span class=\"comment\">// force specific substrings</span></span><br><span class=\"line\">      notIn: [[<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]],  <span class=\"comment\">// check the value is not one of these</span></span><br><span class=\"line\">      isIn: [[<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]],   <span class=\"comment\">// check the value is one of these</span></span><br><span class=\"line\">      notContains: <span class=\"string\">'bar'</span>,       <span class=\"comment\">// don't allow specific substrings</span></span><br><span class=\"line\">      len: [<span class=\"number\">2</span>,<span class=\"number\">10</span>],              <span class=\"comment\">// only allow values with length between 2 and 10</span></span><br><span class=\"line\">      isUUID: <span class=\"number\">4</span>,                <span class=\"comment\">// only allow uuids</span></span><br><span class=\"line\">      isDate: <span class=\"literal\">true</span>,             <span class=\"comment\">// only allow date strings</span></span><br><span class=\"line\">      isAfter: <span class=\"string\">\"2011-11-05\"</span>,    <span class=\"comment\">// only allow date strings after a specific date</span></span><br><span class=\"line\">      isBefore: <span class=\"string\">\"2011-11-05\"</span>,   <span class=\"comment\">// only allow date strings before a specific date</span></span><br><span class=\"line\">      max: <span class=\"number\">23</span>,                  <span class=\"comment\">// only allow values &lt;= 23</span></span><br><span class=\"line\">      min: <span class=\"number\">23</span>,                  <span class=\"comment\">// only allow values &gt;= 23</span></span><br><span class=\"line\">      isCreditCard: <span class=\"literal\">true</span>,       <span class=\"comment\">// check for valid credit card numbers</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// custom validations are also possible:</span></span><br><span class=\"line\">      isEven(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(value) % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Only even values are allowed!'</span>)</span><br><span class=\"line\">          <span class=\"comment\">// we also are in the model's context here, so this.otherField</span></span><br><span class=\"line\">          <span class=\"comment\">// would get the value of otherField if it existed</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"可以在表结构上附加Options\"><a href=\"#可以在表结构上附加Options\" class=\"headerlink\" title=\"可以在表结构上附加Options\"></a>可以在表结构上附加Options</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不需要updatedAt, createdAt时填false</span></span><br><span class=\"line\">  timestamps: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 在删除操作时，并不真正删除，而是设置deletedAt字段。必须和timestamps连用</span></span><br><span class=\"line\">  paranoid: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 新加入的字段，例如updatedAt，由驼峰式改为下划线式，updated_at</span></span><br><span class=\"line\">  underscored: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 禁止自动更改表名，用默认model名作为表名（即自动由单数转为复数）</span></span><br><span class=\"line\">  freezeTableName: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 设置表名</span></span><br><span class=\"line\">  tableName: <span class=\"string\">'my_very_custom_table_name'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 增加version字段，设为true或者想要的字段名</span></span><br><span class=\"line\">  version: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">// 不要createdAt</span></span><br><span class=\"line\">  createdAt: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 把updatedAt改成updateTimestamp</span></span><br><span class=\"line\">  updatedAt: <span class=\"string\">'updateTimestamp'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 同理</span></span><br><span class=\"line\">  deletedAt: <span class=\"string\">'destroyTime'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// engine，设置表引擎</span></span><br><span class=\"line\">  engine: <span class=\"string\">'MYISAM'</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置表注释</span></span><br><span class=\"line\">  comment: <span class=\"string\">\"I'm a table comment!\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 索引选项，用来生成表时建立索引</span></span><br><span class=\"line\">   indexes: [</span><br><span class=\"line\">    <span class=\"comment\">// Create a unique index on email</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      unique: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      fields: [<span class=\"string\">'email'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a gin index on data with the jsonb_path_ops operator</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      fields: [<span class=\"string\">'data'</span>],</span><br><span class=\"line\">      using: <span class=\"string\">'gin'</span>, <span class=\"comment\">//PostgreSQL</span></span><br><span class=\"line\">      operator: <span class=\"string\">'jsonb_path_ops'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// By default index name will be [table]_[fields]</span></span><br><span class=\"line\">    <span class=\"comment\">// Creates a multi column partial index</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'public_by_author'</span>,</span><br><span class=\"line\">      fields: [<span class=\"string\">'author'</span>, <span class=\"string\">'status'</span>], <span class=\"comment\">//聚合索引，带有条件</span></span><br><span class=\"line\">      where: &#123;</span><br><span class=\"line\">        status: <span class=\"string\">'public'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// A BTREE index with a ordered field</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'title_index'</span>,</span><br><span class=\"line\">      method: <span class=\"string\">'BTREE'</span>, <span class=\"comment\">// 建立一个btree索引</span></span><br><span class=\"line\">      fields: [<span class=\"string\">'author'</span>, &#123;<span class=\"attr\">attribute</span>: <span class=\"string\">'title'</span>, <span class=\"attr\">collate</span>: <span class=\"string\">'en_US'</span>, <span class=\"attr\">order</span>: <span class=\"string\">'DESC'</span>, <span class=\"attr\">length</span>: <span class=\"number\">5</span>&#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>以下是对sequelize.define方法的详解：</p>\n<h1 id=\"可以为define方法添加getter-setter\"><a href=\"#可以为define方法添加getter-setter\" class=\"headerlink\" title=\"可以为define方法添加getter,setter\"></a>可以为define方法添加getter,setter</h1>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Employee = sequelize.define(<span class=\"string\">'employee'</span>, &#123;</span><br><span class=\"line\">  name: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 字段内的get方法</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> title = <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">'title'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getDataValue(<span class=\"string\">'name'</span>) + <span class=\"string\">' ('</span> + title + <span class=\"string\">')'</span>;</span><br><span class=\"line\">      <span class=\"comment\">// this.getDataValue是内建的help方法，用来取得字段的值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 字段内的set方法</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>(val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setDataValue(<span class=\"string\">'title'</span>, val.toUpperCase());</span><br><span class=\"line\">      <span class=\"comment\">// 同上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"如果要后台检验值时，可以使用model内的validations\"><a href=\"#如果要后台检验值时，可以使用model内的validations\" class=\"headerlink\" title=\"如果要后台检验值时，可以使用model内的validations\"></a>如果要后台检验值时，可以使用model内的validations</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// msg属性可以作为错误信息传递到前台</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ValidateMe = sequelize.define(<span class=\"string\">'foo'</span>, &#123;</span><br><span class=\"line\">  foo: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    validate: &#123;</span><br><span class=\"line\">      is: [<span class=\"string\">\"^[a-z]+$\"</span>,<span class=\"string\">'i'</span>],     <span class=\"comment\">// will only allow letters</span></span><br><span class=\"line\">      is: <span class=\"regexp\">/^[a-z]+$/i</span>,          <span class=\"comment\">// same as the previous example using real RegExp</span></span><br><span class=\"line\">      not: [<span class=\"string\">\"[a-z]\"</span>,<span class=\"string\">'i'</span>],       <span class=\"comment\">// will not allow letters</span></span><br><span class=\"line\">      isEmail: <span class=\"literal\">true</span>,            <span class=\"comment\">// checks for email format (foo@bar.com)</span></span><br><span class=\"line\">      isUrl: <span class=\"literal\">true</span>,              <span class=\"comment\">// checks for url format (http://foo.com)</span></span><br><span class=\"line\">      isIP: <span class=\"literal\">true</span>,               <span class=\"comment\">// checks for IPv4 (129.89.23.1) or IPv6 format</span></span><br><span class=\"line\">      isIPv4: <span class=\"literal\">true</span>,             <span class=\"comment\">// checks for IPv4 (129.89.23.1)</span></span><br><span class=\"line\">      isIPv6: <span class=\"literal\">true</span>,             <span class=\"comment\">// checks for IPv6 format</span></span><br><span class=\"line\">      isAlpha: <span class=\"literal\">true</span>,            <span class=\"comment\">// will only allow letters</span></span><br><span class=\"line\">      isAlphanumeric: <span class=\"literal\">true</span>,     <span class=\"comment\">// will only allow alphanumeric characters, so \"_abc\" will fail</span></span><br><span class=\"line\">      isNumeric: <span class=\"literal\">true</span>,          <span class=\"comment\">// will only allow numbers</span></span><br><span class=\"line\">      isInt: <span class=\"literal\">true</span>,              <span class=\"comment\">// checks for valid integers</span></span><br><span class=\"line\">      isFloat: <span class=\"literal\">true</span>,            <span class=\"comment\">// checks for valid floating point numbers</span></span><br><span class=\"line\">      isDecimal: <span class=\"literal\">true</span>,          <span class=\"comment\">// checks for any numbers</span></span><br><span class=\"line\">      isLowercase: <span class=\"literal\">true</span>,        <span class=\"comment\">// checks for lowercase</span></span><br><span class=\"line\">      isUppercase: <span class=\"literal\">true</span>,        <span class=\"comment\">// checks for uppercase</span></span><br><span class=\"line\">      notNull: <span class=\"literal\">true</span>,            <span class=\"comment\">// won't allow null</span></span><br><span class=\"line\">      isNull: <span class=\"literal\">true</span>,             <span class=\"comment\">// only allows null</span></span><br><span class=\"line\">      notEmpty: <span class=\"literal\">true</span>,           <span class=\"comment\">// don't allow empty strings</span></span><br><span class=\"line\">      equals: <span class=\"string\">'specific value'</span>, <span class=\"comment\">// only allow a specific value</span></span><br><span class=\"line\">      contains: <span class=\"string\">'foo'</span>,          <span class=\"comment\">// force specific substrings</span></span><br><span class=\"line\">      notIn: [[<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]],  <span class=\"comment\">// check the value is not one of these</span></span><br><span class=\"line\">      isIn: [[<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>]],   <span class=\"comment\">// check the value is one of these</span></span><br><span class=\"line\">      notContains: <span class=\"string\">'bar'</span>,       <span class=\"comment\">// don't allow specific substrings</span></span><br><span class=\"line\">      len: [<span class=\"number\">2</span>,<span class=\"number\">10</span>],              <span class=\"comment\">// only allow values with length between 2 and 10</span></span><br><span class=\"line\">      isUUID: <span class=\"number\">4</span>,                <span class=\"comment\">// only allow uuids</span></span><br><span class=\"line\">      isDate: <span class=\"literal\">true</span>,             <span class=\"comment\">// only allow date strings</span></span><br><span class=\"line\">      isAfter: <span class=\"string\">\"2011-11-05\"</span>,    <span class=\"comment\">// only allow date strings after a specific date</span></span><br><span class=\"line\">      isBefore: <span class=\"string\">\"2011-11-05\"</span>,   <span class=\"comment\">// only allow date strings before a specific date</span></span><br><span class=\"line\">      max: <span class=\"number\">23</span>,                  <span class=\"comment\">// only allow values &lt;= 23</span></span><br><span class=\"line\">      min: <span class=\"number\">23</span>,                  <span class=\"comment\">// only allow values &gt;= 23</span></span><br><span class=\"line\">      isCreditCard: <span class=\"literal\">true</span>,       <span class=\"comment\">// check for valid credit card numbers</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// custom validations are also possible:</span></span><br><span class=\"line\">      isEven(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(value) % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Only even values are allowed!'</span>)</span><br><span class=\"line\">          <span class=\"comment\">// we also are in the model's context here, so this.otherField</span></span><br><span class=\"line\">          <span class=\"comment\">// would get the value of otherField if it existed</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"可以在表结构上附加Options\"><a href=\"#可以在表结构上附加Options\" class=\"headerlink\" title=\"可以在表结构上附加Options\"></a>可以在表结构上附加Options</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不需要updatedAt, createdAt时填false</span></span><br><span class=\"line\">  timestamps: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 在删除操作时，并不真正删除，而是设置deletedAt字段。必须和timestamps连用</span></span><br><span class=\"line\">  paranoid: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 新加入的字段，例如updatedAt，由驼峰式改为下划线式，updated_at</span></span><br><span class=\"line\">  underscored: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 禁止自动更改表名，用默认model名作为表名（即自动由单数转为复数）</span></span><br><span class=\"line\">  freezeTableName: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 设置表名</span></span><br><span class=\"line\">  tableName: <span class=\"string\">'my_very_custom_table_name'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 增加version字段，设为true或者想要的字段名</span></span><br><span class=\"line\">  version: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">// 不要createdAt</span></span><br><span class=\"line\">  createdAt: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 把updatedAt改成updateTimestamp</span></span><br><span class=\"line\">  updatedAt: <span class=\"string\">'updateTimestamp'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 同理</span></span><br><span class=\"line\">  deletedAt: <span class=\"string\">'destroyTime'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// engine，设置表引擎</span></span><br><span class=\"line\">  engine: <span class=\"string\">'MYISAM'</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置表注释</span></span><br><span class=\"line\">  comment: <span class=\"string\">\"I'm a table comment!\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 索引选项，用来生成表时建立索引</span></span><br><span class=\"line\">   indexes: [</span><br><span class=\"line\">    <span class=\"comment\">// Create a unique index on email</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      unique: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      fields: [<span class=\"string\">'email'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a gin index on data with the jsonb_path_ops operator</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      fields: [<span class=\"string\">'data'</span>],</span><br><span class=\"line\">      using: <span class=\"string\">'gin'</span>, <span class=\"comment\">//PostgreSQL</span></span><br><span class=\"line\">      operator: <span class=\"string\">'jsonb_path_ops'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// By default index name will be [table]_[fields]</span></span><br><span class=\"line\">    <span class=\"comment\">// Creates a multi column partial index</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'public_by_author'</span>,</span><br><span class=\"line\">      fields: [<span class=\"string\">'author'</span>, <span class=\"string\">'status'</span>], <span class=\"comment\">//聚合索引，带有条件</span></span><br><span class=\"line\">      where: &#123;</span><br><span class=\"line\">        status: <span class=\"string\">'public'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// A BTREE index with a ordered field</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'title_index'</span>,</span><br><span class=\"line\">      method: <span class=\"string\">'BTREE'</span>, <span class=\"comment\">// 建立一个btree索引</span></span><br><span class=\"line\">      fields: [<span class=\"string\">'author'</span>, &#123;<span class=\"attr\">attribute</span>: <span class=\"string\">'title'</span>, <span class=\"attr\">collate</span>: <span class=\"string\">'en_US'</span>, <span class=\"attr\">order</span>: <span class=\"string\">'DESC'</span>, <span class=\"attr\">length</span>: <span class=\"number\">5</span>&#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"sequelizejs中关系数据的表示","date":"2017-01-21T16:00:00.000Z","_content":"# 外键的四种写法\n- user将会添加一个companyId属性，参照Company的主键id\n``` javascript\nconst User = this.sequelize.define('user', {/* attributes */})\nconst Company  = this.sequelize.define('company', {/* attributes */});\n\nUser.belongsTo(Company);\n```\n<!-- more -->\n- 添加company_uuid到user作为user的外键\n``` javascript\nconst User = this.sequelize.define('user', {/* attributes */}, {underscored: true})\nconst Company  = this.sequelize.define('company', {\n  uuid: {\n    type: Sequelize.UUID,\n    primaryKey: true\n  }\n});\n\nUser.belongsTo(Company);\n```\n- 添加roleId to user而不是userRoleId\n``` javascript\nconst User = this.sequelize.define('user', {/* attributes */})\nconst UserRole  = this.sequelize.define('userRole', {/* attributes */});\n\nUser.belongsTo(UserRole, {as: 'role'});\n```\n- 直接指定外键名\n``` javascript\nconst User = this.sequelize.define('user', {/* attributes */})\nconst Company  = this.sequelize.define('company', {/* attributes */});\n// 对source添加\nUser.belongsTo(Company, {foreignKey: 'fk_company'}); // Adds fk_company to User\n```\n# one-to-one关系\n``` javascript\nconst User = sequelize.define('user', {/* ... */})\nconst Project = sequelize.define('project', {/* ... */})\n\n// One-way associations\nProject.hasOne(User) // 会对User添加projectId属性，作为User的外键，它将关联Project的主键\n```\n# many-to-one关系\n``` javascript\nconst User = sequelize.define('user', {/* ... */})\nconst Project = sequelize.define('project', {/* ... */})\n\n// First let's define a hasMany association\nProject.hasMany(User, {as: 'Workers'}) // 添加projectId到User,并且为Project的实例会添加getWorkers和SetWorkers两个方法\n```\n# one-to-many关系 ON UPDATE CASCADE ON DELETE CASCADE\n``` javascript\nProject.belongsToMany(User, {through: 'UserProject'}); // through内写model define的名字，而不是变量名，例如Userdefine时写成user，就写user\nUser.belongsToMany(Project, {through: 'UserProject'}); // userproject,它将关联外键projectid和userId。并且project会添加hasUser,setUser,setUsers,getUser,getUsers方法，User也会得到对应的set,get方法\n```\n也可以直接在model定义时定义外键","source":"_posts/sequelizejs中关系数据的表示.md","raw":"---\ntitle: sequelizejs中关系数据的表示\ndate: 2017-1-22\ncategories:\n- 后端\n- sequelizejs\ntags:\n- 后端\n- javascript\n- sequelizejs\n---\n# 外键的四种写法\n- user将会添加一个companyId属性，参照Company的主键id\n``` javascript\nconst User = this.sequelize.define('user', {/* attributes */})\nconst Company  = this.sequelize.define('company', {/* attributes */});\n\nUser.belongsTo(Company);\n```\n<!-- more -->\n- 添加company_uuid到user作为user的外键\n``` javascript\nconst User = this.sequelize.define('user', {/* attributes */}, {underscored: true})\nconst Company  = this.sequelize.define('company', {\n  uuid: {\n    type: Sequelize.UUID,\n    primaryKey: true\n  }\n});\n\nUser.belongsTo(Company);\n```\n- 添加roleId to user而不是userRoleId\n``` javascript\nconst User = this.sequelize.define('user', {/* attributes */})\nconst UserRole  = this.sequelize.define('userRole', {/* attributes */});\n\nUser.belongsTo(UserRole, {as: 'role'});\n```\n- 直接指定外键名\n``` javascript\nconst User = this.sequelize.define('user', {/* attributes */})\nconst Company  = this.sequelize.define('company', {/* attributes */});\n// 对source添加\nUser.belongsTo(Company, {foreignKey: 'fk_company'}); // Adds fk_company to User\n```\n# one-to-one关系\n``` javascript\nconst User = sequelize.define('user', {/* ... */})\nconst Project = sequelize.define('project', {/* ... */})\n\n// One-way associations\nProject.hasOne(User) // 会对User添加projectId属性，作为User的外键，它将关联Project的主键\n```\n# many-to-one关系\n``` javascript\nconst User = sequelize.define('user', {/* ... */})\nconst Project = sequelize.define('project', {/* ... */})\n\n// First let's define a hasMany association\nProject.hasMany(User, {as: 'Workers'}) // 添加projectId到User,并且为Project的实例会添加getWorkers和SetWorkers两个方法\n```\n# one-to-many关系 ON UPDATE CASCADE ON DELETE CASCADE\n``` javascript\nProject.belongsToMany(User, {through: 'UserProject'}); // through内写model define的名字，而不是变量名，例如Userdefine时写成user，就写user\nUser.belongsToMany(Project, {through: 'UserProject'}); // userproject,它将关联外键projectid和userId。并且project会添加hasUser,setUser,setUsers,getUser,getUsers方法，User也会得到对应的set,get方法\n```\n也可以直接在model定义时定义外键","slug":"sequelizejs中关系数据的表示","published":1,"updated":"2018-02-28T08:46:41.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv27a002bh0urya8w3fxn","content":"<h1 id=\"外键的四种写法\"><a href=\"#外键的四种写法\" class=\"headerlink\" title=\"外键的四种写法\"></a>外键的四种写法</h1><ul>\n<li>user将会添加一个companyId属性，参照Company的主键id<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Company  = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'company'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.belongsTo(Company);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>添加company_uuid到user作为user的外键</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;, &#123;<span class=\"attr\">underscored</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Company  = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'company'</span>, &#123;</span><br><span class=\"line\">  uuid: &#123;</span><br><span class=\"line\">    type: Sequelize.UUID,</span><br><span class=\"line\">    primaryKey: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.belongsTo(Company);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加roleId to user而不是userRoleId</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> UserRole  = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'userRole'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.belongsTo(UserRole, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'role'</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接指定外键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Company  = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'company'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 对source添加</span></span><br><span class=\"line\">User.belongsTo(Company, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'fk_company'</span>&#125;); <span class=\"comment\">// Adds fk_company to User</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"one-to-one关系\"><a href=\"#one-to-one关系\" class=\"headerlink\" title=\"one-to-one关系\"></a>one-to-one关系</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* ... */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Project = sequelize.define(<span class=\"string\">'project'</span>, &#123;<span class=\"comment\">/* ... */</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// One-way associations</span></span><br><span class=\"line\">Project.hasOne(User) <span class=\"comment\">// 会对User添加projectId属性，作为User的外键，它将关联Project的主键</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"many-to-one关系\"><a href=\"#many-to-one关系\" class=\"headerlink\" title=\"many-to-one关系\"></a>many-to-one关系</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* ... */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Project = sequelize.define(<span class=\"string\">'project'</span>, &#123;<span class=\"comment\">/* ... */</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// First let's define a hasMany association</span></span><br><span class=\"line\">Project.hasMany(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'Workers'</span>&#125;) <span class=\"comment\">// 添加projectId到User,并且为Project的实例会添加getWorkers和SetWorkers两个方法</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"one-to-many关系-ON-UPDATE-CASCADE-ON-DELETE-CASCADE\"><a href=\"#one-to-many关系-ON-UPDATE-CASCADE-ON-DELETE-CASCADE\" class=\"headerlink\" title=\"one-to-many关系 ON UPDATE CASCADE ON DELETE CASCADE\"></a>one-to-many关系 ON UPDATE CASCADE ON DELETE CASCADE</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project.belongsToMany(User, &#123;<span class=\"attr\">through</span>: <span class=\"string\">'UserProject'</span>&#125;); <span class=\"comment\">// through内写model define的名字，而不是变量名，例如Userdefine时写成user，就写user</span></span><br><span class=\"line\">User.belongsToMany(Project, &#123;<span class=\"attr\">through</span>: <span class=\"string\">'UserProject'</span>&#125;); <span class=\"comment\">// userproject,它将关联外键projectid和userId。并且project会添加hasUser,setUser,setUsers,getUser,getUsers方法，User也会得到对应的set,get方法</span></span><br></pre></td></tr></table></figure>\n<p>也可以直接在model定义时定义外键</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"外键的四种写法\"><a href=\"#外键的四种写法\" class=\"headerlink\" title=\"外键的四种写法\"></a>外键的四种写法</h1><ul>\n<li>user将会添加一个companyId属性，参照Company的主键id<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Company  = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'company'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.belongsTo(Company);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>添加company_uuid到user作为user的外键</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;, &#123;<span class=\"attr\">underscored</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Company  = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'company'</span>, &#123;</span><br><span class=\"line\">  uuid: &#123;</span><br><span class=\"line\">    type: Sequelize.UUID,</span><br><span class=\"line\">    primaryKey: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.belongsTo(Company);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加roleId to user而不是userRoleId</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> UserRole  = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'userRole'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.belongsTo(UserRole, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'role'</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接指定外键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Company  = <span class=\"keyword\">this</span>.sequelize.define(<span class=\"string\">'company'</span>, &#123;<span class=\"comment\">/* attributes */</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 对source添加</span></span><br><span class=\"line\">User.belongsTo(Company, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'fk_company'</span>&#125;); <span class=\"comment\">// Adds fk_company to User</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"one-to-one关系\"><a href=\"#one-to-one关系\" class=\"headerlink\" title=\"one-to-one关系\"></a>one-to-one关系</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* ... */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Project = sequelize.define(<span class=\"string\">'project'</span>, &#123;<span class=\"comment\">/* ... */</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// One-way associations</span></span><br><span class=\"line\">Project.hasOne(User) <span class=\"comment\">// 会对User添加projectId属性，作为User的外键，它将关联Project的主键</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"many-to-one关系\"><a href=\"#many-to-one关系\" class=\"headerlink\" title=\"many-to-one关系\"></a>many-to-one关系</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">'user'</span>, &#123;<span class=\"comment\">/* ... */</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Project = sequelize.define(<span class=\"string\">'project'</span>, &#123;<span class=\"comment\">/* ... */</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// First let's define a hasMany association</span></span><br><span class=\"line\">Project.hasMany(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'Workers'</span>&#125;) <span class=\"comment\">// 添加projectId到User,并且为Project的实例会添加getWorkers和SetWorkers两个方法</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"one-to-many关系-ON-UPDATE-CASCADE-ON-DELETE-CASCADE\"><a href=\"#one-to-many关系-ON-UPDATE-CASCADE-ON-DELETE-CASCADE\" class=\"headerlink\" title=\"one-to-many关系 ON UPDATE CASCADE ON DELETE CASCADE\"></a>one-to-many关系 ON UPDATE CASCADE ON DELETE CASCADE</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project.belongsToMany(User, &#123;<span class=\"attr\">through</span>: <span class=\"string\">'UserProject'</span>&#125;); <span class=\"comment\">// through内写model define的名字，而不是变量名，例如Userdefine时写成user，就写user</span></span><br><span class=\"line\">User.belongsToMany(Project, &#123;<span class=\"attr\">through</span>: <span class=\"string\">'UserProject'</span>&#125;); <span class=\"comment\">// userproject,它将关联外键projectid和userId。并且project会添加hasUser,setUser,setUsers,getUser,getUsers方法，User也会得到对应的set,get方法</span></span><br></pre></td></tr></table></figure>\n<p>也可以直接在model定义时定义外键</p>"},{"title":"sequelizejs中数据持久化的方法","date":"2017-01-20T16:00:00.000Z","_content":"# sync\n只能用来建表\n# save\n``` javascript\nTask\n  .build({ title: 'foo', description: 'bar', deadline: new Date() })\n  .save()\n  .then(anotherTask => {\n    // you can now access the currently saved task with the variable anotherTask... nice!\n  })\n  .catch(error => {\n    // Ooops, do some error-handling\n  })\n```\n<!-- more -->\n# create 相当于结合了build和save\n``` javascript\nTask.create({ title: 'foo', description: 'bar', deadline: new Date() }).then(task => {\n  // you can now access the newly created task via the variable task\n})\n```\n# 多条create\n``` javascript\nUser.bulkCreate([\n  { username: 'barfooz', isAdmin: true },\n  { username: 'foo', isAdmin: true },\n  { username: 'bar', isAdmin: false }\n]).then(() => { // Notice: There are no arguments here, as of right now you'll have to...\n  return User.findAll();\n}).then(users => {\n  console.log(users) // ... in order to get the array of user objects\n})\n```\n# update的三种形式\n``` javascript\ntask.save({fields: ['title']}).then(() => {\n // title will now be 'foooo' but description is the very same as before\n})\n\n// The equivalent call using update looks like this:\ntask.update({ title: 'foooo', description: 'baaaaaar'}, {fields: ['title']}).then(() => {\n // title will now be 'foooo' but description is the very same as before\n})\n// 先查出来，然后reload\nPerson.findOne({ where: { name: 'john' } }).then(person => {\n  person.name = 'jane'\n  console.log(person.name) // 'jane'\n\n  person.reload().then(() => {\n    console.log(person.name) // 'john'\n  })\n})\n```\n\n# delete\n``` javascript\ntask.destroy({force: true})\n```","source":"_posts/sequelizejs中数据持久化的方法.md","raw":"---\ntitle: sequelizejs中数据持久化的方法\ndate: 2017-1-21\ncategories:\n- 后端\n- sequelizejs\ntags:\n- 后端\n- javascript\n- sequelizejs\n---\n# sync\n只能用来建表\n# save\n``` javascript\nTask\n  .build({ title: 'foo', description: 'bar', deadline: new Date() })\n  .save()\n  .then(anotherTask => {\n    // you can now access the currently saved task with the variable anotherTask... nice!\n  })\n  .catch(error => {\n    // Ooops, do some error-handling\n  })\n```\n<!-- more -->\n# create 相当于结合了build和save\n``` javascript\nTask.create({ title: 'foo', description: 'bar', deadline: new Date() }).then(task => {\n  // you can now access the newly created task via the variable task\n})\n```\n# 多条create\n``` javascript\nUser.bulkCreate([\n  { username: 'barfooz', isAdmin: true },\n  { username: 'foo', isAdmin: true },\n  { username: 'bar', isAdmin: false }\n]).then(() => { // Notice: There are no arguments here, as of right now you'll have to...\n  return User.findAll();\n}).then(users => {\n  console.log(users) // ... in order to get the array of user objects\n})\n```\n# update的三种形式\n``` javascript\ntask.save({fields: ['title']}).then(() => {\n // title will now be 'foooo' but description is the very same as before\n})\n\n// The equivalent call using update looks like this:\ntask.update({ title: 'foooo', description: 'baaaaaar'}, {fields: ['title']}).then(() => {\n // title will now be 'foooo' but description is the very same as before\n})\n// 先查出来，然后reload\nPerson.findOne({ where: { name: 'john' } }).then(person => {\n  person.name = 'jane'\n  console.log(person.name) // 'jane'\n\n  person.reload().then(() => {\n    console.log(person.name) // 'john'\n  })\n})\n```\n\n# delete\n``` javascript\ntask.destroy({force: true})\n```","slug":"sequelizejs中数据持久化的方法","published":1,"updated":"2018-02-28T08:24:15.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv27b002dh0ur4d8x9cqm","content":"<h1 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h1><p>只能用来建表</p>\n<h1 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save\"></a>save</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task</span><br><span class=\"line\">  .build(&#123; <span class=\"attr\">title</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">description</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">deadline</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;)</span><br><span class=\"line\">  .save()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">anotherTask</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// you can now access the currently saved task with the variable anotherTask... nice!</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Ooops, do some error-handling</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"create-相当于结合了build和save\"><a href=\"#create-相当于结合了build和save\" class=\"headerlink\" title=\"create 相当于结合了build和save\"></a>create 相当于结合了build和save</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task.create(&#123; <span class=\"attr\">title</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">description</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">deadline</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;).then(<span class=\"function\"><span class=\"params\">task</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// you can now access the newly created task via the variable task</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"多条create\"><a href=\"#多条create\" class=\"headerlink\" title=\"多条create\"></a>多条create</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.bulkCreate([</span><br><span class=\"line\">  &#123; <span class=\"attr\">username</span>: <span class=\"string\">'barfooz'</span>, <span class=\"attr\">isAdmin</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">username</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">isAdmin</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">username</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">isAdmin</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// Notice: There are no arguments here, as of right now you'll have to...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> User.findAll();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">users</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(users) <span class=\"comment\">// ... in order to get the array of user objects</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"update的三种形式\"><a href=\"#update的三种形式\" class=\"headerlink\" title=\"update的三种形式\"></a>update的三种形式</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.save(&#123;<span class=\"attr\">fields</span>: [<span class=\"string\">'title'</span>]&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// title will now be 'foooo' but description is the very same as before</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The equivalent call using update looks like this:</span></span><br><span class=\"line\">task.update(&#123; <span class=\"attr\">title</span>: <span class=\"string\">'foooo'</span>, <span class=\"attr\">description</span>: <span class=\"string\">'baaaaaar'</span>&#125;, &#123;<span class=\"attr\">fields</span>: [<span class=\"string\">'title'</span>]&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// title will now be 'foooo' but description is the very same as before</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 先查出来，然后reload</span></span><br><span class=\"line\">Person.findOne(&#123; <span class=\"attr\">where</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'john'</span> &#125; &#125;).then(<span class=\"function\"><span class=\"params\">person</span> =&gt;</span> &#123;</span><br><span class=\"line\">  person.name = <span class=\"string\">'jane'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(person.name) <span class=\"comment\">// 'jane'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  person.reload().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person.name) <span class=\"comment\">// 'john'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.destroy(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h1><p>只能用来建表</p>\n<h1 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save\"></a>save</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task</span><br><span class=\"line\">  .build(&#123; <span class=\"attr\">title</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">description</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">deadline</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;)</span><br><span class=\"line\">  .save()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">anotherTask</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// you can now access the currently saved task with the variable anotherTask... nice!</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Ooops, do some error-handling</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"create-相当于结合了build和save\"><a href=\"#create-相当于结合了build和save\" class=\"headerlink\" title=\"create 相当于结合了build和save\"></a>create 相当于结合了build和save</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task.create(&#123; <span class=\"attr\">title</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">description</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">deadline</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;).then(<span class=\"function\"><span class=\"params\">task</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// you can now access the newly created task via the variable task</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"多条create\"><a href=\"#多条create\" class=\"headerlink\" title=\"多条create\"></a>多条create</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.bulkCreate([</span><br><span class=\"line\">  &#123; <span class=\"attr\">username</span>: <span class=\"string\">'barfooz'</span>, <span class=\"attr\">isAdmin</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">username</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">isAdmin</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">username</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">isAdmin</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// Notice: There are no arguments here, as of right now you'll have to...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> User.findAll();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">users</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(users) <span class=\"comment\">// ... in order to get the array of user objects</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"update的三种形式\"><a href=\"#update的三种形式\" class=\"headerlink\" title=\"update的三种形式\"></a>update的三种形式</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.save(&#123;<span class=\"attr\">fields</span>: [<span class=\"string\">'title'</span>]&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// title will now be 'foooo' but description is the very same as before</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The equivalent call using update looks like this:</span></span><br><span class=\"line\">task.update(&#123; <span class=\"attr\">title</span>: <span class=\"string\">'foooo'</span>, <span class=\"attr\">description</span>: <span class=\"string\">'baaaaaar'</span>&#125;, &#123;<span class=\"attr\">fields</span>: [<span class=\"string\">'title'</span>]&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// title will now be 'foooo' but description is the very same as before</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 先查出来，然后reload</span></span><br><span class=\"line\">Person.findOne(&#123; <span class=\"attr\">where</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'john'</span> &#125; &#125;).then(<span class=\"function\"><span class=\"params\">person</span> =&gt;</span> &#123;</span><br><span class=\"line\">  person.name = <span class=\"string\">'jane'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(person.name) <span class=\"comment\">// 'jane'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  person.reload().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person.name) <span class=\"comment\">// 'john'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.destroy(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"sequelizejs中数据查询的方法","date":"2017-01-21T16:00:00.000Z","_content":"# Raw query\n- 最简单的查询\n``` javascript\nsequelize.query(\"SELECT * FROM myTable\").then(myTableRows => {\n  console.log(myTableRows)\n})\n```\n\n<!-- more -->\n- Map to model\n``` javascript\nsequelize\n  .query('SELECT * FROM projects', { model: Projects })\n  .then(projects => {\n    // Each record will now be mapped to the project's model.\n    console.log(projects)\n  })\n```\n\n- Options\n``` javascript\nsequelize\n  .query('SELECT 1', {\n    // 可以设为false或者console\n    logging: console.log,\n\n    // 是否只返回结果集中的第一行\n    plain: false,\n    // 如果没有model可以映射，设为false\n    raw: false,\n\n    // 设置了queryType后，可以改变返回结果的形式\n    type: Sequelize.QueryTypes.SELECT\n  })\n```\n\n- 参数查询\n``` javascript\n  sequelize\n  .query(\n    'SELECT * FROM projects WHERE status = ?',\n    { raw: true, replacements: ['active']\n  )\n  .then(projects => {\n    console.log(projects)\n  })\n```\n\n# Model Query\n- findById\n``` javascript\nProject.findById(123).then(project => {\n  // project will be an instance of Project and stores the content of the table entry\n  // with id 123. if such an entry is not defined you will get null\n})\n```\n- findByAttribute\n``` javascript\n// search for attributes\nProject.findOne({ where: {title: 'aProject'} }).then(project => {\n  // project will be the first entry of the Projects table with the title 'aProject' || null\n})\n```\n- findOrCreate 相当于mongodb的upsert\n``` javascript\nUser\n  .findOrCreate({where: {username: 'sdepold'}, defaults: {job: 'Technical Lead JavaScript'}})\n  .spread((user, created) => { // 返回object和boolean\n    console.log(user.get({\n      plain: true\n    }))\n    console.log(created)\n```\n- findAndCountAll\n对结果集进行偏移或约束\n``` javascript\nProject\n  .findAndCountAll({\n     where: {\n        title: {\n          [Op.like]: 'foo%'\n        }\n     },\n     offset: 10,\n     limit: 2\n  })\n```\n- findAll\n约束：\n``` javascript\nUser.findAll({ offset: 10, limit: 2 , order: 'title DESC', group: 'name');\n```\n- 操作符,这些操作符也可以进一步组合\n``` javascript\n[Op.and]: {a: 5},           // AND (a = 5)\n[Op.or]: [{a: 5}, {a: 6}],  // (a = 5 OR a = 6)\n[Op.gt]: 6,                // id > 6\n[Op.gte]: 6,               // id >= 6\n[Op.lt]: 10,               // id < 10\n[Op.lte]: 10,              // id <= 10\n[Op.ne]: 20,               // id != 20\n[Op.between]: [6, 10],     // BETWEEN 6 AND 10\n[Op.notBetween]: [11, 15], // NOT BETWEEN 11 AND 15\n[Op.in]: [1, 2],           // IN [1, 2]\n[Op.notIn]: [1, 2],        // NOT IN [1, 2]\n[Op.like]: '%hat',         // LIKE '%hat'\n[Op.notLike]: '%hat',       // NOT LIKE '%hat'\n[Op.iLike]: '%hat',         // ILIKE '%hat' (case insensitive)  (PG only)\n[Op.notILike]: '%hat',      // NOT ILIKE '%hat'  (PG only)\n[Op.overlap]: [1, 2],       // && [1, 2] (PG array overlap operator)\n[Op.contains]: [1, 2],      // @> [1, 2] (PG array contains operator)\n[Op.contained]: [1, 2],     // <@ [1, 2] (PG array contained by operator)\n[Op.any]: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)\n```\n","source":"_posts/sequelizejs中数据查询的方法.md","raw":"---\ntitle: sequelizejs中数据查询的方法\ndate: 2017-1-22\ncategories:\n- 后端\n- sequelizejs\ntags:\n- 后端\n- javascript\n- sequelizejs\n---\n# Raw query\n- 最简单的查询\n``` javascript\nsequelize.query(\"SELECT * FROM myTable\").then(myTableRows => {\n  console.log(myTableRows)\n})\n```\n\n<!-- more -->\n- Map to model\n``` javascript\nsequelize\n  .query('SELECT * FROM projects', { model: Projects })\n  .then(projects => {\n    // Each record will now be mapped to the project's model.\n    console.log(projects)\n  })\n```\n\n- Options\n``` javascript\nsequelize\n  .query('SELECT 1', {\n    // 可以设为false或者console\n    logging: console.log,\n\n    // 是否只返回结果集中的第一行\n    plain: false,\n    // 如果没有model可以映射，设为false\n    raw: false,\n\n    // 设置了queryType后，可以改变返回结果的形式\n    type: Sequelize.QueryTypes.SELECT\n  })\n```\n\n- 参数查询\n``` javascript\n  sequelize\n  .query(\n    'SELECT * FROM projects WHERE status = ?',\n    { raw: true, replacements: ['active']\n  )\n  .then(projects => {\n    console.log(projects)\n  })\n```\n\n# Model Query\n- findById\n``` javascript\nProject.findById(123).then(project => {\n  // project will be an instance of Project and stores the content of the table entry\n  // with id 123. if such an entry is not defined you will get null\n})\n```\n- findByAttribute\n``` javascript\n// search for attributes\nProject.findOne({ where: {title: 'aProject'} }).then(project => {\n  // project will be the first entry of the Projects table with the title 'aProject' || null\n})\n```\n- findOrCreate 相当于mongodb的upsert\n``` javascript\nUser\n  .findOrCreate({where: {username: 'sdepold'}, defaults: {job: 'Technical Lead JavaScript'}})\n  .spread((user, created) => { // 返回object和boolean\n    console.log(user.get({\n      plain: true\n    }))\n    console.log(created)\n```\n- findAndCountAll\n对结果集进行偏移或约束\n``` javascript\nProject\n  .findAndCountAll({\n     where: {\n        title: {\n          [Op.like]: 'foo%'\n        }\n     },\n     offset: 10,\n     limit: 2\n  })\n```\n- findAll\n约束：\n``` javascript\nUser.findAll({ offset: 10, limit: 2 , order: 'title DESC', group: 'name');\n```\n- 操作符,这些操作符也可以进一步组合\n``` javascript\n[Op.and]: {a: 5},           // AND (a = 5)\n[Op.or]: [{a: 5}, {a: 6}],  // (a = 5 OR a = 6)\n[Op.gt]: 6,                // id > 6\n[Op.gte]: 6,               // id >= 6\n[Op.lt]: 10,               // id < 10\n[Op.lte]: 10,              // id <= 10\n[Op.ne]: 20,               // id != 20\n[Op.between]: [6, 10],     // BETWEEN 6 AND 10\n[Op.notBetween]: [11, 15], // NOT BETWEEN 11 AND 15\n[Op.in]: [1, 2],           // IN [1, 2]\n[Op.notIn]: [1, 2],        // NOT IN [1, 2]\n[Op.like]: '%hat',         // LIKE '%hat'\n[Op.notLike]: '%hat',       // NOT LIKE '%hat'\n[Op.iLike]: '%hat',         // ILIKE '%hat' (case insensitive)  (PG only)\n[Op.notILike]: '%hat',      // NOT ILIKE '%hat'  (PG only)\n[Op.overlap]: [1, 2],       // && [1, 2] (PG array overlap operator)\n[Op.contains]: [1, 2],      // @> [1, 2] (PG array contains operator)\n[Op.contained]: [1, 2],     // <@ [1, 2] (PG array contained by operator)\n[Op.any]: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)\n```\n","slug":"sequelizejs中数据查询的方法","published":1,"updated":"2018-02-28T08:45:52.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv27e002hh0ur4qaejnuo","content":"<h1 id=\"Raw-query\"><a href=\"#Raw-query\" class=\"headerlink\" title=\"Raw query\"></a>Raw query</h1><ul>\n<li>最简单的查询<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize.query(<span class=\"string\">\"SELECT * FROM myTable\"</span>).then(<span class=\"function\"><span class=\"params\">myTableRows</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(myTableRows)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>Map to model</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize</span><br><span class=\"line\">  .query(<span class=\"string\">'SELECT * FROM projects'</span>, &#123; <span class=\"attr\">model</span>: Projects &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">projects</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Each record will now be mapped to the project's model.</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(projects)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Options</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize</span><br><span class=\"line\">  .query(<span class=\"string\">'SELECT 1'</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以设为false或者console</span></span><br><span class=\"line\">    logging: <span class=\"built_in\">console</span>.log,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是否只返回结果集中的第一行</span></span><br><span class=\"line\">    plain: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有model可以映射，设为false</span></span><br><span class=\"line\">    raw: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置了queryType后，可以改变返回结果的形式</span></span><br><span class=\"line\">    type: Sequelize.QueryTypes.SELECT</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数查询</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize</span><br><span class=\"line\">.query(</span><br><span class=\"line\">  <span class=\"string\">'SELECT * FROM projects WHERE status = ?'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">raw</span>: <span class=\"literal\">true</span>, <span class=\"attr\">replacements</span>: [<span class=\"string\">'active'</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">projects</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(projects)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Model-Query\"><a href=\"#Model-Query\" class=\"headerlink\" title=\"Model Query\"></a>Model Query</h1><ul>\n<li><p>findById</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project.findById(<span class=\"number\">123</span>).then(<span class=\"function\"><span class=\"params\">project</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// project will be an instance of Project and stores the content of the table entry</span></span><br><span class=\"line\">  <span class=\"comment\">// with id 123. if such an entry is not defined you will get null</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>findByAttribute</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// search for attributes</span></span><br><span class=\"line\">Project.findOne(&#123; <span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: <span class=\"string\">'aProject'</span>&#125; &#125;).then(<span class=\"function\"><span class=\"params\">project</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// project will be the first entry of the Projects table with the title 'aProject' || null</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>findOrCreate 相当于mongodb的upsert</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User</span><br><span class=\"line\">  .findOrCreate(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">username</span>: <span class=\"string\">'sdepold'</span>&#125;, <span class=\"attr\">defaults</span>: &#123;<span class=\"attr\">job</span>: <span class=\"string\">'Technical Lead JavaScript'</span>&#125;&#125;)</span><br><span class=\"line\">  .spread(<span class=\"function\">(<span class=\"params\">user, created</span>) =&gt;</span> &#123; <span class=\"comment\">// 返回object和boolean</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(user.get(&#123;</span><br><span class=\"line\">      plain: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(created)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>findAndCountAll<br>对结果集进行偏移或约束</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project</span><br><span class=\"line\">  .findAndCountAll(&#123;</span><br><span class=\"line\">     where: &#123;</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          [Op.like]: <span class=\"string\">'foo%'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     offset: <span class=\"number\">10</span>,</span><br><span class=\"line\">     limit: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>findAll<br>约束：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findAll(&#123; <span class=\"attr\">offset</span>: <span class=\"number\">10</span>, <span class=\"attr\">limit</span>: <span class=\"number\">2</span> , <span class=\"attr\">order</span>: <span class=\"string\">'title DESC'</span>, <span class=\"attr\">group</span>: <span class=\"string\">'name'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作符,这些操作符也可以进一步组合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Op.and]: &#123;<span class=\"attr\">a</span>: <span class=\"number\">5</span>&#125;,           <span class=\"comment\">// AND (a = 5)</span></span><br><span class=\"line\">[Op.or]: [&#123;<span class=\"attr\">a</span>: <span class=\"number\">5</span>&#125;, &#123;<span class=\"attr\">a</span>: <span class=\"number\">6</span>&#125;],  <span class=\"comment\">// (a = 5 OR a = 6)</span></span><br><span class=\"line\">[Op.gt]: <span class=\"number\">6</span>,                <span class=\"comment\">// id &gt; 6</span></span><br><span class=\"line\">[Op.gte]: <span class=\"number\">6</span>,               <span class=\"comment\">// id &gt;= 6</span></span><br><span class=\"line\">[Op.lt]: <span class=\"number\">10</span>,               <span class=\"comment\">// id &lt; 10</span></span><br><span class=\"line\">[Op.lte]: <span class=\"number\">10</span>,              <span class=\"comment\">// id &lt;= 10</span></span><br><span class=\"line\">[Op.ne]: <span class=\"number\">20</span>,               <span class=\"comment\">// id != 20</span></span><br><span class=\"line\">[Op.between]: [<span class=\"number\">6</span>, <span class=\"number\">10</span>],     <span class=\"comment\">// BETWEEN 6 AND 10</span></span><br><span class=\"line\">[Op.notBetween]: [<span class=\"number\">11</span>, <span class=\"number\">15</span>], <span class=\"comment\">// NOT BETWEEN 11 AND 15</span></span><br><span class=\"line\">[Op.in]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],           <span class=\"comment\">// IN [1, 2]</span></span><br><span class=\"line\">[Op.notIn]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],        <span class=\"comment\">// NOT IN [1, 2]</span></span><br><span class=\"line\">[Op.like]: <span class=\"string\">'%hat'</span>,         <span class=\"comment\">// LIKE '%hat'</span></span><br><span class=\"line\">[Op.notLike]: <span class=\"string\">'%hat'</span>,       <span class=\"comment\">// NOT LIKE '%hat'</span></span><br><span class=\"line\">[Op.iLike]: <span class=\"string\">'%hat'</span>,         <span class=\"comment\">// ILIKE '%hat' (case insensitive)  (PG only)</span></span><br><span class=\"line\">[Op.notILike]: <span class=\"string\">'%hat'</span>,      <span class=\"comment\">// NOT ILIKE '%hat'  (PG only)</span></span><br><span class=\"line\">[Op.overlap]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],       <span class=\"comment\">// &amp;&amp; [1, 2] (PG array overlap operator)</span></span><br><span class=\"line\">[Op.contains]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],      <span class=\"comment\">// @&gt; [1, 2] (PG array contains operator)</span></span><br><span class=\"line\">[Op.contained]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],     <span class=\"comment\">// &lt;@ [1, 2] (PG array contained by operator)</span></span><br><span class=\"line\">[Op.any]: [<span class=\"number\">2</span>,<span class=\"number\">3</span>]            <span class=\"comment\">// ANY ARRAY[2, 3]::INTEGER (PG only)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Raw-query\"><a href=\"#Raw-query\" class=\"headerlink\" title=\"Raw query\"></a>Raw query</h1><ul>\n<li>最简单的查询<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize.query(<span class=\"string\">\"SELECT * FROM myTable\"</span>).then(<span class=\"function\"><span class=\"params\">myTableRows</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(myTableRows)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>Map to model</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize</span><br><span class=\"line\">  .query(<span class=\"string\">'SELECT * FROM projects'</span>, &#123; <span class=\"attr\">model</span>: Projects &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">projects</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Each record will now be mapped to the project's model.</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(projects)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Options</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize</span><br><span class=\"line\">  .query(<span class=\"string\">'SELECT 1'</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以设为false或者console</span></span><br><span class=\"line\">    logging: <span class=\"built_in\">console</span>.log,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是否只返回结果集中的第一行</span></span><br><span class=\"line\">    plain: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有model可以映射，设为false</span></span><br><span class=\"line\">    raw: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置了queryType后，可以改变返回结果的形式</span></span><br><span class=\"line\">    type: Sequelize.QueryTypes.SELECT</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数查询</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize</span><br><span class=\"line\">.query(</span><br><span class=\"line\">  <span class=\"string\">'SELECT * FROM projects WHERE status = ?'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">raw</span>: <span class=\"literal\">true</span>, <span class=\"attr\">replacements</span>: [<span class=\"string\">'active'</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">projects</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(projects)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Model-Query\"><a href=\"#Model-Query\" class=\"headerlink\" title=\"Model Query\"></a>Model Query</h1><ul>\n<li><p>findById</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project.findById(<span class=\"number\">123</span>).then(<span class=\"function\"><span class=\"params\">project</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// project will be an instance of Project and stores the content of the table entry</span></span><br><span class=\"line\">  <span class=\"comment\">// with id 123. if such an entry is not defined you will get null</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>findByAttribute</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// search for attributes</span></span><br><span class=\"line\">Project.findOne(&#123; <span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: <span class=\"string\">'aProject'</span>&#125; &#125;).then(<span class=\"function\"><span class=\"params\">project</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// project will be the first entry of the Projects table with the title 'aProject' || null</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>findOrCreate 相当于mongodb的upsert</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User</span><br><span class=\"line\">  .findOrCreate(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">username</span>: <span class=\"string\">'sdepold'</span>&#125;, <span class=\"attr\">defaults</span>: &#123;<span class=\"attr\">job</span>: <span class=\"string\">'Technical Lead JavaScript'</span>&#125;&#125;)</span><br><span class=\"line\">  .spread(<span class=\"function\">(<span class=\"params\">user, created</span>) =&gt;</span> &#123; <span class=\"comment\">// 返回object和boolean</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(user.get(&#123;</span><br><span class=\"line\">      plain: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(created)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>findAndCountAll<br>对结果集进行偏移或约束</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project</span><br><span class=\"line\">  .findAndCountAll(&#123;</span><br><span class=\"line\">     where: &#123;</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          [Op.like]: <span class=\"string\">'foo%'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     offset: <span class=\"number\">10</span>,</span><br><span class=\"line\">     limit: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>findAll<br>约束：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findAll(&#123; <span class=\"attr\">offset</span>: <span class=\"number\">10</span>, <span class=\"attr\">limit</span>: <span class=\"number\">2</span> , <span class=\"attr\">order</span>: <span class=\"string\">'title DESC'</span>, <span class=\"attr\">group</span>: <span class=\"string\">'name'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作符,这些操作符也可以进一步组合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Op.and]: &#123;<span class=\"attr\">a</span>: <span class=\"number\">5</span>&#125;,           <span class=\"comment\">// AND (a = 5)</span></span><br><span class=\"line\">[Op.or]: [&#123;<span class=\"attr\">a</span>: <span class=\"number\">5</span>&#125;, &#123;<span class=\"attr\">a</span>: <span class=\"number\">6</span>&#125;],  <span class=\"comment\">// (a = 5 OR a = 6)</span></span><br><span class=\"line\">[Op.gt]: <span class=\"number\">6</span>,                <span class=\"comment\">// id &gt; 6</span></span><br><span class=\"line\">[Op.gte]: <span class=\"number\">6</span>,               <span class=\"comment\">// id &gt;= 6</span></span><br><span class=\"line\">[Op.lt]: <span class=\"number\">10</span>,               <span class=\"comment\">// id &lt; 10</span></span><br><span class=\"line\">[Op.lte]: <span class=\"number\">10</span>,              <span class=\"comment\">// id &lt;= 10</span></span><br><span class=\"line\">[Op.ne]: <span class=\"number\">20</span>,               <span class=\"comment\">// id != 20</span></span><br><span class=\"line\">[Op.between]: [<span class=\"number\">6</span>, <span class=\"number\">10</span>],     <span class=\"comment\">// BETWEEN 6 AND 10</span></span><br><span class=\"line\">[Op.notBetween]: [<span class=\"number\">11</span>, <span class=\"number\">15</span>], <span class=\"comment\">// NOT BETWEEN 11 AND 15</span></span><br><span class=\"line\">[Op.in]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],           <span class=\"comment\">// IN [1, 2]</span></span><br><span class=\"line\">[Op.notIn]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],        <span class=\"comment\">// NOT IN [1, 2]</span></span><br><span class=\"line\">[Op.like]: <span class=\"string\">'%hat'</span>,         <span class=\"comment\">// LIKE '%hat'</span></span><br><span class=\"line\">[Op.notLike]: <span class=\"string\">'%hat'</span>,       <span class=\"comment\">// NOT LIKE '%hat'</span></span><br><span class=\"line\">[Op.iLike]: <span class=\"string\">'%hat'</span>,         <span class=\"comment\">// ILIKE '%hat' (case insensitive)  (PG only)</span></span><br><span class=\"line\">[Op.notILike]: <span class=\"string\">'%hat'</span>,      <span class=\"comment\">// NOT ILIKE '%hat'  (PG only)</span></span><br><span class=\"line\">[Op.overlap]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],       <span class=\"comment\">// &amp;&amp; [1, 2] (PG array overlap operator)</span></span><br><span class=\"line\">[Op.contains]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],      <span class=\"comment\">// @&gt; [1, 2] (PG array contains operator)</span></span><br><span class=\"line\">[Op.contained]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],     <span class=\"comment\">// &lt;@ [1, 2] (PG array contained by operator)</span></span><br><span class=\"line\">[Op.any]: [<span class=\"number\">2</span>,<span class=\"number\">3</span>]            <span class=\"comment\">// ANY ARRAY[2, 3]::INTEGER (PG only)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"sequelizejs的数据类型","date":"2017-01-19T16:00:00.000Z","_content":"sequelize的文档混乱不堪，在这里整理一下，以后方便查阅。\n<!-- more -->\n\n``` javascript\nSequelize.STRING                      // VARCHAR(255)\nSequelize.STRING(1234)                // VARCHAR(1234)\nSequelize.STRING.BINARY               // VARCHAR BINARY\nSequelize.TEXT                        // TEXT\nSequelize.TEXT('tiny')                // TINYTEXT\n\nSequelize.INTEGER                       // INTEGER\nSequelize.INTEGER.UNSIGNED              // INTEGER UNSIGNED\nSequelize.INTEGER(11).UNSIGNED          // INTEGER(11) UNSIGNED\nSequelize.INTEGER(11).ZEROFILL          // INTEGER(11) ZEROFILL\nSequelize.INTEGER(11).ZEROFILL.UNSIGNED // INTEGER(11) UNSIGNED ZEROFILL\nSequelize.INTEGER(11).UNSIGNED.ZEROFILL // INTEGER(11) UNSIGNED ZEROFILL\nSequelize.BIGINT                      // BIGINT\nSequelize.BIGINT(11)                  // BIGINT(11)\n\nSequelize.FLOAT                       // FLOAT\nSequelize.FLOAT(11)                   // FLOAT(11)\nSequelize.FLOAT(11, 12)               // FLOAT(11,12)\n\nSequelize.REAL                        // REAL        PostgreSQL only.\nSequelize.REAL(11)                    // REAL(11)    PostgreSQL only.\nSequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.\n\nSequelize.DOUBLE                      // DOUBLE\nSequelize.DOUBLE(11)                  // DOUBLE(11)\nSequelize.DOUBLE(11, 12)              // DOUBLE(11,12)\n\nSequelize.DECIMAL                     // DECIMAL\nSequelize.DECIMAL(10, 2)              // DECIMAL(10,2)\n\nSequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres\nSequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision\nSequelize.DATEONLY                    // DATE without time.\nSequelize.BOOLEAN                     // TINYINT(1)\n\nSequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'\nSequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.\nSequelize.ARRAY(Sequelize.ENUM)       // Defines an array of ENUM. PostgreSQL only.\n\nSequelize.JSON                        // JSON column. PostgreSQL, SQLite and MySQL only.\nSequelize.JSONB                       // JSONB column. PostgreSQL only.\n\nSequelize.BLOB                        // BLOB (bytea for PostgreSQL)\nSequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)\n\nSequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)\n\nSequelize.RANGE(Sequelize.INTEGER)    // Defines int4range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.BIGINT)     // Defined int8range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATE)       // Defines tstzrange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATEONLY)   // Defines daterange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DECIMAL)    // Defines numrange range. PostgreSQL only.\n\nSequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // Defines array of tstzrange ranges. PostgreSQL only.\n\nSequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT')           // Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT', 4326)     // Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.\n```","source":"_posts/sequelizejs的数据类型.md","raw":"---\ntitle: sequelizejs的数据类型\ndate: 2017-1-20\ncategories:\n- 后端\n- sequelizejs\ntags:\n- 后端\n- javascript\n- sequelizejs\n---\nsequelize的文档混乱不堪，在这里整理一下，以后方便查阅。\n<!-- more -->\n\n``` javascript\nSequelize.STRING                      // VARCHAR(255)\nSequelize.STRING(1234)                // VARCHAR(1234)\nSequelize.STRING.BINARY               // VARCHAR BINARY\nSequelize.TEXT                        // TEXT\nSequelize.TEXT('tiny')                // TINYTEXT\n\nSequelize.INTEGER                       // INTEGER\nSequelize.INTEGER.UNSIGNED              // INTEGER UNSIGNED\nSequelize.INTEGER(11).UNSIGNED          // INTEGER(11) UNSIGNED\nSequelize.INTEGER(11).ZEROFILL          // INTEGER(11) ZEROFILL\nSequelize.INTEGER(11).ZEROFILL.UNSIGNED // INTEGER(11) UNSIGNED ZEROFILL\nSequelize.INTEGER(11).UNSIGNED.ZEROFILL // INTEGER(11) UNSIGNED ZEROFILL\nSequelize.BIGINT                      // BIGINT\nSequelize.BIGINT(11)                  // BIGINT(11)\n\nSequelize.FLOAT                       // FLOAT\nSequelize.FLOAT(11)                   // FLOAT(11)\nSequelize.FLOAT(11, 12)               // FLOAT(11,12)\n\nSequelize.REAL                        // REAL        PostgreSQL only.\nSequelize.REAL(11)                    // REAL(11)    PostgreSQL only.\nSequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.\n\nSequelize.DOUBLE                      // DOUBLE\nSequelize.DOUBLE(11)                  // DOUBLE(11)\nSequelize.DOUBLE(11, 12)              // DOUBLE(11,12)\n\nSequelize.DECIMAL                     // DECIMAL\nSequelize.DECIMAL(10, 2)              // DECIMAL(10,2)\n\nSequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres\nSequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision\nSequelize.DATEONLY                    // DATE without time.\nSequelize.BOOLEAN                     // TINYINT(1)\n\nSequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'\nSequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.\nSequelize.ARRAY(Sequelize.ENUM)       // Defines an array of ENUM. PostgreSQL only.\n\nSequelize.JSON                        // JSON column. PostgreSQL, SQLite and MySQL only.\nSequelize.JSONB                       // JSONB column. PostgreSQL only.\n\nSequelize.BLOB                        // BLOB (bytea for PostgreSQL)\nSequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)\n\nSequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)\n\nSequelize.RANGE(Sequelize.INTEGER)    // Defines int4range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.BIGINT)     // Defined int8range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATE)       // Defines tstzrange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATEONLY)   // Defines daterange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DECIMAL)    // Defines numrange range. PostgreSQL only.\n\nSequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // Defines array of tstzrange ranges. PostgreSQL only.\n\nSequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT')           // Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT', 4326)     // Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.\n```","slug":"sequelizejs的数据类型","published":1,"updated":"2018-02-28T08:24:02.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv27g002kh0urf46c0aei","content":"<p>sequelize的文档混乱不堪，在这里整理一下，以后方便查阅。<br><a id=\"more\"></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sequelize.STRING                      <span class=\"comment\">// VARCHAR(255)</span></span><br><span class=\"line\">Sequelize.STRING(<span class=\"number\">1234</span>)                <span class=\"comment\">// VARCHAR(1234)</span></span><br><span class=\"line\">Sequelize.STRING.BINARY               <span class=\"comment\">// VARCHAR BINARY</span></span><br><span class=\"line\">Sequelize.TEXT                        <span class=\"comment\">// TEXT</span></span><br><span class=\"line\">Sequelize.TEXT(<span class=\"string\">'tiny'</span>)                <span class=\"comment\">// TINYTEXT</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.INTEGER                       <span class=\"comment\">// INTEGER</span></span><br><span class=\"line\">Sequelize.INTEGER.UNSIGNED              <span class=\"comment\">// INTEGER UNSIGNED</span></span><br><span class=\"line\">Sequelize.INTEGER(<span class=\"number\">11</span>).UNSIGNED          <span class=\"comment\">// INTEGER(11) UNSIGNED</span></span><br><span class=\"line\">Sequelize.INTEGER(<span class=\"number\">11</span>).ZEROFILL          <span class=\"comment\">// INTEGER(11) ZEROFILL</span></span><br><span class=\"line\">Sequelize.INTEGER(<span class=\"number\">11</span>).ZEROFILL.UNSIGNED <span class=\"comment\">// INTEGER(11) UNSIGNED ZEROFILL</span></span><br><span class=\"line\">Sequelize.INTEGER(<span class=\"number\">11</span>).UNSIGNED.ZEROFILL <span class=\"comment\">// INTEGER(11) UNSIGNED ZEROFILL</span></span><br><span class=\"line\">Sequelize.BIGINT                      <span class=\"comment\">// BIGINT</span></span><br><span class=\"line\">Sequelize.BIGINT(<span class=\"number\">11</span>)                  <span class=\"comment\">// BIGINT(11)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.FLOAT                       <span class=\"comment\">// FLOAT</span></span><br><span class=\"line\">Sequelize.FLOAT(<span class=\"number\">11</span>)                   <span class=\"comment\">// FLOAT(11)</span></span><br><span class=\"line\">Sequelize.FLOAT(<span class=\"number\">11</span>, <span class=\"number\">12</span>)               <span class=\"comment\">// FLOAT(11,12)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.REAL                        <span class=\"comment\">// REAL        PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.REAL(<span class=\"number\">11</span>)                    <span class=\"comment\">// REAL(11)    PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.REAL(<span class=\"number\">11</span>, <span class=\"number\">12</span>)                <span class=\"comment\">// REAL(11,12) PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.DOUBLE                      <span class=\"comment\">// DOUBLE</span></span><br><span class=\"line\">Sequelize.DOUBLE(<span class=\"number\">11</span>)                  <span class=\"comment\">// DOUBLE(11)</span></span><br><span class=\"line\">Sequelize.DOUBLE(<span class=\"number\">11</span>, <span class=\"number\">12</span>)              <span class=\"comment\">// DOUBLE(11,12)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.DECIMAL                     <span class=\"comment\">// DECIMAL</span></span><br><span class=\"line\">Sequelize.DECIMAL(<span class=\"number\">10</span>, <span class=\"number\">2</span>)              <span class=\"comment\">// DECIMAL(10,2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.DATE                        <span class=\"comment\">// DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres</span></span><br><span class=\"line\">Sequelize.DATE(<span class=\"number\">6</span>)                     <span class=\"comment\">// DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision</span></span><br><span class=\"line\">Sequelize.DATEONLY                    <span class=\"comment\">// DATE without time.</span></span><br><span class=\"line\">Sequelize.BOOLEAN                     <span class=\"comment\">// TINYINT(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.ENUM(<span class=\"string\">'value 1'</span>, <span class=\"string\">'value 2'</span>)  <span class=\"comment\">// An ENUM with allowed values 'value 1' and 'value 2'</span></span><br><span class=\"line\">Sequelize.ARRAY(Sequelize.TEXT)       <span class=\"comment\">// Defines an array. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.ARRAY(Sequelize.ENUM)       <span class=\"comment\">// Defines an array of ENUM. PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.JSON                        <span class=\"comment\">// JSON column. PostgreSQL, SQLite and MySQL only.</span></span><br><span class=\"line\">Sequelize.JSONB                       <span class=\"comment\">// JSONB column. PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.BLOB                        <span class=\"comment\">// BLOB (bytea for PostgreSQL)</span></span><br><span class=\"line\">Sequelize.BLOB(<span class=\"string\">'tiny'</span>)                <span class=\"comment\">// TINYBLOB (bytea for PostgreSQL. Other options are medium and long)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.UUID                        <span class=\"comment\">// UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.INTEGER)    <span class=\"comment\">// Defines int4range range. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.BIGINT)     <span class=\"comment\">// Defined int8range range. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.DATE)       <span class=\"comment\">// Defines tstzrange range. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.DATEONLY)   <span class=\"comment\">// Defines daterange range. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.DECIMAL)    <span class=\"comment\">// Defines numrange range. PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) <span class=\"comment\">// Defines array of tstzrange ranges. PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.GEOMETRY                    <span class=\"comment\">// Spatial column.  PostgreSQL (with PostGIS) or MySQL only.</span></span><br><span class=\"line\">Sequelize.GEOMETRY(<span class=\"string\">'POINT'</span>)           <span class=\"comment\">// Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.</span></span><br><span class=\"line\">Sequelize.GEOMETRY(<span class=\"string\">'POINT'</span>, <span class=\"number\">4326</span>)     <span class=\"comment\">// Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>sequelize的文档混乱不堪，在这里整理一下，以后方便查阅。<br>","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sequelize.STRING                      <span class=\"comment\">// VARCHAR(255)</span></span><br><span class=\"line\">Sequelize.STRING(<span class=\"number\">1234</span>)                <span class=\"comment\">// VARCHAR(1234)</span></span><br><span class=\"line\">Sequelize.STRING.BINARY               <span class=\"comment\">// VARCHAR BINARY</span></span><br><span class=\"line\">Sequelize.TEXT                        <span class=\"comment\">// TEXT</span></span><br><span class=\"line\">Sequelize.TEXT(<span class=\"string\">'tiny'</span>)                <span class=\"comment\">// TINYTEXT</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.INTEGER                       <span class=\"comment\">// INTEGER</span></span><br><span class=\"line\">Sequelize.INTEGER.UNSIGNED              <span class=\"comment\">// INTEGER UNSIGNED</span></span><br><span class=\"line\">Sequelize.INTEGER(<span class=\"number\">11</span>).UNSIGNED          <span class=\"comment\">// INTEGER(11) UNSIGNED</span></span><br><span class=\"line\">Sequelize.INTEGER(<span class=\"number\">11</span>).ZEROFILL          <span class=\"comment\">// INTEGER(11) ZEROFILL</span></span><br><span class=\"line\">Sequelize.INTEGER(<span class=\"number\">11</span>).ZEROFILL.UNSIGNED <span class=\"comment\">// INTEGER(11) UNSIGNED ZEROFILL</span></span><br><span class=\"line\">Sequelize.INTEGER(<span class=\"number\">11</span>).UNSIGNED.ZEROFILL <span class=\"comment\">// INTEGER(11) UNSIGNED ZEROFILL</span></span><br><span class=\"line\">Sequelize.BIGINT                      <span class=\"comment\">// BIGINT</span></span><br><span class=\"line\">Sequelize.BIGINT(<span class=\"number\">11</span>)                  <span class=\"comment\">// BIGINT(11)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.FLOAT                       <span class=\"comment\">// FLOAT</span></span><br><span class=\"line\">Sequelize.FLOAT(<span class=\"number\">11</span>)                   <span class=\"comment\">// FLOAT(11)</span></span><br><span class=\"line\">Sequelize.FLOAT(<span class=\"number\">11</span>, <span class=\"number\">12</span>)               <span class=\"comment\">// FLOAT(11,12)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.REAL                        <span class=\"comment\">// REAL        PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.REAL(<span class=\"number\">11</span>)                    <span class=\"comment\">// REAL(11)    PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.REAL(<span class=\"number\">11</span>, <span class=\"number\">12</span>)                <span class=\"comment\">// REAL(11,12) PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.DOUBLE                      <span class=\"comment\">// DOUBLE</span></span><br><span class=\"line\">Sequelize.DOUBLE(<span class=\"number\">11</span>)                  <span class=\"comment\">// DOUBLE(11)</span></span><br><span class=\"line\">Sequelize.DOUBLE(<span class=\"number\">11</span>, <span class=\"number\">12</span>)              <span class=\"comment\">// DOUBLE(11,12)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.DECIMAL                     <span class=\"comment\">// DECIMAL</span></span><br><span class=\"line\">Sequelize.DECIMAL(<span class=\"number\">10</span>, <span class=\"number\">2</span>)              <span class=\"comment\">// DECIMAL(10,2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.DATE                        <span class=\"comment\">// DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres</span></span><br><span class=\"line\">Sequelize.DATE(<span class=\"number\">6</span>)                     <span class=\"comment\">// DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision</span></span><br><span class=\"line\">Sequelize.DATEONLY                    <span class=\"comment\">// DATE without time.</span></span><br><span class=\"line\">Sequelize.BOOLEAN                     <span class=\"comment\">// TINYINT(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.ENUM(<span class=\"string\">'value 1'</span>, <span class=\"string\">'value 2'</span>)  <span class=\"comment\">// An ENUM with allowed values 'value 1' and 'value 2'</span></span><br><span class=\"line\">Sequelize.ARRAY(Sequelize.TEXT)       <span class=\"comment\">// Defines an array. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.ARRAY(Sequelize.ENUM)       <span class=\"comment\">// Defines an array of ENUM. PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.JSON                        <span class=\"comment\">// JSON column. PostgreSQL, SQLite and MySQL only.</span></span><br><span class=\"line\">Sequelize.JSONB                       <span class=\"comment\">// JSONB column. PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.BLOB                        <span class=\"comment\">// BLOB (bytea for PostgreSQL)</span></span><br><span class=\"line\">Sequelize.BLOB(<span class=\"string\">'tiny'</span>)                <span class=\"comment\">// TINYBLOB (bytea for PostgreSQL. Other options are medium and long)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.UUID                        <span class=\"comment\">// UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.INTEGER)    <span class=\"comment\">// Defines int4range range. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.BIGINT)     <span class=\"comment\">// Defined int8range range. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.DATE)       <span class=\"comment\">// Defines tstzrange range. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.DATEONLY)   <span class=\"comment\">// Defines daterange range. PostgreSQL only.</span></span><br><span class=\"line\">Sequelize.RANGE(Sequelize.DECIMAL)    <span class=\"comment\">// Defines numrange range. PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) <span class=\"comment\">// Defines array of tstzrange ranges. PostgreSQL only.</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize.GEOMETRY                    <span class=\"comment\">// Spatial column.  PostgreSQL (with PostGIS) or MySQL only.</span></span><br><span class=\"line\">Sequelize.GEOMETRY(<span class=\"string\">'POINT'</span>)           <span class=\"comment\">// Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.</span></span><br><span class=\"line\">Sequelize.GEOMETRY(<span class=\"string\">'POINT'</span>, <span class=\"number\">4326</span>)     <span class=\"comment\">// Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.</span></span><br></pre></td></tr></table></figure>"},{"title":"包模块规范：AMD,Commonjs与ES2015","date":"2016-05-18T16:00:00.000Z","_content":"# AMD\n翻译自[amdjs官方wiki](https://github.com/amdjs/amdjs-api/wiki/AMD)\n\n异步模块定义（AMD）API指定了定义模块的机制，以便模块和它的依赖项可以异步加载。这特别适合于浏览器环境，但其中模块的同步加载会导致性能、可用性、调试和跨域访问问题。实现了AMD的，是requirejs。\n<!-- more -->\n### API定义\ndefine(id?, dependencies?, factory);\n\n**id**: 第一个参数id是字符串文字。它指定正在定义的模块的ID。这个参数是可选的，如果它不存在，模块ID应该默认为加载程序请求给定响应脚本的模块的ID。当出现时，模块ID必须是“顶级”或绝对ID（不允许相关ID）。\n\n**dependencies**: 第二个参数依赖项是模块ID的数组文字，它是被定义的模块所需的依赖项。依赖关系必须在模块工厂函数执行之前解决，并且解析的值应该作为参数传递给工厂函数，参数位置对应于依赖数组中的索引。\n\n**factory**: 第三个参数，工厂，是实例化模块或对象时应该执行的函数。如果工厂是一个函数，它应该只执行一次。如果工厂参数是一个对象，则应该将该对象分配为模块的导出值。\n\n例子：\n``` javascript\n define(\"alpha\", [\"require\", \"exports\", \"beta\"], function (require, exports, beta) {\n       exports.verb = function() {\n           return beta.verb();\n           //Or:\n           return require(\"beta\").verb();\n       }\n   });\n```\n\n# CommonJS\n以下翻译自[webpack官方wiki](https://github.com/webpack/docs/wiki/commonjs)。\n\nCommonJS组定义一个模块的格式来解决问题以确保JavaScript范围每个模块是在它自己的命名空间执行。\n\ncommonjs提供了两个工具来做这件事情：\n1. require()方法, 可以使你向当前scope导入模块。\n2. module对象，可以使你从当前scope导出一些东西。\n\n实现了CommonJS的是nodejs,webpack,browserify等。\n\n例子：\n``` javascript\n// moduleA.js\nmodule.exports = function( value ){\n\treturn value*2;\n}\n\n// moduleB.js\nvar multiplyBy2 = require('./moduleA');\nvar result = multiplyBy2( 4 );\n```\n\n# ES2015\n\nES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。对ES2015来说，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。\n\n模块功能主要由两个命令构成：export和import\n\n例子：\n``` javascript\n// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n\nimport * as circle from './circle';\n```","source":"_posts/包模块规范：AMD,Commonjs与ES2015.md","raw":"---\ntitle: 包模块规范：AMD,Commonjs与ES2015\ndate: 2016-5-19\ncategories:\n- 前端\n- ES6\ntags:\n- 前端\n- javascript\n- amd\n- commonjs\n---\n# AMD\n翻译自[amdjs官方wiki](https://github.com/amdjs/amdjs-api/wiki/AMD)\n\n异步模块定义（AMD）API指定了定义模块的机制，以便模块和它的依赖项可以异步加载。这特别适合于浏览器环境，但其中模块的同步加载会导致性能、可用性、调试和跨域访问问题。实现了AMD的，是requirejs。\n<!-- more -->\n### API定义\ndefine(id?, dependencies?, factory);\n\n**id**: 第一个参数id是字符串文字。它指定正在定义的模块的ID。这个参数是可选的，如果它不存在，模块ID应该默认为加载程序请求给定响应脚本的模块的ID。当出现时，模块ID必须是“顶级”或绝对ID（不允许相关ID）。\n\n**dependencies**: 第二个参数依赖项是模块ID的数组文字，它是被定义的模块所需的依赖项。依赖关系必须在模块工厂函数执行之前解决，并且解析的值应该作为参数传递给工厂函数，参数位置对应于依赖数组中的索引。\n\n**factory**: 第三个参数，工厂，是实例化模块或对象时应该执行的函数。如果工厂是一个函数，它应该只执行一次。如果工厂参数是一个对象，则应该将该对象分配为模块的导出值。\n\n例子：\n``` javascript\n define(\"alpha\", [\"require\", \"exports\", \"beta\"], function (require, exports, beta) {\n       exports.verb = function() {\n           return beta.verb();\n           //Or:\n           return require(\"beta\").verb();\n       }\n   });\n```\n\n# CommonJS\n以下翻译自[webpack官方wiki](https://github.com/webpack/docs/wiki/commonjs)。\n\nCommonJS组定义一个模块的格式来解决问题以确保JavaScript范围每个模块是在它自己的命名空间执行。\n\ncommonjs提供了两个工具来做这件事情：\n1. require()方法, 可以使你向当前scope导入模块。\n2. module对象，可以使你从当前scope导出一些东西。\n\n实现了CommonJS的是nodejs,webpack,browserify等。\n\n例子：\n``` javascript\n// moduleA.js\nmodule.exports = function( value ){\n\treturn value*2;\n}\n\n// moduleB.js\nvar multiplyBy2 = require('./moduleA');\nvar result = multiplyBy2( 4 );\n```\n\n# ES2015\n\nES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。对ES2015来说，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。\n\n模块功能主要由两个命令构成：export和import\n\n例子：\n``` javascript\n// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n\nimport * as circle from './circle';\n```","slug":"包模块规范：AMD,Commonjs与ES2015","published":1,"updated":"2018-02-28T07:52:30.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv27j002ph0urg5sjvjs1","content":"<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>翻译自<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">amdjs官方wiki</a></p>\n<p>异步模块定义（AMD）API指定了定义模块的机制，以便模块和它的依赖项可以异步加载。这特别适合于浏览器环境，但其中模块的同步加载会导致性能、可用性、调试和跨域访问问题。实现了AMD的，是requirejs。<br><a id=\"more\"></a></p>\n<h3 id=\"API定义\"><a href=\"#API定义\" class=\"headerlink\" title=\"API定义\"></a>API定义</h3><p>define(id?, dependencies?, factory);</p>\n<p><strong>id</strong>: 第一个参数id是字符串文字。它指定正在定义的模块的ID。这个参数是可选的，如果它不存在，模块ID应该默认为加载程序请求给定响应脚本的模块的ID。当出现时，模块ID必须是“顶级”或绝对ID（不允许相关ID）。</p>\n<p><strong>dependencies</strong>: 第二个参数依赖项是模块ID的数组文字，它是被定义的模块所需的依赖项。依赖关系必须在模块工厂函数执行之前解决，并且解析的值应该作为参数传递给工厂函数，参数位置对应于依赖数组中的索引。</p>\n<p><strong>factory</strong>: 第三个参数，工厂，是实例化模块或对象时应该执行的函数。如果工厂是一个函数，它应该只执行一次。如果工厂参数是一个对象，则应该将该对象分配为模块的导出值。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"alpha\"</span>, [<span class=\"string\">\"require\"</span>, <span class=\"string\">\"exports\"</span>, <span class=\"string\">\"beta\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, exports, beta</span>) </span>&#123;</span><br><span class=\"line\">      exports.verb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> beta.verb();</span><br><span class=\"line\">          <span class=\"comment\">//Or:</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">\"beta\"</span>).verb();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h1><p>以下翻译自<a href=\"https://github.com/webpack/docs/wiki/commonjs\" target=\"_blank\" rel=\"noopener\">webpack官方wiki</a>。</p>\n<p>CommonJS组定义一个模块的格式来解决问题以确保JavaScript范围每个模块是在它自己的命名空间执行。</p>\n<p>commonjs提供了两个工具来做这件事情：</p>\n<ol>\n<li>require()方法, 可以使你向当前scope导入模块。</li>\n<li>module对象，可以使你从当前scope导出一些东西。</li>\n</ol>\n<p>实现了CommonJS的是nodejs,webpack,browserify等。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> multiplyBy2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./moduleA'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = multiplyBy2( <span class=\"number\">4</span> );</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"ES2015\"><a href=\"#ES2015\" class=\"headerlink\" title=\"ES2015\"></a>ES2015</h1><p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。对ES2015来说，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。</p>\n<p>模块功能主要由两个命令构成：export和import</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// circle.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circumference</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>翻译自<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">amdjs官方wiki</a></p>\n<p>异步模块定义（AMD）API指定了定义模块的机制，以便模块和它的依赖项可以异步加载。这特别适合于浏览器环境，但其中模块的同步加载会导致性能、可用性、调试和跨域访问问题。实现了AMD的，是requirejs。<br>","more":"</p>\n<h3 id=\"API定义\"><a href=\"#API定义\" class=\"headerlink\" title=\"API定义\"></a>API定义</h3><p>define(id?, dependencies?, factory);</p>\n<p><strong>id</strong>: 第一个参数id是字符串文字。它指定正在定义的模块的ID。这个参数是可选的，如果它不存在，模块ID应该默认为加载程序请求给定响应脚本的模块的ID。当出现时，模块ID必须是“顶级”或绝对ID（不允许相关ID）。</p>\n<p><strong>dependencies</strong>: 第二个参数依赖项是模块ID的数组文字，它是被定义的模块所需的依赖项。依赖关系必须在模块工厂函数执行之前解决，并且解析的值应该作为参数传递给工厂函数，参数位置对应于依赖数组中的索引。</p>\n<p><strong>factory</strong>: 第三个参数，工厂，是实例化模块或对象时应该执行的函数。如果工厂是一个函数，它应该只执行一次。如果工厂参数是一个对象，则应该将该对象分配为模块的导出值。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"alpha\"</span>, [<span class=\"string\">\"require\"</span>, <span class=\"string\">\"exports\"</span>, <span class=\"string\">\"beta\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, exports, beta</span>) </span>&#123;</span><br><span class=\"line\">      exports.verb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> beta.verb();</span><br><span class=\"line\">          <span class=\"comment\">//Or:</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">\"beta\"</span>).verb();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h1><p>以下翻译自<a href=\"https://github.com/webpack/docs/wiki/commonjs\" target=\"_blank\" rel=\"noopener\">webpack官方wiki</a>。</p>\n<p>CommonJS组定义一个模块的格式来解决问题以确保JavaScript范围每个模块是在它自己的命名空间执行。</p>\n<p>commonjs提供了两个工具来做这件事情：</p>\n<ol>\n<li>require()方法, 可以使你向当前scope导入模块。</li>\n<li>module对象，可以使你从当前scope导出一些东西。</li>\n</ol>\n<p>实现了CommonJS的是nodejs,webpack,browserify等。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> multiplyBy2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./moduleA'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = multiplyBy2( <span class=\"number\">4</span> );</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"ES2015\"><a href=\"#ES2015\" class=\"headerlink\" title=\"ES2015\"></a>ES2015</h1><p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。对ES2015来说，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。</p>\n<p>模块功能主要由两个命令构成：export和import</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// circle.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circumference</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</span><br></pre></td></tr></table></figure></p>"},{"title":"用Docker和angular5及Koa创建MEAN应用","date":"2017-12-17T16:00:00.000Z","_content":"\n首先要确保angualr-cli和docker都已经安装完毕。\n## client\n创建一个新的angular-cli项目mean-docker/angular-client。\n\n在angular-client目录下，创建一个Dockerfile，并写入如下内容\n<!-- more -->\n```\nFROM node:8\n# 创建工作目录\nRUN mkdir -p /usr/src/app\n# 切换到工作目录\nWORKDIR /usr/src/app\n# 拷贝package.json到工作目录\nCOPY package.json /usr/src/app\n# 运行npm install\nRUN npm install\n# 拷贝所有source到工作目录\nCOPY . /usr/src/app\n# 开放4200端口\nEXPOSE 4200\n# 运行npm start\nCMD [\"npm\", \"start\"]\n```\n为了防止node_modules文件夹也被拷贝，可以新建一个.dockeringore文件把它过滤掉。\n\n为了确保client端由docker image提供host，需要修改package.json中npm start一节为：\n```\n\"start\": \"ng serve -H 0.0.0.0\",\n```\n接下来，build这个镜像：\n```\n docker build -t angular-client:dev .\n```\nbulid好镜像之后，可以使用这个镜像来创建容器：\n```\ndocker run -d --name angular-client -p 4200:4200 angular-client:dev\n```\n## server\n在mean-docker目录下创建一个koa-server目录。执行npm init命令，新建一个npm 项目。安装koa和koa-router等组件。\n\napp.js中写入如下内容：\n``` javascript\nconst compose = require('koa-compose');\nconst Koa = require('koa');\nconst app = new Koa();\nconst router = require('./router');\n\n// x-response-time\nasync function responseTime (ctx, next){\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n};\n\n// logger\nasync function logger (ctx, next) {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n};\n\nconst all = compose([\n    responseTime,\n    logger(),\n    router.routes()\n]);\n\napp.use(all);\n\napp.listen(3000);\n```\nrouter中写入如下内容：\n``` javascript\nconst router = require('koa-router')();\n\nrouter.get('/',  (ctx, next) => {\n    ctx.body = 'api works';\n});\n\nmodule.exports = router;\n```\n在koa-server目录下，创建一个Dockerfile，并写入如下内容：\n```\nFROM node:6\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nCOPY package.json /usr/src/app\nRUN npm install\nCOPY . /usr/src/app\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n同样的，也需要添加一个.dockeringore来忽略node_modules。\n为package.json添加npm start命令\n```\n\"start\": \"node app.js\",\n```\n执行docker build和docker run\n```\ndocker build -t koa-server:dev .\ndocker run -d --name koa-server -p 3000:3000 koa-server:dev\n```\n\n## mongodb\n\n启动一个mongodb容器：\n```\ndocker run -d --name mongodb -p 27017:27017 mongo\n```\n\n## compose\n``` yml\nservices:\n  angular:\n    build: angular-client\n    ports:\n      - \"4200:4200\"\n      \n  koa: \n    build: koa-server\n    ports:\n      - \"3000:3000\"\n\n  database:\n    image: mongo\n    ports:\n      - \"27017:27017\"\n```\n至此，三个容器就创建好了，接下来补充程序中的实质性内容：\n\n## server端内容补充\n首先安装mongoose，为router添加路由和mongoose组件\n``` javascript\n// User model\nconst db = 'mongodb://database/mean-docker';\n\nmongoose.connect(db);\n\nconst userSchema = new mongoose.Schema({\n    name: String,\n    age: Number\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// ...\n\nrouter.get('/users',async (ctx, next) => {\n    await User.find({}, (err, users) => {\n        if (err) {\n            ctx.status = 500;\n            ctx.body = err;\n        }else{\n            ctx.status = 200;\n            ctx.body = users;\n        }\n    });\n});\n\n/* GET one users. */\nrouter.get('/users/:id',async (ctx, next) => {\n    await User.findById(ctx.request.param.id, (err, users) => {\n        if (err) {\n            ctx.status = 500;\n            ctx.body = err;\n        }else{\n            ctx.status = 200;\n            ctx.body = users;\n        }\n    });\n});\n\n/* Create a user. */\nrouter.post('/users',async (ctx, next) => {\n    let user = new User({\n        name: ctx.request.body.name,\n        age: ctx.request.body.age\n    });\n\n    await user.save(error => {\n        if (error) {\n            ctx.status = 500;\n            ctx.body = error;\n        }else{\n            ctx.status = 200;\n            ctx.body = {\n                message: 'User created successfully'\n            };\n        }\n    });\n});\n```\n接下来，连接mongodb和koa-server，在docker-compose中koa-server一节增加这样一句：\n``` yml\nlinks:\n      - database\n```\n\n## 前端内容补充\n在app.component.ts中添加如下内容：\n``` typescript\n  // ...\n  // Link to our api, pointing to localhost\n  API = 'http://localhost:3000';\n\n  // Declare empty list of people\n  people: any[] = [];\n\n  constructor(private http: Http) {}\n\n  // Angular 2 Life Cycle event when component has been initialized\n  ngOnInit() {\n    this.getAllPeople();\n  }\n\n  // Add one person to the API\n  addPerson(name, age) {\n    this.http.post(`${this.API}/users`, {name, age})\n      .map(res => res.json())\n      .subscribe(() => {\n        this.getAllPeople();\n      })\n  }\n\n  // Get all users from the API\n  getAllPeople() {\n    this.http.get(`${this.API}/users`)\n      .map(res => res.json())\n      .subscribe(people => {\n        console.log(people)\n        this.people = people\n      })\n  }\n  // ...\n```\n在app.component.html中增加如下内容：\n``` html\n<div class=\"container\">\n  <div [style.margin-top.px]=\"10\" class=\"row\">\n    <h3>Add new person</h3>\n    <form class=\"form-inline\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" #name>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"age\">Age</label>\n        <input type=\"number\" class=\"form-control\" id=\"age\" #age>\n      </div>\n      <button type=\"button\" (click)=\"addPerson(name.value, age.value)\" class=\"btn btn-primary\">Add person</button>\n    </form>\n  </div>\n  <div [style.margin-top.px]=\"10\" class=\"row\">\n    <h3>People</h3>\n    <div [style.margin-right.px]=\"10\" class=\"card card-block col-md-3\" *ngFor=\"let person of people\">\n      <h4 class=\"card-title\">{{person.name}}  {{person.age}}</h4>\n    </div>\n  </div>\n</div>\n```\n这样，就可以添加用户，查看用户了。\n","source":"_posts/用Docker和angular5及Koa创建MEAN应用.md","raw":"---\ntitle: 用Docker和angular5及Koa创建MEAN应用\ndate: 2017-12-18\ncategories:\n- 全栈\n- MEAN\ntags:\n- 全栈\n- mongodb\n- mongoose\n- nodejs\n- angular\n---\n\n首先要确保angualr-cli和docker都已经安装完毕。\n## client\n创建一个新的angular-cli项目mean-docker/angular-client。\n\n在angular-client目录下，创建一个Dockerfile，并写入如下内容\n<!-- more -->\n```\nFROM node:8\n# 创建工作目录\nRUN mkdir -p /usr/src/app\n# 切换到工作目录\nWORKDIR /usr/src/app\n# 拷贝package.json到工作目录\nCOPY package.json /usr/src/app\n# 运行npm install\nRUN npm install\n# 拷贝所有source到工作目录\nCOPY . /usr/src/app\n# 开放4200端口\nEXPOSE 4200\n# 运行npm start\nCMD [\"npm\", \"start\"]\n```\n为了防止node_modules文件夹也被拷贝，可以新建一个.dockeringore文件把它过滤掉。\n\n为了确保client端由docker image提供host，需要修改package.json中npm start一节为：\n```\n\"start\": \"ng serve -H 0.0.0.0\",\n```\n接下来，build这个镜像：\n```\n docker build -t angular-client:dev .\n```\nbulid好镜像之后，可以使用这个镜像来创建容器：\n```\ndocker run -d --name angular-client -p 4200:4200 angular-client:dev\n```\n## server\n在mean-docker目录下创建一个koa-server目录。执行npm init命令，新建一个npm 项目。安装koa和koa-router等组件。\n\napp.js中写入如下内容：\n``` javascript\nconst compose = require('koa-compose');\nconst Koa = require('koa');\nconst app = new Koa();\nconst router = require('./router');\n\n// x-response-time\nasync function responseTime (ctx, next){\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n};\n\n// logger\nasync function logger (ctx, next) {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n};\n\nconst all = compose([\n    responseTime,\n    logger(),\n    router.routes()\n]);\n\napp.use(all);\n\napp.listen(3000);\n```\nrouter中写入如下内容：\n``` javascript\nconst router = require('koa-router')();\n\nrouter.get('/',  (ctx, next) => {\n    ctx.body = 'api works';\n});\n\nmodule.exports = router;\n```\n在koa-server目录下，创建一个Dockerfile，并写入如下内容：\n```\nFROM node:6\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nCOPY package.json /usr/src/app\nRUN npm install\nCOPY . /usr/src/app\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n同样的，也需要添加一个.dockeringore来忽略node_modules。\n为package.json添加npm start命令\n```\n\"start\": \"node app.js\",\n```\n执行docker build和docker run\n```\ndocker build -t koa-server:dev .\ndocker run -d --name koa-server -p 3000:3000 koa-server:dev\n```\n\n## mongodb\n\n启动一个mongodb容器：\n```\ndocker run -d --name mongodb -p 27017:27017 mongo\n```\n\n## compose\n``` yml\nservices:\n  angular:\n    build: angular-client\n    ports:\n      - \"4200:4200\"\n      \n  koa: \n    build: koa-server\n    ports:\n      - \"3000:3000\"\n\n  database:\n    image: mongo\n    ports:\n      - \"27017:27017\"\n```\n至此，三个容器就创建好了，接下来补充程序中的实质性内容：\n\n## server端内容补充\n首先安装mongoose，为router添加路由和mongoose组件\n``` javascript\n// User model\nconst db = 'mongodb://database/mean-docker';\n\nmongoose.connect(db);\n\nconst userSchema = new mongoose.Schema({\n    name: String,\n    age: Number\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// ...\n\nrouter.get('/users',async (ctx, next) => {\n    await User.find({}, (err, users) => {\n        if (err) {\n            ctx.status = 500;\n            ctx.body = err;\n        }else{\n            ctx.status = 200;\n            ctx.body = users;\n        }\n    });\n});\n\n/* GET one users. */\nrouter.get('/users/:id',async (ctx, next) => {\n    await User.findById(ctx.request.param.id, (err, users) => {\n        if (err) {\n            ctx.status = 500;\n            ctx.body = err;\n        }else{\n            ctx.status = 200;\n            ctx.body = users;\n        }\n    });\n});\n\n/* Create a user. */\nrouter.post('/users',async (ctx, next) => {\n    let user = new User({\n        name: ctx.request.body.name,\n        age: ctx.request.body.age\n    });\n\n    await user.save(error => {\n        if (error) {\n            ctx.status = 500;\n            ctx.body = error;\n        }else{\n            ctx.status = 200;\n            ctx.body = {\n                message: 'User created successfully'\n            };\n        }\n    });\n});\n```\n接下来，连接mongodb和koa-server，在docker-compose中koa-server一节增加这样一句：\n``` yml\nlinks:\n      - database\n```\n\n## 前端内容补充\n在app.component.ts中添加如下内容：\n``` typescript\n  // ...\n  // Link to our api, pointing to localhost\n  API = 'http://localhost:3000';\n\n  // Declare empty list of people\n  people: any[] = [];\n\n  constructor(private http: Http) {}\n\n  // Angular 2 Life Cycle event when component has been initialized\n  ngOnInit() {\n    this.getAllPeople();\n  }\n\n  // Add one person to the API\n  addPerson(name, age) {\n    this.http.post(`${this.API}/users`, {name, age})\n      .map(res => res.json())\n      .subscribe(() => {\n        this.getAllPeople();\n      })\n  }\n\n  // Get all users from the API\n  getAllPeople() {\n    this.http.get(`${this.API}/users`)\n      .map(res => res.json())\n      .subscribe(people => {\n        console.log(people)\n        this.people = people\n      })\n  }\n  // ...\n```\n在app.component.html中增加如下内容：\n``` html\n<div class=\"container\">\n  <div [style.margin-top.px]=\"10\" class=\"row\">\n    <h3>Add new person</h3>\n    <form class=\"form-inline\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" #name>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"age\">Age</label>\n        <input type=\"number\" class=\"form-control\" id=\"age\" #age>\n      </div>\n      <button type=\"button\" (click)=\"addPerson(name.value, age.value)\" class=\"btn btn-primary\">Add person</button>\n    </form>\n  </div>\n  <div [style.margin-top.px]=\"10\" class=\"row\">\n    <h3>People</h3>\n    <div [style.margin-right.px]=\"10\" class=\"card card-block col-md-3\" *ngFor=\"let person of people\">\n      <h4 class=\"card-title\">{{person.name}}  {{person.age}}</h4>\n    </div>\n  </div>\n</div>\n```\n这样，就可以添加用户，查看用户了。\n","slug":"用Docker和angular5及Koa创建MEAN应用","published":1,"updated":"2018-03-06T04:31:42.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv27m002sh0ur5shwscfs","content":"<p>首先要确保angualr-cli和docker都已经安装完毕。</p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p>创建一个新的angular-cli项目mean-docker/angular-client。</p>\n<p>在angular-client目录下，创建一个Dockerfile，并写入如下内容<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8</span><br><span class=\"line\"># 创建工作目录</span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\"># 切换到工作目录</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"># 拷贝package.json到工作目录</span><br><span class=\"line\">COPY package.json /usr/src/app</span><br><span class=\"line\"># 运行npm install</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"># 拷贝所有source到工作目录</span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\"># 开放4200端口</span><br><span class=\"line\">EXPOSE 4200</span><br><span class=\"line\"># 运行npm start</span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>为了防止node_modules文件夹也被拷贝，可以新建一个.dockeringore文件把它过滤掉。</p>\n<p>为了确保client端由docker image提供host，需要修改package.json中npm start一节为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;ng serve -H 0.0.0.0&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>接下来，build这个镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t angular-client:dev .</span><br></pre></td></tr></table></figure></p>\n<p>bulid好镜像之后，可以使用这个镜像来创建容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name angular-client -p 4200:4200 angular-client:dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p>在mean-docker目录下创建一个koa-server目录。执行npm init命令，新建一个npm 项目。安装koa和koa-router等组件。</p>\n<p>app.js中写入如下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-compose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x-response-time</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">responseTime</span> (<span class=\"params\">ctx, next</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"built_in\">Date</span>.now() - start;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'X-Response-Time'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;ms&#125;</span>ms`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span> (<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"built_in\">Date</span>.now() - start;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;ctx.method&#125;</span> <span class=\"subst\">$&#123;ctx.url&#125;</span> - <span class=\"subst\">$&#123;ms&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> all = compose([</span><br><span class=\"line\">    responseTime,</span><br><span class=\"line\">    logger(),</span><br><span class=\"line\">    router.routes()</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(all);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>router中写入如下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>,  (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'api works'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p>\n<p>在koa-server目录下，创建一个Dockerfile，并写入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:6</span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\">COPY package.json /usr/src/app</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>同样的，也需要添加一个.dockeringore来忽略node_modules。<br>为package.json添加npm start命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;node app.js&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>执行docker build和docker run<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t koa-server:dev .</span><br><span class=\"line\">docker run -d --name koa-server -p 3000:3000 koa-server:dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h2><p>启动一个mongodb容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mongodb -p 27017:27017 mongo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  angular:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">angular-client</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"4200:4200\"</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">  koa:</span> </span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">koa-server</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"3000:3000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  database:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"27017:27017\"</span></span><br></pre></td></tr></table></figure>\n<p>至此，三个容器就创建好了，接下来补充程序中的实质性内容：</p>\n<h2 id=\"server端内容补充\"><a href=\"#server端内容补充\" class=\"headerlink\" title=\"server端内容补充\"></a>server端内容补充</h2><p>首先安装mongoose，为router添加路由和mongoose组件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// User model</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">'mongodb://database/mean-docker'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(db);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = mongoose.model(<span class=\"string\">'User'</span>, userSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/users'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> User.find(&#123;&#125;, (err, users) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = err;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET one users. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/users/:id'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> User.findById(ctx.request.param.id, (err, users) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = err;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Create a user. */</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/users'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">        name: ctx.request.body.name,</span><br><span class=\"line\">        age: ctx.request.body.age</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> user.save(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = error;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                message: <span class=\"string\">'User created successfully'</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>接下来，连接mongodb和koa-server，在docker-compose中koa-server一节增加这样一句：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">database</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"前端内容补充\"><a href=\"#前端内容补充\" class=\"headerlink\" title=\"前端内容补充\"></a>前端内容补充</h2><p>在app.component.ts中添加如下内容：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// Link to our api, pointing to localhost</span></span><br><span class=\"line\">API = <span class=\"string\">'http://localhost:3000'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare empty list of people</span></span><br><span class=\"line\">people: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Angular 2 Life Cycle event when component has been initialized</span></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getAllPeople();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add one person to the API</span></span><br><span class=\"line\">addPerson(name, age) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.http.post(<span class=\"string\">`<span class=\"subst\">$&#123;this.API&#125;</span>/users`</span>, &#123;name, age&#125;)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getAllPeople();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get all users from the API</span></span><br><span class=\"line\">getAllPeople() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.http.get(<span class=\"string\">`<span class=\"subst\">$&#123;this.API&#125;</span>/users`</span>)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">people</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(people)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.people = people</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p>在app.component.html中增加如下内容：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-top.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Add new person<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-inline\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> #<span class=\"attr\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"age\"</span>&gt;</span>Age<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> #<span class=\"attr\">age</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"addPerson(name.value, age.value)\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Add person<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-top.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>People<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-right.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card card-block col-md-3\"</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let person of people\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card-title\"</span>&gt;</span>&#123;&#123;person.name&#125;&#125;  &#123;&#123;person.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样，就可以添加用户，查看用户了。</p>\n","site":{"data":{}},"excerpt":"<p>首先要确保angualr-cli和docker都已经安装完毕。</p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p>创建一个新的angular-cli项目mean-docker/angular-client。</p>\n<p>在angular-client目录下，创建一个Dockerfile，并写入如下内容<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8</span><br><span class=\"line\"># 创建工作目录</span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\"># 切换到工作目录</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"># 拷贝package.json到工作目录</span><br><span class=\"line\">COPY package.json /usr/src/app</span><br><span class=\"line\"># 运行npm install</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"># 拷贝所有source到工作目录</span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\"># 开放4200端口</span><br><span class=\"line\">EXPOSE 4200</span><br><span class=\"line\"># 运行npm start</span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>为了防止node_modules文件夹也被拷贝，可以新建一个.dockeringore文件把它过滤掉。</p>\n<p>为了确保client端由docker image提供host，需要修改package.json中npm start一节为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;ng serve -H 0.0.0.0&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>接下来，build这个镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t angular-client:dev .</span><br></pre></td></tr></table></figure></p>\n<p>bulid好镜像之后，可以使用这个镜像来创建容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name angular-client -p 4200:4200 angular-client:dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p>在mean-docker目录下创建一个koa-server目录。执行npm init命令，新建一个npm 项目。安装koa和koa-router等组件。</p>\n<p>app.js中写入如下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-compose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x-response-time</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">responseTime</span> (<span class=\"params\">ctx, next</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"built_in\">Date</span>.now() - start;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'X-Response-Time'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;ms&#125;</span>ms`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span> (<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"built_in\">Date</span>.now() - start;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;ctx.method&#125;</span> <span class=\"subst\">$&#123;ctx.url&#125;</span> - <span class=\"subst\">$&#123;ms&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> all = compose([</span><br><span class=\"line\">    responseTime,</span><br><span class=\"line\">    logger(),</span><br><span class=\"line\">    router.routes()</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(all);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>router中写入如下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>,  (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'api works'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p>\n<p>在koa-server目录下，创建一个Dockerfile，并写入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:6</span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\">COPY package.json /usr/src/app</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>同样的，也需要添加一个.dockeringore来忽略node_modules。<br>为package.json添加npm start命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;node app.js&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>执行docker build和docker run<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t koa-server:dev .</span><br><span class=\"line\">docker run -d --name koa-server -p 3000:3000 koa-server:dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h2><p>启动一个mongodb容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mongodb -p 27017:27017 mongo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  angular:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">angular-client</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"4200:4200\"</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">  koa:</span> </span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">koa-server</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"3000:3000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  database:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"27017:27017\"</span></span><br></pre></td></tr></table></figure>\n<p>至此，三个容器就创建好了，接下来补充程序中的实质性内容：</p>\n<h2 id=\"server端内容补充\"><a href=\"#server端内容补充\" class=\"headerlink\" title=\"server端内容补充\"></a>server端内容补充</h2><p>首先安装mongoose，为router添加路由和mongoose组件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// User model</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">'mongodb://database/mean-docker'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(db);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = mongoose.model(<span class=\"string\">'User'</span>, userSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/users'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> User.find(&#123;&#125;, (err, users) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = err;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET one users. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/users/:id'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> User.findById(ctx.request.param.id, (err, users) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = err;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Create a user. */</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/users'</span>,<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">        name: ctx.request.body.name,</span><br><span class=\"line\">        age: ctx.request.body.age</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> user.save(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.body = error;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                message: <span class=\"string\">'User created successfully'</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>接下来，连接mongodb和koa-server，在docker-compose中koa-server一节增加这样一句：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">database</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"前端内容补充\"><a href=\"#前端内容补充\" class=\"headerlink\" title=\"前端内容补充\"></a>前端内容补充</h2><p>在app.component.ts中添加如下内容：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// Link to our api, pointing to localhost</span></span><br><span class=\"line\">API = <span class=\"string\">'http://localhost:3000'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare empty list of people</span></span><br><span class=\"line\">people: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Angular 2 Life Cycle event when component has been initialized</span></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getAllPeople();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add one person to the API</span></span><br><span class=\"line\">addPerson(name, age) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.http.post(<span class=\"string\">`<span class=\"subst\">$&#123;this.API&#125;</span>/users`</span>, &#123;name, age&#125;)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getAllPeople();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get all users from the API</span></span><br><span class=\"line\">getAllPeople() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.http.get(<span class=\"string\">`<span class=\"subst\">$&#123;this.API&#125;</span>/users`</span>)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">people</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(people)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.people = people</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p>在app.component.html中增加如下内容：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-top.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Add new person<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-inline\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> #<span class=\"attr\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"age\"</span>&gt;</span>Age<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> #<span class=\"attr\">age</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"addPerson(name.value, age.value)\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Add person<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-top.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>People<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.margin-right.px</span>]=<span class=\"string\">\"10\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card card-block col-md-3\"</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let person of people\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card-title\"</span>&gt;</span>&#123;&#123;person.name&#125;&#125;  &#123;&#123;person.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样，就可以添加用户，查看用户了。</p>"},{"title":"阿里云乞丐版折腾ebookcoin","date":"2017-02-09T16:00:00.000Z","_content":"阿里云除了ECS外，今年还推出了轻量应用服务器。主要用来部署个人应用，小网站后台，我也申请了一个来玩，三个月135元。\n\n大多数云主机，比如aws，都是没有图形画面的，在网页控制台只能使用简陋的交互式终端来操作。\n<!-- more -->\n{% asset_img 2.png 简陋的终端 %}\n\n我的目的是在GUI下，用VSCode调试区块链程序-[Ebookcoin（亿书）](https://github.com/Ebookcoin/ebookcoin)。\n从一无所有的云服务器中建立调试环境，主要有以下几个步骤：\n1. 建立桌面（vncviewer)到云服务器间的连接（vncserver）\n2. 在云服务器上安装，配置GUI环境\n3. 安装git，VSCode等\n\n## 建立桌面（vncviewer)到云服务器间的连接（vncserver）\n首先，要在阿里云防火墙中打开5901和5902端口，否则后面桌面端无法访问。\n\n在远程连接中安装vncserver，执行：\n```\nsudo apt-get update\nsudo apt-get install vnc4server\n```\n然后执行，启动服务，输入访问密码\n```\nvncserver\n```\n在vncviewer中输入公网IP:1即可访问。\n## 在云服务器上安装，配置GUI环境\n阿里云官方推荐的gnome，ubuntu-desktop图形环境很大，对乞丐版20GB的空间太大，所以换成不足300MB的xfce4。\n在远程连接中安装xfce4，执行：\n```\nsudo apt-get install xfce4\n```\n因为要在vncviewer中运行GUI，所以不能简单通过`startx`来运行，需要配置`xstartup`，末尾添加\n```\nsesion-manager & xfdesktop & xfce4-panel &\nxfce4-menu-plugin &\nxfsettingsd &\nxfconfd &\nxfwm4 &\n```\n网上很多文章都说：注释掉`x-window-manager`，但是如果注释掉这一句会导致阿里云浏览器端控制台无法打开，保留并不会影响任何功能。\n\n重新启动vncserver即可。\n```\nvncserver -kill :1\nvncserver\n// 带图形参数启动\nvncserver -geometry 1280x1024 -depth 16:1\n```\nvncviewer重新连接，xfce4就出来了。\n\n{% asset_img 1.png xfce4桌面 %}\n\nxfce4默认情况下，两个问题的解决方法：\n1. `Tab`失效：修改快捷键设置-Switch window for same application\n2. `sudo`时消除`unable to resolve host`，在host内增加阿里云主机名，也就是那一长串英文\n## 安装git，安装vscode\n```\nsudo apt-get install git\nwget https://vscode.cdn.azure.cn/stable/0759f77bb8d86658bc935a10a64f6182c5a1eeba/code_1.19.1-1513676564_amd64.deb\nsudo dpkg -i code_1.19.1-1513676564_amd64.deb\n```\nVSCode无法启动时，根据github讨论的结果，可以使用如下方法：\n```\nsudo sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/share/code/libxcb.so.1\nsudo sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/share/code/libxcb.so.1.1.0\n```\n{% asset_img 3.png vscode无法启动的解决讨论 %}\n## 调试ebookcoin\n现在，基本工具已经具备，开始安装调试工具。\n1. 安装nodejs到桌面文件夹apps中\n```\nwget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz\nxz -d node-v8.9.3-linux-x64.tar.xz\nmkdir apps\ntar -xvf node-v8.9.3-linux-x64.tar\nmv node-v8.9.3-linux-x64 node\nmv node apps\n// 添加path\nexport NODE_HOME=/home/admin/Desktop/node\nexport PATH=$PATH:$NODE_HOME/bin \nexport NODE_PATH=$NODE_HOME/lib/node_modules\n// /root/.bashrc内添加生效\nsource /etc/profile\n```\n2. Clone代码\n```\ngit clone https://github.com/Ebookcoin/ebookcoin.git\n// 使用SSH连接github后，clone submodule\ngit submodule init\ngit submodule update\n```\n3. 构建代码\n```\n// 安装依赖包\ncd ebookcoin\nnpm install\n// 全局安装 grunt-cli:\nnpm install grunt-cli -g\n// 全局安装 bower:\nnpm install bower -g\n// 构建前台\ncd public\nnpm install\nbower install\ngrunt release\n```\n4. 运行\n直接在app.js中进行vscode debug，区块链程序已经跑起来了。\n","source":"_posts/阿里云乞丐版折腾ebookcoin.md","raw":"---\ntitle: 阿里云乞丐版折腾ebookcoin\ndate: 2017-2-10\ncategories:\n- 后端\n- 区块链\ntags:\n- 后端\n- 区块链\n- nodejs\n- ebookcoin\n---\n阿里云除了ECS外，今年还推出了轻量应用服务器。主要用来部署个人应用，小网站后台，我也申请了一个来玩，三个月135元。\n\n大多数云主机，比如aws，都是没有图形画面的，在网页控制台只能使用简陋的交互式终端来操作。\n<!-- more -->\n{% asset_img 2.png 简陋的终端 %}\n\n我的目的是在GUI下，用VSCode调试区块链程序-[Ebookcoin（亿书）](https://github.com/Ebookcoin/ebookcoin)。\n从一无所有的云服务器中建立调试环境，主要有以下几个步骤：\n1. 建立桌面（vncviewer)到云服务器间的连接（vncserver）\n2. 在云服务器上安装，配置GUI环境\n3. 安装git，VSCode等\n\n## 建立桌面（vncviewer)到云服务器间的连接（vncserver）\n首先，要在阿里云防火墙中打开5901和5902端口，否则后面桌面端无法访问。\n\n在远程连接中安装vncserver，执行：\n```\nsudo apt-get update\nsudo apt-get install vnc4server\n```\n然后执行，启动服务，输入访问密码\n```\nvncserver\n```\n在vncviewer中输入公网IP:1即可访问。\n## 在云服务器上安装，配置GUI环境\n阿里云官方推荐的gnome，ubuntu-desktop图形环境很大，对乞丐版20GB的空间太大，所以换成不足300MB的xfce4。\n在远程连接中安装xfce4，执行：\n```\nsudo apt-get install xfce4\n```\n因为要在vncviewer中运行GUI，所以不能简单通过`startx`来运行，需要配置`xstartup`，末尾添加\n```\nsesion-manager & xfdesktop & xfce4-panel &\nxfce4-menu-plugin &\nxfsettingsd &\nxfconfd &\nxfwm4 &\n```\n网上很多文章都说：注释掉`x-window-manager`，但是如果注释掉这一句会导致阿里云浏览器端控制台无法打开，保留并不会影响任何功能。\n\n重新启动vncserver即可。\n```\nvncserver -kill :1\nvncserver\n// 带图形参数启动\nvncserver -geometry 1280x1024 -depth 16:1\n```\nvncviewer重新连接，xfce4就出来了。\n\n{% asset_img 1.png xfce4桌面 %}\n\nxfce4默认情况下，两个问题的解决方法：\n1. `Tab`失效：修改快捷键设置-Switch window for same application\n2. `sudo`时消除`unable to resolve host`，在host内增加阿里云主机名，也就是那一长串英文\n## 安装git，安装vscode\n```\nsudo apt-get install git\nwget https://vscode.cdn.azure.cn/stable/0759f77bb8d86658bc935a10a64f6182c5a1eeba/code_1.19.1-1513676564_amd64.deb\nsudo dpkg -i code_1.19.1-1513676564_amd64.deb\n```\nVSCode无法启动时，根据github讨论的结果，可以使用如下方法：\n```\nsudo sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/share/code/libxcb.so.1\nsudo sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/share/code/libxcb.so.1.1.0\n```\n{% asset_img 3.png vscode无法启动的解决讨论 %}\n## 调试ebookcoin\n现在，基本工具已经具备，开始安装调试工具。\n1. 安装nodejs到桌面文件夹apps中\n```\nwget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz\nxz -d node-v8.9.3-linux-x64.tar.xz\nmkdir apps\ntar -xvf node-v8.9.3-linux-x64.tar\nmv node-v8.9.3-linux-x64 node\nmv node apps\n// 添加path\nexport NODE_HOME=/home/admin/Desktop/node\nexport PATH=$PATH:$NODE_HOME/bin \nexport NODE_PATH=$NODE_HOME/lib/node_modules\n// /root/.bashrc内添加生效\nsource /etc/profile\n```\n2. Clone代码\n```\ngit clone https://github.com/Ebookcoin/ebookcoin.git\n// 使用SSH连接github后，clone submodule\ngit submodule init\ngit submodule update\n```\n3. 构建代码\n```\n// 安装依赖包\ncd ebookcoin\nnpm install\n// 全局安装 grunt-cli:\nnpm install grunt-cli -g\n// 全局安装 bower:\nnpm install bower -g\n// 构建前台\ncd public\nnpm install\nbower install\ngrunt release\n```\n4. 运行\n直接在app.js中进行vscode debug，区块链程序已经跑起来了。\n","slug":"阿里云乞丐版折腾ebookcoin","published":1,"updated":"2019-04-08T05:40:46.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv27o002wh0urq0xg4ejl","content":"<p>阿里云除了ECS外，今年还推出了轻量应用服务器。主要用来部署个人应用，小网站后台，我也申请了一个来玩，三个月135元。</p>\n<p>大多数云主机，比如aws，都是没有图形画面的，在网页控制台只能使用简陋的交互式终端来操作。<br><a id=\"more\"></a><br><img src=\"/2017/02/10/阿里云乞丐版折腾ebookcoin/2.png\" title=\"简陋的终端\"></p>\n<p>我的目的是在GUI下，用VSCode调试区块链程序-<a href=\"https://github.com/Ebookcoin/ebookcoin\" target=\"_blank\" rel=\"noopener\">Ebookcoin（亿书）</a>。<br>从一无所有的云服务器中建立调试环境，主要有以下几个步骤：</p>\n<ol>\n<li>建立桌面（vncviewer)到云服务器间的连接（vncserver）</li>\n<li>在云服务器上安装，配置GUI环境</li>\n<li>安装git，VSCode等</li>\n</ol>\n<h2 id=\"建立桌面（vncviewer-到云服务器间的连接（vncserver）\"><a href=\"#建立桌面（vncviewer-到云服务器间的连接（vncserver）\" class=\"headerlink\" title=\"建立桌面（vncviewer)到云服务器间的连接（vncserver）\"></a>建立桌面（vncviewer)到云服务器间的连接（vncserver）</h2><p>首先，要在阿里云防火墙中打开5901和5902端口，否则后面桌面端无法访问。</p>\n<p>在远程连接中安装vncserver，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install vnc4server</span><br></pre></td></tr></table></figure></p>\n<p>然后执行，启动服务，输入访问密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver</span><br></pre></td></tr></table></figure></p>\n<p>在vncviewer中输入公网IP:1即可访问。</p>\n<h2 id=\"在云服务器上安装，配置GUI环境\"><a href=\"#在云服务器上安装，配置GUI环境\" class=\"headerlink\" title=\"在云服务器上安装，配置GUI环境\"></a>在云服务器上安装，配置GUI环境</h2><p>阿里云官方推荐的gnome，ubuntu-desktop图形环境很大，对乞丐版20GB的空间太大，所以换成不足300MB的xfce4。<br>在远程连接中安装xfce4，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xfce4</span><br></pre></td></tr></table></figure></p>\n<p>因为要在vncviewer中运行GUI，所以不能简单通过<code>startx</code>来运行，需要配置<code>xstartup</code>，末尾添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;</span><br><span class=\"line\">xfce4-menu-plugin &amp;</span><br><span class=\"line\">xfsettingsd &amp;</span><br><span class=\"line\">xfconfd &amp;</span><br><span class=\"line\">xfwm4 &amp;</span><br></pre></td></tr></table></figure></p>\n<p>网上很多文章都说：注释掉<code>x-window-manager</code>，但是如果注释掉这一句会导致阿里云浏览器端控制台无法打开，保留并不会影响任何功能。</p>\n<p>重新启动vncserver即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver -kill :1</span><br><span class=\"line\">vncserver</span><br><span class=\"line\">// 带图形参数启动</span><br><span class=\"line\">vncserver -geometry 1280x1024 -depth 16:1</span><br></pre></td></tr></table></figure></p>\n<p>vncviewer重新连接，xfce4就出来了。</p>\n<img src=\"/2017/02/10/阿里云乞丐版折腾ebookcoin/1.png\" title=\"xfce4桌面\">\n<p>xfce4默认情况下，两个问题的解决方法：</p>\n<ol>\n<li><code>Tab</code>失效：修改快捷键设置-Switch window for same application</li>\n<li><code>sudo</code>时消除<code>unable to resolve host</code>，在host内增加阿里云主机名，也就是那一长串英文<h2 id=\"安装git，安装vscode\"><a href=\"#安装git，安装vscode\" class=\"headerlink\" title=\"安装git，安装vscode\"></a>安装git，安装vscode</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">wget https://vscode.cdn.azure.cn/stable/0759f77bb8d86658bc935a10a64f6182c5a1eeba/code_1.19.1-1513676564_amd64.deb</span><br><span class=\"line\">sudo dpkg -i code_1.19.1-1513676564_amd64.deb</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>VSCode无法启动时，根据github讨论的结果，可以使用如下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sed -i &apos;s/BIG-REQUESTS/_IG-REQUESTS/&apos; /usr/share/code/libxcb.so.1</span><br><span class=\"line\">sudo sed -i &apos;s/BIG-REQUESTS/_IG-REQUESTS/&apos; /usr/share/code/libxcb.so.1.1.0</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2017/02/10/阿里云乞丐版折腾ebookcoin/3.png\" title=\"vscode无法启动的解决讨论\">\n<h2 id=\"调试ebookcoin\"><a href=\"#调试ebookcoin\" class=\"headerlink\" title=\"调试ebookcoin\"></a>调试ebookcoin</h2><p>现在，基本工具已经具备，开始安装调试工具。</p>\n<ol>\n<li><p>安装nodejs到桌面文件夹apps中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">xz -d node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">mkdir apps</span><br><span class=\"line\">tar -xvf node-v8.9.3-linux-x64.tar</span><br><span class=\"line\">mv node-v8.9.3-linux-x64 node</span><br><span class=\"line\">mv node apps</span><br><span class=\"line\">// 添加path</span><br><span class=\"line\">export NODE_HOME=/home/admin/Desktop/node</span><br><span class=\"line\">export PATH=$PATH:$NODE_HOME/bin </span><br><span class=\"line\">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class=\"line\">// /root/.bashrc内添加生效</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Clone代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Ebookcoin/ebookcoin.git</span><br><span class=\"line\">// 使用SSH连接github后，clone submodule</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构建代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装依赖包</span><br><span class=\"line\">cd ebookcoin</span><br><span class=\"line\">npm install</span><br><span class=\"line\">// 全局安装 grunt-cli:</span><br><span class=\"line\">npm install grunt-cli -g</span><br><span class=\"line\">// 全局安装 bower:</span><br><span class=\"line\">npm install bower -g</span><br><span class=\"line\">// 构建前台</span><br><span class=\"line\">cd public</span><br><span class=\"line\">npm install</span><br><span class=\"line\">bower install</span><br><span class=\"line\">grunt release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行<br>直接在app.js中进行vscode debug，区块链程序已经跑起来了。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>阿里云除了ECS外，今年还推出了轻量应用服务器。主要用来部署个人应用，小网站后台，我也申请了一个来玩，三个月135元。</p>\n<p>大多数云主机，比如aws，都是没有图形画面的，在网页控制台只能使用简陋的交互式终端来操作。<br>","more":"<br><img src=\"/2017/02/10/阿里云乞丐版折腾ebookcoin/2.png\" title=\"简陋的终端\"></p>\n<p>我的目的是在GUI下，用VSCode调试区块链程序-<a href=\"https://github.com/Ebookcoin/ebookcoin\" target=\"_blank\" rel=\"noopener\">Ebookcoin（亿书）</a>。<br>从一无所有的云服务器中建立调试环境，主要有以下几个步骤：</p>\n<ol>\n<li>建立桌面（vncviewer)到云服务器间的连接（vncserver）</li>\n<li>在云服务器上安装，配置GUI环境</li>\n<li>安装git，VSCode等</li>\n</ol>\n<h2 id=\"建立桌面（vncviewer-到云服务器间的连接（vncserver）\"><a href=\"#建立桌面（vncviewer-到云服务器间的连接（vncserver）\" class=\"headerlink\" title=\"建立桌面（vncviewer)到云服务器间的连接（vncserver）\"></a>建立桌面（vncviewer)到云服务器间的连接（vncserver）</h2><p>首先，要在阿里云防火墙中打开5901和5902端口，否则后面桌面端无法访问。</p>\n<p>在远程连接中安装vncserver，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install vnc4server</span><br></pre></td></tr></table></figure></p>\n<p>然后执行，启动服务，输入访问密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver</span><br></pre></td></tr></table></figure></p>\n<p>在vncviewer中输入公网IP:1即可访问。</p>\n<h2 id=\"在云服务器上安装，配置GUI环境\"><a href=\"#在云服务器上安装，配置GUI环境\" class=\"headerlink\" title=\"在云服务器上安装，配置GUI环境\"></a>在云服务器上安装，配置GUI环境</h2><p>阿里云官方推荐的gnome，ubuntu-desktop图形环境很大，对乞丐版20GB的空间太大，所以换成不足300MB的xfce4。<br>在远程连接中安装xfce4，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xfce4</span><br></pre></td></tr></table></figure></p>\n<p>因为要在vncviewer中运行GUI，所以不能简单通过<code>startx</code>来运行，需要配置<code>xstartup</code>，末尾添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;</span><br><span class=\"line\">xfce4-menu-plugin &amp;</span><br><span class=\"line\">xfsettingsd &amp;</span><br><span class=\"line\">xfconfd &amp;</span><br><span class=\"line\">xfwm4 &amp;</span><br></pre></td></tr></table></figure></p>\n<p>网上很多文章都说：注释掉<code>x-window-manager</code>，但是如果注释掉这一句会导致阿里云浏览器端控制台无法打开，保留并不会影响任何功能。</p>\n<p>重新启动vncserver即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver -kill :1</span><br><span class=\"line\">vncserver</span><br><span class=\"line\">// 带图形参数启动</span><br><span class=\"line\">vncserver -geometry 1280x1024 -depth 16:1</span><br></pre></td></tr></table></figure></p>\n<p>vncviewer重新连接，xfce4就出来了。</p>\n<img src=\"/2017/02/10/阿里云乞丐版折腾ebookcoin/1.png\" title=\"xfce4桌面\">\n<p>xfce4默认情况下，两个问题的解决方法：</p>\n<ol>\n<li><code>Tab</code>失效：修改快捷键设置-Switch window for same application</li>\n<li><code>sudo</code>时消除<code>unable to resolve host</code>，在host内增加阿里云主机名，也就是那一长串英文<h2 id=\"安装git，安装vscode\"><a href=\"#安装git，安装vscode\" class=\"headerlink\" title=\"安装git，安装vscode\"></a>安装git，安装vscode</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">wget https://vscode.cdn.azure.cn/stable/0759f77bb8d86658bc935a10a64f6182c5a1eeba/code_1.19.1-1513676564_amd64.deb</span><br><span class=\"line\">sudo dpkg -i code_1.19.1-1513676564_amd64.deb</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>VSCode无法启动时，根据github讨论的结果，可以使用如下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sed -i &apos;s/BIG-REQUESTS/_IG-REQUESTS/&apos; /usr/share/code/libxcb.so.1</span><br><span class=\"line\">sudo sed -i &apos;s/BIG-REQUESTS/_IG-REQUESTS/&apos; /usr/share/code/libxcb.so.1.1.0</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2017/02/10/阿里云乞丐版折腾ebookcoin/3.png\" title=\"vscode无法启动的解决讨论\">\n<h2 id=\"调试ebookcoin\"><a href=\"#调试ebookcoin\" class=\"headerlink\" title=\"调试ebookcoin\"></a>调试ebookcoin</h2><p>现在，基本工具已经具备，开始安装调试工具。</p>\n<ol>\n<li><p>安装nodejs到桌面文件夹apps中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">xz -d node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">mkdir apps</span><br><span class=\"line\">tar -xvf node-v8.9.3-linux-x64.tar</span><br><span class=\"line\">mv node-v8.9.3-linux-x64 node</span><br><span class=\"line\">mv node apps</span><br><span class=\"line\">// 添加path</span><br><span class=\"line\">export NODE_HOME=/home/admin/Desktop/node</span><br><span class=\"line\">export PATH=$PATH:$NODE_HOME/bin </span><br><span class=\"line\">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class=\"line\">// /root/.bashrc内添加生效</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Clone代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Ebookcoin/ebookcoin.git</span><br><span class=\"line\">// 使用SSH连接github后，clone submodule</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构建代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装依赖包</span><br><span class=\"line\">cd ebookcoin</span><br><span class=\"line\">npm install</span><br><span class=\"line\">// 全局安装 grunt-cli:</span><br><span class=\"line\">npm install grunt-cli -g</span><br><span class=\"line\">// 全局安装 bower:</span><br><span class=\"line\">npm install bower -g</span><br><span class=\"line\">// 构建前台</span><br><span class=\"line\">cd public</span><br><span class=\"line\">npm install</span><br><span class=\"line\">bower install</span><br><span class=\"line\">grunt release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行<br>直接在app.js中进行vscode debug，区块链程序已经跑起来了。</p>\n</li>\n</ol>"},{"title":"真正理解nodejs中的EventLoop","date":"2016-05-31T16:00:00.000Z","_content":"nodejs是基于的事件的平台。这意味着node中发生的一切都是对事件的反应。事务通过node遍历一个级联的回调。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。\n\n远离开发层面，这些功能都是由一个叫做libuv的库提供的。\n\nEventloop可能是nodejs中最被人所误解的一个概念。\n<!-- more -->\n## 一般的错误认识\n### 错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中\n\n- 错误：eventloop运行于一个相对独立于用户代码的线程中。有一个专门运行eventloop的线程，同时有一个运行用户代码的主线程。每当有异步操作时，主线程将工作交给事件循环线程，一旦完成，事件循环线程将ping主线程执行回调。\n- 正确：只有一个线程执行JavaScript代码，这是事件循环运行的线程。回调函数的执行（Node.js中每个用户的代码都是一个回调）是由事件循环做。稍后会更深入地讨论这个问题。\n\n### 错误认识：异步操作由一个线程池处理\n\n- 错误：异步操作，如IO工作，HTTP请求或与数据库总是由libuv线程池来装载。\n- 正确：libuv默认情况下创建一个有四个线程的线程池线来加载异步工作。今天的操作系统已经为许多I/O任务提供异步接口。只要有可能，libuv将使用这些异步接口，避免线程池的使用。这同样适用于像数据库这样的第三方子系统。驱动程序的作者宁愿使用异步接口，也不愿意使用线程池。简言之：只有在没有其他方法的情况下，线程池才会被用于异步I/O。\n\n### 错误认识：eventloop就像栈或队列\n\n- 错误：事件循环按FIFO不断地遍历异步任务，并在任务完成时执行回调。\n- 虽然有类似队列的结构，但事件循环并没有完全类似于栈。事件循环作为一个过程，是一组由特定任务组成的按循环方式处理的过程。\n\n## 理解事件循环处理过程\n\n要真正理解事件循环，我们必须了解哪些工作是在哪个阶段完成的。下图展示了这一过程：\n\n\n这一过程由以下几个部分组成：\n\n### 计时器\n任何由setTimeout()或setInerval()定时的操作都会在这里执行。\n### IO回调\n这里大部分的回调函数将被处理。所有的用户代码在Node.js基本上是在回调（例如一个回调函数传入的HTTP请求会触发一个级联的回调），这是用户的代码。\n### IO轮询\n对下一次运行将要处理的新事件的轮询。\n有两个主要方法：\n- 执行下限时间已经达到的timers的回调\n- 处理poll队列中的事件\n\n当事件循环进入poll阶段，并且没有timers被设定时，将发生两种情况之一：\n\n- 如果poll队列不空，事件循环将遍历其回调执行同步直到队列中的回调都被调用，或者达到系统上限。\n- 如果poll队列是空的，那么两个事件中的一个将会发生：\n- - 如果脚本被setImmdiate()定时器定时，eventloop将会结束poll阶段，并进入下一个阶段\n- - 如果代码不被setimmediate()定时器定时，事件循环会等待回调被添加到队列中，然后立刻执行它们。\n\n如果poll队列为空，eventloop将会检查哪些timers的已经到期。如果有一个或多个timer到期，eventloop将会回到timers阶段去执行回调。\n\n### Set Immediate\n运行所有由setImmediate()发起的操作。\n### Close\n这里是所有的(close)事件回调的处理。\n\n例如有以下代码：\n``` javascript\nconst fs = require('fs');\n\nfunction someAsyncOperation(callback) {\n  // 假设需要95ms\n  fs.readFile('/path/to/file', callback);\n}\n\nconst timeoutScheduled = Date.now();\n\nsetTimeout(() => {\n  const delay = Date.now() - timeoutScheduled;\n\n  console.log(`${delay}ms have passed since I was scheduled`);\n}, 100);\n\nsomeAsyncOperation(() => {\n  const startCallback = Date.now();\n  \n  while (Date.now() - startCallback < 10) {\n    // do nothing\n  }\n});\n```\nconsole最终的输出为105毫秒，它的过程是这样的：\n1. 当eventloop来到poll阶段时，它的队列为空，因为此时readFile还没有结束。所以它将等待最新的timer到期。\n2. 95ms后，readFile结束，callback执行还需要另外的10ms。\n3. callback执行结束，因为队列中已经没有了其他的callback,它将回到timers阶段，setTimeOut()执行callback，得到105ms。\n\n","source":"_posts/真正理解nodejs中的EventLoop.md","raw":"---\ntitle: 真正理解nodejs中的EventLoop\ndate: 2016-6-1\ncategories:\n- 前端\n- nodejs\ntags:\n- 前端\n- javascript\n- nodejs\n- eventloop\n---\nnodejs是基于的事件的平台。这意味着node中发生的一切都是对事件的反应。事务通过node遍历一个级联的回调。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。\n\n远离开发层面，这些功能都是由一个叫做libuv的库提供的。\n\nEventloop可能是nodejs中最被人所误解的一个概念。\n<!-- more -->\n## 一般的错误认识\n### 错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中\n\n- 错误：eventloop运行于一个相对独立于用户代码的线程中。有一个专门运行eventloop的线程，同时有一个运行用户代码的主线程。每当有异步操作时，主线程将工作交给事件循环线程，一旦完成，事件循环线程将ping主线程执行回调。\n- 正确：只有一个线程执行JavaScript代码，这是事件循环运行的线程。回调函数的执行（Node.js中每个用户的代码都是一个回调）是由事件循环做。稍后会更深入地讨论这个问题。\n\n### 错误认识：异步操作由一个线程池处理\n\n- 错误：异步操作，如IO工作，HTTP请求或与数据库总是由libuv线程池来装载。\n- 正确：libuv默认情况下创建一个有四个线程的线程池线来加载异步工作。今天的操作系统已经为许多I/O任务提供异步接口。只要有可能，libuv将使用这些异步接口，避免线程池的使用。这同样适用于像数据库这样的第三方子系统。驱动程序的作者宁愿使用异步接口，也不愿意使用线程池。简言之：只有在没有其他方法的情况下，线程池才会被用于异步I/O。\n\n### 错误认识：eventloop就像栈或队列\n\n- 错误：事件循环按FIFO不断地遍历异步任务，并在任务完成时执行回调。\n- 虽然有类似队列的结构，但事件循环并没有完全类似于栈。事件循环作为一个过程，是一组由特定任务组成的按循环方式处理的过程。\n\n## 理解事件循环处理过程\n\n要真正理解事件循环，我们必须了解哪些工作是在哪个阶段完成的。下图展示了这一过程：\n\n\n这一过程由以下几个部分组成：\n\n### 计时器\n任何由setTimeout()或setInerval()定时的操作都会在这里执行。\n### IO回调\n这里大部分的回调函数将被处理。所有的用户代码在Node.js基本上是在回调（例如一个回调函数传入的HTTP请求会触发一个级联的回调），这是用户的代码。\n### IO轮询\n对下一次运行将要处理的新事件的轮询。\n有两个主要方法：\n- 执行下限时间已经达到的timers的回调\n- 处理poll队列中的事件\n\n当事件循环进入poll阶段，并且没有timers被设定时，将发生两种情况之一：\n\n- 如果poll队列不空，事件循环将遍历其回调执行同步直到队列中的回调都被调用，或者达到系统上限。\n- 如果poll队列是空的，那么两个事件中的一个将会发生：\n- - 如果脚本被setImmdiate()定时器定时，eventloop将会结束poll阶段，并进入下一个阶段\n- - 如果代码不被setimmediate()定时器定时，事件循环会等待回调被添加到队列中，然后立刻执行它们。\n\n如果poll队列为空，eventloop将会检查哪些timers的已经到期。如果有一个或多个timer到期，eventloop将会回到timers阶段去执行回调。\n\n### Set Immediate\n运行所有由setImmediate()发起的操作。\n### Close\n这里是所有的(close)事件回调的处理。\n\n例如有以下代码：\n``` javascript\nconst fs = require('fs');\n\nfunction someAsyncOperation(callback) {\n  // 假设需要95ms\n  fs.readFile('/path/to/file', callback);\n}\n\nconst timeoutScheduled = Date.now();\n\nsetTimeout(() => {\n  const delay = Date.now() - timeoutScheduled;\n\n  console.log(`${delay}ms have passed since I was scheduled`);\n}, 100);\n\nsomeAsyncOperation(() => {\n  const startCallback = Date.now();\n  \n  while (Date.now() - startCallback < 10) {\n    // do nothing\n  }\n});\n```\nconsole最终的输出为105毫秒，它的过程是这样的：\n1. 当eventloop来到poll阶段时，它的队列为空，因为此时readFile还没有结束。所以它将等待最新的timer到期。\n2. 95ms后，readFile结束，callback执行还需要另外的10ms。\n3. callback执行结束，因为队列中已经没有了其他的callback,它将回到timers阶段，setTimeOut()执行callback，得到105ms。\n\n","slug":"真正理解nodejs中的EventLoop","published":1,"updated":"2018-02-28T07:52:20.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv27r002zh0ur2tctgtfu","content":"<p>nodejs是基于的事件的平台。这意味着node中发生的一切都是对事件的反应。事务通过node遍历一个级联的回调。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。</p>\n<p>远离开发层面，这些功能都是由一个叫做libuv的库提供的。</p>\n<p>Eventloop可能是nodejs中最被人所误解的一个概念。<br><a id=\"more\"></a></p>\n<h2 id=\"一般的错误认识\"><a href=\"#一般的错误认识\" class=\"headerlink\" title=\"一般的错误认识\"></a>一般的错误认识</h2><h3 id=\"错误认识-eventloop运行于一个单独的相对独立于用户代码的线程中\"><a href=\"#错误认识-eventloop运行于一个单独的相对独立于用户代码的线程中\" class=\"headerlink\" title=\"错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中\"></a>错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中</h3><ul>\n<li>错误：eventloop运行于一个相对独立于用户代码的线程中。有一个专门运行eventloop的线程，同时有一个运行用户代码的主线程。每当有异步操作时，主线程将工作交给事件循环线程，一旦完成，事件循环线程将ping主线程执行回调。</li>\n<li>正确：只有一个线程执行JavaScript代码，这是事件循环运行的线程。回调函数的执行（Node.js中每个用户的代码都是一个回调）是由事件循环做。稍后会更深入地讨论这个问题。</li>\n</ul>\n<h3 id=\"错误认识：异步操作由一个线程池处理\"><a href=\"#错误认识：异步操作由一个线程池处理\" class=\"headerlink\" title=\"错误认识：异步操作由一个线程池处理\"></a>错误认识：异步操作由一个线程池处理</h3><ul>\n<li>错误：异步操作，如IO工作，HTTP请求或与数据库总是由libuv线程池来装载。</li>\n<li>正确：libuv默认情况下创建一个有四个线程的线程池线来加载异步工作。今天的操作系统已经为许多I/O任务提供异步接口。只要有可能，libuv将使用这些异步接口，避免线程池的使用。这同样适用于像数据库这样的第三方子系统。驱动程序的作者宁愿使用异步接口，也不愿意使用线程池。简言之：只有在没有其他方法的情况下，线程池才会被用于异步I/O。</li>\n</ul>\n<h3 id=\"错误认识：eventloop就像栈或队列\"><a href=\"#错误认识：eventloop就像栈或队列\" class=\"headerlink\" title=\"错误认识：eventloop就像栈或队列\"></a>错误认识：eventloop就像栈或队列</h3><ul>\n<li>错误：事件循环按FIFO不断地遍历异步任务，并在任务完成时执行回调。</li>\n<li>虽然有类似队列的结构，但事件循环并没有完全类似于栈。事件循环作为一个过程，是一组由特定任务组成的按循环方式处理的过程。</li>\n</ul>\n<h2 id=\"理解事件循环处理过程\"><a href=\"#理解事件循环处理过程\" class=\"headerlink\" title=\"理解事件循环处理过程\"></a>理解事件循环处理过程</h2><p>要真正理解事件循环，我们必须了解哪些工作是在哪个阶段完成的。下图展示了这一过程：</p>\n<p>这一过程由以下几个部分组成：</p>\n<h3 id=\"计时器\"><a href=\"#计时器\" class=\"headerlink\" title=\"计时器\"></a>计时器</h3><p>任何由setTimeout()或setInerval()定时的操作都会在这里执行。</p>\n<h3 id=\"IO回调\"><a href=\"#IO回调\" class=\"headerlink\" title=\"IO回调\"></a>IO回调</h3><p>这里大部分的回调函数将被处理。所有的用户代码在Node.js基本上是在回调（例如一个回调函数传入的HTTP请求会触发一个级联的回调），这是用户的代码。</p>\n<h3 id=\"IO轮询\"><a href=\"#IO轮询\" class=\"headerlink\" title=\"IO轮询\"></a>IO轮询</h3><p>对下一次运行将要处理的新事件的轮询。<br>有两个主要方法：</p>\n<ul>\n<li>执行下限时间已经达到的timers的回调</li>\n<li>处理poll队列中的事件</li>\n</ul>\n<p>当事件循环进入poll阶段，并且没有timers被设定时，将发生两种情况之一：</p>\n<ul>\n<li>如果poll队列不空，事件循环将遍历其回调执行同步直到队列中的回调都被调用，或者达到系统上限。</li>\n<li>如果poll队列是空的，那么两个事件中的一个将会发生：</li>\n<li><ul>\n<li>如果脚本被setImmdiate()定时器定时，eventloop将会结束poll阶段，并进入下一个阶段</li>\n</ul>\n</li>\n<li><ul>\n<li>如果代码不被setimmediate()定时器定时，事件循环会等待回调被添加到队列中，然后立刻执行它们。</li>\n</ul>\n</li>\n</ul>\n<p>如果poll队列为空，eventloop将会检查哪些timers的已经到期。如果有一个或多个timer到期，eventloop将会回到timers阶段去执行回调。</p>\n<h3 id=\"Set-Immediate\"><a href=\"#Set-Immediate\" class=\"headerlink\" title=\"Set Immediate\"></a>Set Immediate</h3><p>运行所有由setImmediate()发起的操作。</p>\n<h3 id=\"Close\"><a href=\"#Close\" class=\"headerlink\" title=\"Close\"></a>Close</h3><p>这里是所有的(close)事件回调的处理。</p>\n<p>例如有以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncOperation</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设需要95ms</span></span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'/path/to/file'</span>, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeoutScheduled = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> delay = <span class=\"built_in\">Date</span>.now() - timeoutScheduled;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;delay&#125;</span>ms have passed since I was scheduled`</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">someAsyncOperation(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startCallback = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">Date</span>.now() - startCallback &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>console最终的输出为105毫秒，它的过程是这样的：</p>\n<ol>\n<li>当eventloop来到poll阶段时，它的队列为空，因为此时readFile还没有结束。所以它将等待最新的timer到期。</li>\n<li>95ms后，readFile结束，callback执行还需要另外的10ms。</li>\n<li>callback执行结束，因为队列中已经没有了其他的callback,它将回到timers阶段，setTimeOut()执行callback，得到105ms。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>nodejs是基于的事件的平台。这意味着node中发生的一切都是对事件的反应。事务通过node遍历一个级联的回调。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。</p>\n<p>远离开发层面，这些功能都是由一个叫做libuv的库提供的。</p>\n<p>Eventloop可能是nodejs中最被人所误解的一个概念。<br>","more":"</p>\n<h2 id=\"一般的错误认识\"><a href=\"#一般的错误认识\" class=\"headerlink\" title=\"一般的错误认识\"></a>一般的错误认识</h2><h3 id=\"错误认识-eventloop运行于一个单独的相对独立于用户代码的线程中\"><a href=\"#错误认识-eventloop运行于一个单独的相对独立于用户代码的线程中\" class=\"headerlink\" title=\"错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中\"></a>错误认识: eventloop运行于一个单独的相对独立于用户代码的线程中</h3><ul>\n<li>错误：eventloop运行于一个相对独立于用户代码的线程中。有一个专门运行eventloop的线程，同时有一个运行用户代码的主线程。每当有异步操作时，主线程将工作交给事件循环线程，一旦完成，事件循环线程将ping主线程执行回调。</li>\n<li>正确：只有一个线程执行JavaScript代码，这是事件循环运行的线程。回调函数的执行（Node.js中每个用户的代码都是一个回调）是由事件循环做。稍后会更深入地讨论这个问题。</li>\n</ul>\n<h3 id=\"错误认识：异步操作由一个线程池处理\"><a href=\"#错误认识：异步操作由一个线程池处理\" class=\"headerlink\" title=\"错误认识：异步操作由一个线程池处理\"></a>错误认识：异步操作由一个线程池处理</h3><ul>\n<li>错误：异步操作，如IO工作，HTTP请求或与数据库总是由libuv线程池来装载。</li>\n<li>正确：libuv默认情况下创建一个有四个线程的线程池线来加载异步工作。今天的操作系统已经为许多I/O任务提供异步接口。只要有可能，libuv将使用这些异步接口，避免线程池的使用。这同样适用于像数据库这样的第三方子系统。驱动程序的作者宁愿使用异步接口，也不愿意使用线程池。简言之：只有在没有其他方法的情况下，线程池才会被用于异步I/O。</li>\n</ul>\n<h3 id=\"错误认识：eventloop就像栈或队列\"><a href=\"#错误认识：eventloop就像栈或队列\" class=\"headerlink\" title=\"错误认识：eventloop就像栈或队列\"></a>错误认识：eventloop就像栈或队列</h3><ul>\n<li>错误：事件循环按FIFO不断地遍历异步任务，并在任务完成时执行回调。</li>\n<li>虽然有类似队列的结构，但事件循环并没有完全类似于栈。事件循环作为一个过程，是一组由特定任务组成的按循环方式处理的过程。</li>\n</ul>\n<h2 id=\"理解事件循环处理过程\"><a href=\"#理解事件循环处理过程\" class=\"headerlink\" title=\"理解事件循环处理过程\"></a>理解事件循环处理过程</h2><p>要真正理解事件循环，我们必须了解哪些工作是在哪个阶段完成的。下图展示了这一过程：</p>\n<p>这一过程由以下几个部分组成：</p>\n<h3 id=\"计时器\"><a href=\"#计时器\" class=\"headerlink\" title=\"计时器\"></a>计时器</h3><p>任何由setTimeout()或setInerval()定时的操作都会在这里执行。</p>\n<h3 id=\"IO回调\"><a href=\"#IO回调\" class=\"headerlink\" title=\"IO回调\"></a>IO回调</h3><p>这里大部分的回调函数将被处理。所有的用户代码在Node.js基本上是在回调（例如一个回调函数传入的HTTP请求会触发一个级联的回调），这是用户的代码。</p>\n<h3 id=\"IO轮询\"><a href=\"#IO轮询\" class=\"headerlink\" title=\"IO轮询\"></a>IO轮询</h3><p>对下一次运行将要处理的新事件的轮询。<br>有两个主要方法：</p>\n<ul>\n<li>执行下限时间已经达到的timers的回调</li>\n<li>处理poll队列中的事件</li>\n</ul>\n<p>当事件循环进入poll阶段，并且没有timers被设定时，将发生两种情况之一：</p>\n<ul>\n<li>如果poll队列不空，事件循环将遍历其回调执行同步直到队列中的回调都被调用，或者达到系统上限。</li>\n<li>如果poll队列是空的，那么两个事件中的一个将会发生：</li>\n<li><ul>\n<li>如果脚本被setImmdiate()定时器定时，eventloop将会结束poll阶段，并进入下一个阶段</li>\n</ul>\n</li>\n<li><ul>\n<li>如果代码不被setimmediate()定时器定时，事件循环会等待回调被添加到队列中，然后立刻执行它们。</li>\n</ul>\n</li>\n</ul>\n<p>如果poll队列为空，eventloop将会检查哪些timers的已经到期。如果有一个或多个timer到期，eventloop将会回到timers阶段去执行回调。</p>\n<h3 id=\"Set-Immediate\"><a href=\"#Set-Immediate\" class=\"headerlink\" title=\"Set Immediate\"></a>Set Immediate</h3><p>运行所有由setImmediate()发起的操作。</p>\n<h3 id=\"Close\"><a href=\"#Close\" class=\"headerlink\" title=\"Close\"></a>Close</h3><p>这里是所有的(close)事件回调的处理。</p>\n<p>例如有以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncOperation</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设需要95ms</span></span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'/path/to/file'</span>, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeoutScheduled = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> delay = <span class=\"built_in\">Date</span>.now() - timeoutScheduled;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;delay&#125;</span>ms have passed since I was scheduled`</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">someAsyncOperation(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startCallback = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">Date</span>.now() - startCallback &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>console最终的输出为105毫秒，它的过程是这样的：</p>\n<ol>\n<li>当eventloop来到poll阶段时，它的队列为空，因为此时readFile还没有结束。所以它将等待最新的timer到期。</li>\n<li>95ms后，readFile结束，callback执行还需要另外的10ms。</li>\n<li>callback执行结束，因为队列中已经没有了其他的callback,它将回到timers阶段，setTimeOut()执行callback，得到105ms。</li>\n</ol>"},{"title":"143行js顶部进度条最小插件-nanobar.js源码解析","date":"2017-02-06T16:00:00.000Z","_content":"网页顶部进度条插件的有四五种，基本原理就是动态地创建一个元素，然后通过设置它的width来实现动画效果，width增长到达指定位置时，将其去掉。\n来看看nanobar.js作者[jacoborus](https://github.com/jacoborus)是怎么做到的吧！\n\n<!-- more -->\n```javascript\n/* http://nanobar.micronube.com/  ||  https://github.com/jacoborus/nanobar/    MIT LICENSE */\n(function (root) {\n  'use strict'\n  // container styles\n  var css = '.nanobar{width:100%;height:4px;z-index:9999;top:0}.bar{width:0;height:100%;transition:height .3s;background:#000}'\n\n  // add required css in head div\n  function addCss () {\n    var s = document.getElementById('nanobarcss')\n\n    // check whether style tag is already inserted\n    if (s === null) {\n      s = document.createElement('style')\n      s.type = 'text/css'\n      s.id = 'nanobarcss'\n      document.head.insertBefore(s, document.head.firstChild)\n      // the world\n      if (!s.styleSheet) return s.appendChild(document.createTextNode(css))\n      // IE\n      s.styleSheet.cssText = css\n    }\n  }\n\n  function addClass (el, cls) {\n    if (el.classList) el.classList.add(cls)\n    else el.className += ' ' + cls\n  }\n\n  // create a progress bar\n  // this will be destroyed after reaching 100% progress\n  function createBar (rm) {\n    // create progress element\n    var el = document.createElement('div'),\n        width = 0,\n        here = 0,\n        on = 0,\n        bar = {\n          el: el,\n          go: go\n        }\n\n    addClass(el, 'bar')\n\n    // animation loop\n    function move () {\n      var dist = width - here\n\n      if (dist < 0.1 && dist > -0.1) {\n        place(here)\n        on = 0\n        if (width === 100) {\n          el.style.height = 0\n          setTimeout(function () {\n            rm(el)\n          }, 300)\n        }\n      } else {\n        place(width - dist / 4)\n        setTimeout(go, 16)\n      }\n    }\n\n    // set bar width\n    function place (num) {\n      width = num\n      el.style.width = width + '%'\n    }\n\n    function go (num) {\n      if (num >= 0) {\n        here = num\n        if (!on) {\n          on = 1\n          move()\n        }\n      } else if (on) {\n        move()\n      }\n    }\n    return bar\n  }\n\n  function Nanobar (opts) {\n    opts = opts || {}\n    // set options\n    var el = document.createElement('div'),\n        applyGo,\n        nanobar = {\n          el: el,\n          go: function (p) {\n            // expand bar\n            applyGo(p)\n            // create new bar when progress reaches 100%\n            if (p === 100) {\n              init()\n            }\n          }\n        }\n\n    // remove element from nanobar container\n    function rm (child) {\n      el.removeChild(child)\n    }\n\n    // create and insert progress var in nanobar container\n    function init () {\n      var bar = createBar(rm)\n      el.appendChild(bar.el)\n      applyGo = bar.go\n    }\n\n    addCss()\n\n    addClass(el, 'nanobar')\n    if (opts.id) el.id = opts.id\n    if (opts.classname) addClass(el, opts.classname)\n\n    // insert container\n    if (opts.target) {\n      // inside a div\n      el.style.position = 'relative'\n      opts.target.insertBefore(el, opts.target.firstChild)\n    } else {\n      // on top of the page\n      el.style.position = 'fixed'\n      document.getElementsByTagName('body')[0].appendChild(el)\n    }\n\n    init()\n    return nanobar\n  }\n\n  if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = Nanobar\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () { return Nanobar })\n  } else {\n    // Browser globals\n    root.Nanobar = Nanobar\n  }\n}(this))\n```\n---\n## 大体看下来，这个插件有这样几个特点：\n\n- **dom+js原生选择器**\n- **支持模块化**\n- **es5+IIFE**\n- **不用分号派**\n\n---\n\n## 详细来看：\n\n### 在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：\n\n```javascript\n.nanobar{\nwidth:100%;\nheight:4px;\nz-index:9999;\ntop:0\n}\n\n.bar{\nwidth:0;\nheight:100%;\ntransition:height .3s;\nbackground:#000}\n```\n从css内容来看，仅有.bar有``transition:height .3s``的过渡设置，``height``过渡发生的时间应该是被删除时。在横向应该是没有动画效果，但是从官网演示效果来看，横向仍然有一定的动画效果，这个问题下面会提到。\n\n另外，引用作者原话：\n\n> Nanobar injects a style tag in your HTML head. Bar divs has class .bar, and its containers .nanobar, so you can overwrite its values.\n\n> You should know what to do with that ;)\n\n### 然后来看构造函数NanoBar：\n\nNanoBar接受一个opts作为参数，文档记载的opts详细内容如下：\n\n名称|功能\n--|--\nid|指定nanobar的id\nclassname|指定nanobar的class\ntarget|指定Nanobar的表示位置，一般对于做顶部进度条来说不到。值得一提的是，这个参数类型为*DOM Element*，你必须使用``document.getxxxxx``之类的方法为其赋值。\n\n#### 首先声明了三个变量：\n\n名称|描述\n--|--\nel|这就是动态创建的元素-一个既没有ID也没有Class的空div\napplyGo|进度条移动的方法\nnanobar|nanobar对象，它将在new构造函数时作为结果返回\n\n其中，nanobar包含这两个元素：\n\n名称|描述\n--|--\nel|上面动态创建的元素\ngo|对外开放的方法，参数为数值，那么它肯定代表了百分比而不是像素等实际物理单位\n\n此处的go处理内实质上调用的是applyGo，而applyGo此时肯定为``undefined``，所以applyGo实际上在别处赋值。这样处理的结果，相当于是一层封装，隐藏了内部实际的go方法内容。\n\n另外也可以猜测，nanobar的最简单的使用方法如下：\n```javascript\nvar nanobar = new Nanobar();\nnanobar.go(80);\n```\n#### 接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：\n\n名称|作用\n--|--\nrm|用于进度完成后，删除动态创建的元素\ninit|初始化方法，这个需要重点关注\n\n然后是一些必要处理，由这三个部分组成：\n\n1. ``addCss``方法，为``head``节点内增加``<style id=\"nanobarcss\">``节点，并把上文的css填入其中。\n2. 调用``addClass``方法，创建类名为``nanobar``的容器。需要注意的是，相比于直接操作``className``方法内调用了HTML5的新API``classList``，使用它可以像jquery的addClass、removeClass一样方便的对dom对象的class进行增加删除判断。更多信息请看[这里](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)。\n3. 接下来是对``opts``参数进行处理：\n主要是为el元素赋予id和className，根据是否指定了父容器，也就是``target``，改变容器的position，并且最终将它插入到对应的位置上。\n\n#### 接着来看init()方法：\n\n前面所有的操作，创建了一个名为``nanobar``的容器，接下来就该创建``bar``主体了。\n\n可以看到，``bar``变量内仍然和``nanobar``一样，由``el``和``go``两部分组成，``go``最终将被赋值到外层容器的``applyGo``，``el``将被作为子元素插入到外层容器的``el``内。\n\n这样，当用最简单的方式调用go时，它的顺序就是这样的：\n\n## 容器nanobar.go->applyGo->本体bar.go\n\n---\n\n#### 那么调用了go方法后，为什么横向会有一定的动画效果呢？\n\n观察一下nanobar的动作方法``go``、``move``、``place``\n\n其中的控制量有这么几个：\n\n名称|作用\n--|--\non|相当于布尔flag，标识了进度是否完成了\nhere|终点位置\ndist|与终点相比的距离\n\n实际处理流程可以这样表示：\n\n```flow\nplace(width - dist / 4) -> dist < 0.1\n-> dist = width -here -> 高度置零，删除元素\n```\n形成动画的根本原因则是这么两个原因：\n\n1. 方法``place(width - dist / 4)``对剩余空间的细分\n2. 第58紧随其后的``setTimeout(go,16)``，假设把x轴看成是16ms，把Y轴看成是每次细分的长度，将会得到一个图像类似于log2x(前期趋势大，后期趋势平稳，类似于动画函数中的``ease-out``)的表达式。中学都学过，就不再赘述了。","source":"_posts/NanoBar源代码分析.md","raw":"---\ntitle: 143行js顶部进度条最小插件-nanobar.js源码解析\ndate: 2017-2-7\ncategories:\n- 前端\n- javascript\ntags:\n- 前端\n- javascript\n- 源码\n- dom\n- nanobar\n---\n网页顶部进度条插件的有四五种，基本原理就是动态地创建一个元素，然后通过设置它的width来实现动画效果，width增长到达指定位置时，将其去掉。\n来看看nanobar.js作者[jacoborus](https://github.com/jacoborus)是怎么做到的吧！\n\n<!-- more -->\n```javascript\n/* http://nanobar.micronube.com/  ||  https://github.com/jacoborus/nanobar/    MIT LICENSE */\n(function (root) {\n  'use strict'\n  // container styles\n  var css = '.nanobar{width:100%;height:4px;z-index:9999;top:0}.bar{width:0;height:100%;transition:height .3s;background:#000}'\n\n  // add required css in head div\n  function addCss () {\n    var s = document.getElementById('nanobarcss')\n\n    // check whether style tag is already inserted\n    if (s === null) {\n      s = document.createElement('style')\n      s.type = 'text/css'\n      s.id = 'nanobarcss'\n      document.head.insertBefore(s, document.head.firstChild)\n      // the world\n      if (!s.styleSheet) return s.appendChild(document.createTextNode(css))\n      // IE\n      s.styleSheet.cssText = css\n    }\n  }\n\n  function addClass (el, cls) {\n    if (el.classList) el.classList.add(cls)\n    else el.className += ' ' + cls\n  }\n\n  // create a progress bar\n  // this will be destroyed after reaching 100% progress\n  function createBar (rm) {\n    // create progress element\n    var el = document.createElement('div'),\n        width = 0,\n        here = 0,\n        on = 0,\n        bar = {\n          el: el,\n          go: go\n        }\n\n    addClass(el, 'bar')\n\n    // animation loop\n    function move () {\n      var dist = width - here\n\n      if (dist < 0.1 && dist > -0.1) {\n        place(here)\n        on = 0\n        if (width === 100) {\n          el.style.height = 0\n          setTimeout(function () {\n            rm(el)\n          }, 300)\n        }\n      } else {\n        place(width - dist / 4)\n        setTimeout(go, 16)\n      }\n    }\n\n    // set bar width\n    function place (num) {\n      width = num\n      el.style.width = width + '%'\n    }\n\n    function go (num) {\n      if (num >= 0) {\n        here = num\n        if (!on) {\n          on = 1\n          move()\n        }\n      } else if (on) {\n        move()\n      }\n    }\n    return bar\n  }\n\n  function Nanobar (opts) {\n    opts = opts || {}\n    // set options\n    var el = document.createElement('div'),\n        applyGo,\n        nanobar = {\n          el: el,\n          go: function (p) {\n            // expand bar\n            applyGo(p)\n            // create new bar when progress reaches 100%\n            if (p === 100) {\n              init()\n            }\n          }\n        }\n\n    // remove element from nanobar container\n    function rm (child) {\n      el.removeChild(child)\n    }\n\n    // create and insert progress var in nanobar container\n    function init () {\n      var bar = createBar(rm)\n      el.appendChild(bar.el)\n      applyGo = bar.go\n    }\n\n    addCss()\n\n    addClass(el, 'nanobar')\n    if (opts.id) el.id = opts.id\n    if (opts.classname) addClass(el, opts.classname)\n\n    // insert container\n    if (opts.target) {\n      // inside a div\n      el.style.position = 'relative'\n      opts.target.insertBefore(el, opts.target.firstChild)\n    } else {\n      // on top of the page\n      el.style.position = 'fixed'\n      document.getElementsByTagName('body')[0].appendChild(el)\n    }\n\n    init()\n    return nanobar\n  }\n\n  if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = Nanobar\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () { return Nanobar })\n  } else {\n    // Browser globals\n    root.Nanobar = Nanobar\n  }\n}(this))\n```\n---\n## 大体看下来，这个插件有这样几个特点：\n\n- **dom+js原生选择器**\n- **支持模块化**\n- **es5+IIFE**\n- **不用分号派**\n\n---\n\n## 详细来看：\n\n### 在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：\n\n```javascript\n.nanobar{\nwidth:100%;\nheight:4px;\nz-index:9999;\ntop:0\n}\n\n.bar{\nwidth:0;\nheight:100%;\ntransition:height .3s;\nbackground:#000}\n```\n从css内容来看，仅有.bar有``transition:height .3s``的过渡设置，``height``过渡发生的时间应该是被删除时。在横向应该是没有动画效果，但是从官网演示效果来看，横向仍然有一定的动画效果，这个问题下面会提到。\n\n另外，引用作者原话：\n\n> Nanobar injects a style tag in your HTML head. Bar divs has class .bar, and its containers .nanobar, so you can overwrite its values.\n\n> You should know what to do with that ;)\n\n### 然后来看构造函数NanoBar：\n\nNanoBar接受一个opts作为参数，文档记载的opts详细内容如下：\n\n名称|功能\n--|--\nid|指定nanobar的id\nclassname|指定nanobar的class\ntarget|指定Nanobar的表示位置，一般对于做顶部进度条来说不到。值得一提的是，这个参数类型为*DOM Element*，你必须使用``document.getxxxxx``之类的方法为其赋值。\n\n#### 首先声明了三个变量：\n\n名称|描述\n--|--\nel|这就是动态创建的元素-一个既没有ID也没有Class的空div\napplyGo|进度条移动的方法\nnanobar|nanobar对象，它将在new构造函数时作为结果返回\n\n其中，nanobar包含这两个元素：\n\n名称|描述\n--|--\nel|上面动态创建的元素\ngo|对外开放的方法，参数为数值，那么它肯定代表了百分比而不是像素等实际物理单位\n\n此处的go处理内实质上调用的是applyGo，而applyGo此时肯定为``undefined``，所以applyGo实际上在别处赋值。这样处理的结果，相当于是一层封装，隐藏了内部实际的go方法内容。\n\n另外也可以猜测，nanobar的最简单的使用方法如下：\n```javascript\nvar nanobar = new Nanobar();\nnanobar.go(80);\n```\n#### 接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：\n\n名称|作用\n--|--\nrm|用于进度完成后，删除动态创建的元素\ninit|初始化方法，这个需要重点关注\n\n然后是一些必要处理，由这三个部分组成：\n\n1. ``addCss``方法，为``head``节点内增加``<style id=\"nanobarcss\">``节点，并把上文的css填入其中。\n2. 调用``addClass``方法，创建类名为``nanobar``的容器。需要注意的是，相比于直接操作``className``方法内调用了HTML5的新API``classList``，使用它可以像jquery的addClass、removeClass一样方便的对dom对象的class进行增加删除判断。更多信息请看[这里](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)。\n3. 接下来是对``opts``参数进行处理：\n主要是为el元素赋予id和className，根据是否指定了父容器，也就是``target``，改变容器的position，并且最终将它插入到对应的位置上。\n\n#### 接着来看init()方法：\n\n前面所有的操作，创建了一个名为``nanobar``的容器，接下来就该创建``bar``主体了。\n\n可以看到，``bar``变量内仍然和``nanobar``一样，由``el``和``go``两部分组成，``go``最终将被赋值到外层容器的``applyGo``，``el``将被作为子元素插入到外层容器的``el``内。\n\n这样，当用最简单的方式调用go时，它的顺序就是这样的：\n\n## 容器nanobar.go->applyGo->本体bar.go\n\n---\n\n#### 那么调用了go方法后，为什么横向会有一定的动画效果呢？\n\n观察一下nanobar的动作方法``go``、``move``、``place``\n\n其中的控制量有这么几个：\n\n名称|作用\n--|--\non|相当于布尔flag，标识了进度是否完成了\nhere|终点位置\ndist|与终点相比的距离\n\n实际处理流程可以这样表示：\n\n```flow\nplace(width - dist / 4) -> dist < 0.1\n-> dist = width -here -> 高度置零，删除元素\n```\n形成动画的根本原因则是这么两个原因：\n\n1. 方法``place(width - dist / 4)``对剩余空间的细分\n2. 第58紧随其后的``setTimeout(go,16)``，假设把x轴看成是16ms，把Y轴看成是每次细分的长度，将会得到一个图像类似于log2x(前期趋势大，后期趋势平稳，类似于动画函数中的``ease-out``)的表达式。中学都学过，就不再赘述了。","slug":"NanoBar源代码分析","published":1,"updated":"2018-02-28T07:55:31.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju7xv2dm009xh0ur7xhykdv7","content":"<p>网页顶部进度条插件的有四五种，基本原理就是动态地创建一个元素，然后通过设置它的width来实现动画效果，width增长到达指定位置时，将其去掉。<br>来看看nanobar.js作者<a href=\"https://github.com/jacoborus\" target=\"_blank\" rel=\"noopener\">jacoborus</a>是怎么做到的吧！</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* http://nanobar.micronube.com/  ||  https://github.com/jacoborus/nanobar/    MIT LICENSE */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span></span><br><span class=\"line\">  <span class=\"comment\">// container styles</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> css = <span class=\"string\">'.nanobar&#123;width:100%;height:4px;z-index:9999;top:0&#125;.bar&#123;width:0;height:100%;transition:height .3s;background:#000&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// add required css in head div</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCss</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'nanobarcss'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether style tag is already inserted</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      s = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'style'</span>)</span><br><span class=\"line\">      s.type = <span class=\"string\">'text/css'</span></span><br><span class=\"line\">      s.id = <span class=\"string\">'nanobarcss'</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.head.insertBefore(s, <span class=\"built_in\">document</span>.head.firstChild)</span><br><span class=\"line\">      <span class=\"comment\">// the world</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!s.styleSheet) <span class=\"keyword\">return</span> s.appendChild(<span class=\"built_in\">document</span>.createTextNode(css))</span><br><span class=\"line\">      <span class=\"comment\">// IE</span></span><br><span class=\"line\">      s.styleSheet.cssText = css</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addClass</span> (<span class=\"params\">el, cls</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (el.classList) el.classList.add(cls)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> el.className += <span class=\"string\">' '</span> + cls</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// create a progress bar</span></span><br><span class=\"line\">  <span class=\"comment\">// this will be destroyed after reaching 100% progress</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createBar</span> (<span class=\"params\">rm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// create progress element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</span><br><span class=\"line\">        width = <span class=\"number\">0</span>,</span><br><span class=\"line\">        here = <span class=\"number\">0</span>,</span><br><span class=\"line\">        on = <span class=\"number\">0</span>,</span><br><span class=\"line\">        bar = &#123;</span><br><span class=\"line\">          el: el,</span><br><span class=\"line\">          go: go</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    addClass(el, <span class=\"string\">'bar'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// animation loop</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> dist = width - here</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dist &lt; <span class=\"number\">0.1</span> &amp;&amp; dist &gt; <span class=\"number\">-0.1</span>) &#123;</span><br><span class=\"line\">        place(here)</span><br><span class=\"line\">        on = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">          el.style.height = <span class=\"number\">0</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            rm(el)</span><br><span class=\"line\">          &#125;, <span class=\"number\">300</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        place(width - dist / <span class=\"number\">4</span>)</span><br><span class=\"line\">        setTimeout(go, <span class=\"number\">16</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set bar width</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">place</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      width = num</span><br><span class=\"line\">      el.style.width = width + <span class=\"string\">'%'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">go</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (num &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        here = num</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!on) &#123;</span><br><span class=\"line\">          on = <span class=\"number\">1</span></span><br><span class=\"line\">          move()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (on) &#123;</span><br><span class=\"line\">        move()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Nanobar</span> (<span class=\"params\">opts</span>) </span>&#123;</span><br><span class=\"line\">    opts = opts || &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// set options</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</span><br><span class=\"line\">        applyGo,</span><br><span class=\"line\">        nanobar = &#123;</span><br><span class=\"line\">          el: el,</span><br><span class=\"line\">          go: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// expand bar</span></span><br><span class=\"line\">            applyGo(p)</span><br><span class=\"line\">            <span class=\"comment\">// create new bar when progress reaches 100%</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">              init()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// remove element from nanobar container</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rm</span> (<span class=\"params\">child</span>) </span>&#123;</span><br><span class=\"line\">      el.removeChild(child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// create and insert progress var in nanobar container</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> bar = createBar(rm)</span><br><span class=\"line\">      el.appendChild(bar.el)</span><br><span class=\"line\">      applyGo = bar.go</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    addCss()</span><br><span class=\"line\"></span><br><span class=\"line\">    addClass(el, <span class=\"string\">'nanobar'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.id) el.id = opts.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.classname) addClass(el, opts.classname)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert container</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.target) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// inside a div</span></span><br><span class=\"line\">      el.style.position = <span class=\"string\">'relative'</span></span><br><span class=\"line\">      opts.target.insertBefore(el, opts.target.firstChild)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// on top of the page</span></span><br><span class=\"line\">      el.style.position = <span class=\"string\">'fixed'</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].appendChild(el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nanobar</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// CommonJS</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = Nanobar</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// AMD. Register as an anonymous module.</span></span><br><span class=\"line\">    define([], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> Nanobar &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Browser globals</span></span><br><span class=\"line\">    root.Nanobar = Nanobar</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;(<span class=\"keyword\">this</span>))</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"大体看下来，这个插件有这样几个特点：\"><a href=\"#大体看下来，这个插件有这样几个特点：\" class=\"headerlink\" title=\"大体看下来，这个插件有这样几个特点：\"></a>大体看下来，这个插件有这样几个特点：</h2><ul>\n<li><strong>dom+js原生选择器</strong></li>\n<li><strong>支持模块化</strong></li>\n<li><strong>es5+IIFE</strong></li>\n<li><strong>不用分号派</strong></li>\n</ul>\n<hr>\n<h2 id=\"详细来看：\"><a href=\"#详细来看：\" class=\"headerlink\" title=\"详细来看：\"></a>详细来看：</h2><h3 id=\"在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：\"><a href=\"#在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：\" class=\"headerlink\" title=\"在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：\"></a>在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.nanobar&#123;</span><br><span class=\"line\">width:<span class=\"number\">100</span>%;</span><br><span class=\"line\">height:<span class=\"number\">4</span>px;</span><br><span class=\"line\">z-index:<span class=\"number\">9999</span>;</span><br><span class=\"line\">top:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.bar&#123;</span><br><span class=\"line\">width:<span class=\"number\">0</span>;</span><br><span class=\"line\">height:<span class=\"number\">100</span>%;</span><br><span class=\"line\">transition:height <span class=\"number\">.3</span>s;</span><br><span class=\"line\">background:#000&#125;</span><br></pre></td></tr></table></figure>\n<p>从css内容来看，仅有.bar有<code>transition:height .3s</code>的过渡设置，<code>height</code>过渡发生的时间应该是被删除时。在横向应该是没有动画效果，但是从官网演示效果来看，横向仍然有一定的动画效果，这个问题下面会提到。</p>\n<p>另外，引用作者原话：</p>\n<blockquote>\n<p>Nanobar injects a style tag in your HTML head. Bar divs has class .bar, and its containers .nanobar, so you can overwrite its values.</p>\n</blockquote>\n<blockquote>\n<p>You should know what to do with that ;)</p>\n</blockquote>\n<h3 id=\"然后来看构造函数NanoBar：\"><a href=\"#然后来看构造函数NanoBar：\" class=\"headerlink\" title=\"然后来看构造函数NanoBar：\"></a>然后来看构造函数NanoBar：</h3><p>NanoBar接受一个opts作为参数，文档记载的opts详细内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>指定nanobar的id</td>\n</tr>\n<tr>\n<td>classname</td>\n<td>指定nanobar的class</td>\n</tr>\n<tr>\n<td>target</td>\n<td>指定Nanobar的表示位置，一般对于做顶部进度条来说不到。值得一提的是，这个参数类型为<em>DOM Element</em>，你必须使用<code>document.getxxxxx</code>之类的方法为其赋值。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"首先声明了三个变量：\"><a href=\"#首先声明了三个变量：\" class=\"headerlink\" title=\"首先声明了三个变量：\"></a>首先声明了三个变量：</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>el</td>\n<td>这就是动态创建的元素-一个既没有ID也没有Class的空div</td>\n</tr>\n<tr>\n<td>applyGo</td>\n<td>进度条移动的方法</td>\n</tr>\n<tr>\n<td>nanobar</td>\n<td>nanobar对象，它将在new构造函数时作为结果返回</td>\n</tr>\n</tbody>\n</table>\n<p>其中，nanobar包含这两个元素：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>el</td>\n<td>上面动态创建的元素</td>\n</tr>\n<tr>\n<td>go</td>\n<td>对外开放的方法，参数为数值，那么它肯定代表了百分比而不是像素等实际物理单位</td>\n</tr>\n</tbody>\n</table>\n<p>此处的go处理内实质上调用的是applyGo，而applyGo此时肯定为<code>undefined</code>，所以applyGo实际上在别处赋值。这样处理的结果，相当于是一层封装，隐藏了内部实际的go方法内容。</p>\n<p>另外也可以猜测，nanobar的最简单的使用方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nanobar = <span class=\"keyword\">new</span> Nanobar();</span><br><span class=\"line\">nanobar.go(<span class=\"number\">80</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：\"><a href=\"#接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：\" class=\"headerlink\" title=\"接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：\"></a>接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rm</td>\n<td>用于进度完成后，删除动态创建的元素</td>\n</tr>\n<tr>\n<td>init</td>\n<td>初始化方法，这个需要重点关注</td>\n</tr>\n</tbody>\n</table>\n<p>然后是一些必要处理，由这三个部分组成：</p>\n<ol>\n<li><code>addCss</code>方法，为<code>head</code>节点内增加<code>&lt;style id=&quot;nanobarcss&quot;&gt;</code>节点，并把上文的css填入其中。</li>\n<li>调用<code>addClass</code>方法，创建类名为<code>nanobar</code>的容器。需要注意的是，相比于直接操作<code>className</code>方法内调用了HTML5的新API<code>classList</code>，使用它可以像jquery的addClass、removeClass一样方便的对dom对象的class进行增加删除判断。更多信息请看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\" target=\"_blank\" rel=\"noopener\">这里</a>。</li>\n<li>接下来是对<code>opts</code>参数进行处理：<br>主要是为el元素赋予id和className，根据是否指定了父容器，也就是<code>target</code>，改变容器的position，并且最终将它插入到对应的位置上。</li>\n</ol>\n<h4 id=\"接着来看init-方法：\"><a href=\"#接着来看init-方法：\" class=\"headerlink\" title=\"接着来看init()方法：\"></a>接着来看init()方法：</h4><p>前面所有的操作，创建了一个名为<code>nanobar</code>的容器，接下来就该创建<code>bar</code>主体了。</p>\n<p>可以看到，<code>bar</code>变量内仍然和<code>nanobar</code>一样，由<code>el</code>和<code>go</code>两部分组成，<code>go</code>最终将被赋值到外层容器的<code>applyGo</code>，<code>el</code>将被作为子元素插入到外层容器的<code>el</code>内。</p>\n<p>这样，当用最简单的方式调用go时，它的顺序就是这样的：</p>\n<h2 id=\"容器nanobar-go-gt-applyGo-gt-本体bar-go\"><a href=\"#容器nanobar-go-gt-applyGo-gt-本体bar-go\" class=\"headerlink\" title=\"容器nanobar.go-&gt;applyGo-&gt;本体bar.go\"></a>容器nanobar.go-&gt;applyGo-&gt;本体bar.go</h2><hr>\n<h4 id=\"那么调用了go方法后，为什么横向会有一定的动画效果呢？\"><a href=\"#那么调用了go方法后，为什么横向会有一定的动画效果呢？\" class=\"headerlink\" title=\"那么调用了go方法后，为什么横向会有一定的动画效果呢？\"></a>那么调用了go方法后，为什么横向会有一定的动画效果呢？</h4><p>观察一下nanobar的动作方法<code>go</code>、<code>move</code>、<code>place</code></p>\n<p>其中的控制量有这么几个：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>on</td>\n<td>相当于布尔flag，标识了进度是否完成了</td>\n</tr>\n<tr>\n<td>here</td>\n<td>终点位置</td>\n</tr>\n<tr>\n<td>dist</td>\n<td>与终点相比的距离</td>\n</tr>\n</tbody>\n</table>\n<p>实际处理流程可以这样表示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">place(width - dist / 4) -&gt; dist &lt; 0.1</span><br><span class=\"line\">-&gt; dist = width -here -&gt; 高度置零，删除元素</span><br></pre></td></tr></table></figure>\n<p>形成动画的根本原因则是这么两个原因：</p>\n<ol>\n<li>方法<code>place(width - dist / 4)</code>对剩余空间的细分</li>\n<li>第58紧随其后的<code>setTimeout(go,16)</code>，假设把x轴看成是16ms，把Y轴看成是每次细分的长度，将会得到一个图像类似于log2x(前期趋势大，后期趋势平稳，类似于动画函数中的<code>ease-out</code>)的表达式。中学都学过，就不再赘述了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>网页顶部进度条插件的有四五种，基本原理就是动态地创建一个元素，然后通过设置它的width来实现动画效果，width增长到达指定位置时，将其去掉。<br>来看看nanobar.js作者<a href=\"https://github.com/jacoborus\" target=\"_blank\" rel=\"noopener\">jacoborus</a>是怎么做到的吧！</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* http://nanobar.micronube.com/  ||  https://github.com/jacoborus/nanobar/    MIT LICENSE */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span></span><br><span class=\"line\">  <span class=\"comment\">// container styles</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> css = <span class=\"string\">'.nanobar&#123;width:100%;height:4px;z-index:9999;top:0&#125;.bar&#123;width:0;height:100%;transition:height .3s;background:#000&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// add required css in head div</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCss</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'nanobarcss'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether style tag is already inserted</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      s = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'style'</span>)</span><br><span class=\"line\">      s.type = <span class=\"string\">'text/css'</span></span><br><span class=\"line\">      s.id = <span class=\"string\">'nanobarcss'</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.head.insertBefore(s, <span class=\"built_in\">document</span>.head.firstChild)</span><br><span class=\"line\">      <span class=\"comment\">// the world</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!s.styleSheet) <span class=\"keyword\">return</span> s.appendChild(<span class=\"built_in\">document</span>.createTextNode(css))</span><br><span class=\"line\">      <span class=\"comment\">// IE</span></span><br><span class=\"line\">      s.styleSheet.cssText = css</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addClass</span> (<span class=\"params\">el, cls</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (el.classList) el.classList.add(cls)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> el.className += <span class=\"string\">' '</span> + cls</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// create a progress bar</span></span><br><span class=\"line\">  <span class=\"comment\">// this will be destroyed after reaching 100% progress</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createBar</span> (<span class=\"params\">rm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// create progress element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</span><br><span class=\"line\">        width = <span class=\"number\">0</span>,</span><br><span class=\"line\">        here = <span class=\"number\">0</span>,</span><br><span class=\"line\">        on = <span class=\"number\">0</span>,</span><br><span class=\"line\">        bar = &#123;</span><br><span class=\"line\">          el: el,</span><br><span class=\"line\">          go: go</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    addClass(el, <span class=\"string\">'bar'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// animation loop</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> dist = width - here</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dist &lt; <span class=\"number\">0.1</span> &amp;&amp; dist &gt; <span class=\"number\">-0.1</span>) &#123;</span><br><span class=\"line\">        place(here)</span><br><span class=\"line\">        on = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">          el.style.height = <span class=\"number\">0</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            rm(el)</span><br><span class=\"line\">          &#125;, <span class=\"number\">300</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        place(width - dist / <span class=\"number\">4</span>)</span><br><span class=\"line\">        setTimeout(go, <span class=\"number\">16</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set bar width</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">place</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      width = num</span><br><span class=\"line\">      el.style.width = width + <span class=\"string\">'%'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">go</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (num &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        here = num</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!on) &#123;</span><br><span class=\"line\">          on = <span class=\"number\">1</span></span><br><span class=\"line\">          move()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (on) &#123;</span><br><span class=\"line\">        move()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Nanobar</span> (<span class=\"params\">opts</span>) </span>&#123;</span><br><span class=\"line\">    opts = opts || &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// set options</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</span><br><span class=\"line\">        applyGo,</span><br><span class=\"line\">        nanobar = &#123;</span><br><span class=\"line\">          el: el,</span><br><span class=\"line\">          go: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// expand bar</span></span><br><span class=\"line\">            applyGo(p)</span><br><span class=\"line\">            <span class=\"comment\">// create new bar when progress reaches 100%</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">              init()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// remove element from nanobar container</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rm</span> (<span class=\"params\">child</span>) </span>&#123;</span><br><span class=\"line\">      el.removeChild(child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// create and insert progress var in nanobar container</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> bar = createBar(rm)</span><br><span class=\"line\">      el.appendChild(bar.el)</span><br><span class=\"line\">      applyGo = bar.go</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    addCss()</span><br><span class=\"line\"></span><br><span class=\"line\">    addClass(el, <span class=\"string\">'nanobar'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.id) el.id = opts.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.classname) addClass(el, opts.classname)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert container</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.target) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// inside a div</span></span><br><span class=\"line\">      el.style.position = <span class=\"string\">'relative'</span></span><br><span class=\"line\">      opts.target.insertBefore(el, opts.target.firstChild)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// on top of the page</span></span><br><span class=\"line\">      el.style.position = <span class=\"string\">'fixed'</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].appendChild(el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    init()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nanobar</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// CommonJS</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = Nanobar</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// AMD. Register as an anonymous module.</span></span><br><span class=\"line\">    define([], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> Nanobar &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Browser globals</span></span><br><span class=\"line\">    root.Nanobar = Nanobar</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;(<span class=\"keyword\">this</span>))</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"大体看下来，这个插件有这样几个特点：\"><a href=\"#大体看下来，这个插件有这样几个特点：\" class=\"headerlink\" title=\"大体看下来，这个插件有这样几个特点：\"></a>大体看下来，这个插件有这样几个特点：</h2><ul>\n<li><strong>dom+js原生选择器</strong></li>\n<li><strong>支持模块化</strong></li>\n<li><strong>es5+IIFE</strong></li>\n<li><strong>不用分号派</strong></li>\n</ul>\n<hr>\n<h2 id=\"详细来看：\"><a href=\"#详细来看：\" class=\"headerlink\" title=\"详细来看：\"></a>详细来看：</h2><h3 id=\"在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：\"><a href=\"#在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：\" class=\"headerlink\" title=\"在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：\"></a>在程序的开头，定义了必要的Css属性，包括bar（主体）和Nanobar（容器）两个class：</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.nanobar&#123;</span><br><span class=\"line\">width:<span class=\"number\">100</span>%;</span><br><span class=\"line\">height:<span class=\"number\">4</span>px;</span><br><span class=\"line\">z-index:<span class=\"number\">9999</span>;</span><br><span class=\"line\">top:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.bar&#123;</span><br><span class=\"line\">width:<span class=\"number\">0</span>;</span><br><span class=\"line\">height:<span class=\"number\">100</span>%;</span><br><span class=\"line\">transition:height <span class=\"number\">.3</span>s;</span><br><span class=\"line\">background:#000&#125;</span><br></pre></td></tr></table></figure>\n<p>从css内容来看，仅有.bar有<code>transition:height .3s</code>的过渡设置，<code>height</code>过渡发生的时间应该是被删除时。在横向应该是没有动画效果，但是从官网演示效果来看，横向仍然有一定的动画效果，这个问题下面会提到。</p>\n<p>另外，引用作者原话：</p>\n<blockquote>\n<p>Nanobar injects a style tag in your HTML head. Bar divs has class .bar, and its containers .nanobar, so you can overwrite its values.</p>\n</blockquote>\n<blockquote>\n<p>You should know what to do with that ;)</p>\n</blockquote>\n<h3 id=\"然后来看构造函数NanoBar：\"><a href=\"#然后来看构造函数NanoBar：\" class=\"headerlink\" title=\"然后来看构造函数NanoBar：\"></a>然后来看构造函数NanoBar：</h3><p>NanoBar接受一个opts作为参数，文档记载的opts详细内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>指定nanobar的id</td>\n</tr>\n<tr>\n<td>classname</td>\n<td>指定nanobar的class</td>\n</tr>\n<tr>\n<td>target</td>\n<td>指定Nanobar的表示位置，一般对于做顶部进度条来说不到。值得一提的是，这个参数类型为<em>DOM Element</em>，你必须使用<code>document.getxxxxx</code>之类的方法为其赋值。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"首先声明了三个变量：\"><a href=\"#首先声明了三个变量：\" class=\"headerlink\" title=\"首先声明了三个变量：\"></a>首先声明了三个变量：</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>el</td>\n<td>这就是动态创建的元素-一个既没有ID也没有Class的空div</td>\n</tr>\n<tr>\n<td>applyGo</td>\n<td>进度条移动的方法</td>\n</tr>\n<tr>\n<td>nanobar</td>\n<td>nanobar对象，它将在new构造函数时作为结果返回</td>\n</tr>\n</tbody>\n</table>\n<p>其中，nanobar包含这两个元素：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>el</td>\n<td>上面动态创建的元素</td>\n</tr>\n<tr>\n<td>go</td>\n<td>对外开放的方法，参数为数值，那么它肯定代表了百分比而不是像素等实际物理单位</td>\n</tr>\n</tbody>\n</table>\n<p>此处的go处理内实质上调用的是applyGo，而applyGo此时肯定为<code>undefined</code>，所以applyGo实际上在别处赋值。这样处理的结果，相当于是一层封装，隐藏了内部实际的go方法内容。</p>\n<p>另外也可以猜测，nanobar的最简单的使用方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nanobar = <span class=\"keyword\">new</span> Nanobar();</span><br><span class=\"line\">nanobar.go(<span class=\"number\">80</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：\"><a href=\"#接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：\" class=\"headerlink\" title=\"接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：\"></a>接下来，声明了两个内部函数，这两个内部函数可以访问上面提到的三个变量：</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rm</td>\n<td>用于进度完成后，删除动态创建的元素</td>\n</tr>\n<tr>\n<td>init</td>\n<td>初始化方法，这个需要重点关注</td>\n</tr>\n</tbody>\n</table>\n<p>然后是一些必要处理，由这三个部分组成：</p>\n<ol>\n<li><code>addCss</code>方法，为<code>head</code>节点内增加<code>&lt;style id=&quot;nanobarcss&quot;&gt;</code>节点，并把上文的css填入其中。</li>\n<li>调用<code>addClass</code>方法，创建类名为<code>nanobar</code>的容器。需要注意的是，相比于直接操作<code>className</code>方法内调用了HTML5的新API<code>classList</code>，使用它可以像jquery的addClass、removeClass一样方便的对dom对象的class进行增加删除判断。更多信息请看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\" target=\"_blank\" rel=\"noopener\">这里</a>。</li>\n<li>接下来是对<code>opts</code>参数进行处理：<br>主要是为el元素赋予id和className，根据是否指定了父容器，也就是<code>target</code>，改变容器的position，并且最终将它插入到对应的位置上。</li>\n</ol>\n<h4 id=\"接着来看init-方法：\"><a href=\"#接着来看init-方法：\" class=\"headerlink\" title=\"接着来看init()方法：\"></a>接着来看init()方法：</h4><p>前面所有的操作，创建了一个名为<code>nanobar</code>的容器，接下来就该创建<code>bar</code>主体了。</p>\n<p>可以看到，<code>bar</code>变量内仍然和<code>nanobar</code>一样，由<code>el</code>和<code>go</code>两部分组成，<code>go</code>最终将被赋值到外层容器的<code>applyGo</code>，<code>el</code>将被作为子元素插入到外层容器的<code>el</code>内。</p>\n<p>这样，当用最简单的方式调用go时，它的顺序就是这样的：</p>\n<h2 id=\"容器nanobar-go-gt-applyGo-gt-本体bar-go\"><a href=\"#容器nanobar-go-gt-applyGo-gt-本体bar-go\" class=\"headerlink\" title=\"容器nanobar.go-&gt;applyGo-&gt;本体bar.go\"></a>容器nanobar.go-&gt;applyGo-&gt;本体bar.go</h2><hr>\n<h4 id=\"那么调用了go方法后，为什么横向会有一定的动画效果呢？\"><a href=\"#那么调用了go方法后，为什么横向会有一定的动画效果呢？\" class=\"headerlink\" title=\"那么调用了go方法后，为什么横向会有一定的动画效果呢？\"></a>那么调用了go方法后，为什么横向会有一定的动画效果呢？</h4><p>观察一下nanobar的动作方法<code>go</code>、<code>move</code>、<code>place</code></p>\n<p>其中的控制量有这么几个：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>on</td>\n<td>相当于布尔flag，标识了进度是否完成了</td>\n</tr>\n<tr>\n<td>here</td>\n<td>终点位置</td>\n</tr>\n<tr>\n<td>dist</td>\n<td>与终点相比的距离</td>\n</tr>\n</tbody>\n</table>\n<p>实际处理流程可以这样表示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">place(width - dist / 4) -&gt; dist &lt; 0.1</span><br><span class=\"line\">-&gt; dist = width -here -&gt; 高度置零，删除元素</span><br></pre></td></tr></table></figure>\n<p>形成动画的根本原因则是这么两个原因：</p>\n<ol>\n<li>方法<code>place(width - dist / 4)</code>对剩余空间的细分</li>\n<li>第58紧随其后的<code>setTimeout(go,16)</code>，假设把x轴看成是16ms，把Y轴看成是每次细分的长度，将会得到一个图像类似于log2x(前期趋势大，后期趋势平稳，类似于动画函数中的<code>ease-out</code>)的表达式。中学都学过，就不再赘述了。</li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/阿里云乞丐版折腾ebookcoin/1.png","slug":"1.png","post":"cju7xv27o002wh0urq0xg4ejl","modified":0,"renderable":0},{"_id":"source/_posts/阿里云乞丐版折腾ebookcoin/2.png","slug":"2.png","post":"cju7xv27o002wh0urq0xg4ejl","modified":0,"renderable":0},{"_id":"source/_posts/阿里云乞丐版折腾ebookcoin/3.png","slug":"3.png","post":"cju7xv27o002wh0urq0xg4ejl","modified":0,"renderable":0},{"_id":"source/_posts/CSS清除浮动/1.jpg","slug":"1.jpg","post":"cju7xv25k0009h0urk5vbuejl","modified":0,"renderable":0},{"_id":"source/_posts/CSS清除浮动/2.jpg","slug":"2.jpg","post":"cju7xv25k0009h0urk5vbuejl","modified":0,"renderable":0},{"_id":"source/_posts/CSS清除浮动/3.jpg","slug":"3.jpg","post":"cju7xv25k0009h0urk5vbuejl","modified":0,"renderable":0},{"_id":"source/_posts/CSS清除浮动/4.jpg","slug":"4.jpg","post":"cju7xv25k0009h0urk5vbuejl","modified":0,"renderable":0},{"_id":"source/_posts/CSS居中/1.png","slug":"1.png","post":"cju7xv25h0006h0ur5tpno0q1","modified":0,"renderable":0},{"_id":"source/_posts/CSS居中/2.png","slug":"2.png","post":"cju7xv25h0006h0ur5tpno0q1","modified":0,"renderable":0},{"_id":"source/_posts/CSS居中/3.png","slug":"3.png","post":"cju7xv25h0006h0ur5tpno0q1","modified":0,"renderable":0},{"_id":"source/_posts/CSS居中/4.png","slug":"4.png","post":"cju7xv25h0006h0ur5tpno0q1","modified":0,"renderable":0},{"_id":"source/_posts/CSS居中/5.png","slug":"5.png","post":"cju7xv25h0006h0ur5tpno0q1","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cju7xv25g0005h0urzu0g58jz","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv265000rh0urean7dl70"},{"post_id":"cju7xv25g0005h0urzu0g58jz","category_id":"cju7xv25s000fh0ure3fwcbum","_id":"cju7xv267000uh0urrlgf52vm"},{"post_id":"cju7xv2510000h0urc5imew98","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv269000wh0urx50nakos"},{"post_id":"cju7xv2510000h0urc5imew98","category_id":"cju7xv25s000fh0ure3fwcbum","_id":"cju7xv26d0010h0ur63vykmtx"},{"post_id":"cju7xv25h0006h0ur5tpno0q1","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv26g0014h0urar8ul3j1"},{"post_id":"cju7xv25h0006h0ur5tpno0q1","category_id":"cju7xv265000qh0urknccwyni","_id":"cju7xv26i0018h0urn0dpts35"},{"post_id":"cju7xv25k0009h0urk5vbuejl","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv26k001bh0ur70jbvcsr"},{"post_id":"cju7xv25k0009h0urk5vbuejl","category_id":"cju7xv265000qh0urknccwyni","_id":"cju7xv26n001fh0ur7ese4yzw"},{"post_id":"cju7xv2590001h0urx69qwmk0","category_id":"cju7xv25i0007h0urbngglq14","_id":"cju7xv26q001kh0urfhyia7kk"},{"post_id":"cju7xv2590001h0urx69qwmk0","category_id":"cju7xv26f0013h0ur6v62n31q","_id":"cju7xv26t001ph0ur10g1nn3h"},{"post_id":"cju7xv25l000ah0ur3id2gw8g","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv26w001th0ur9prw34s3"},{"post_id":"cju7xv25l000ah0ur3id2gw8g","category_id":"cju7xv26l001dh0urtpvt5fyl","_id":"cju7xv26z001xh0ur0qaaeckn"},{"post_id":"cju7xv25o000dh0urff5mihmz","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv2710021h0urs1xjhkjw"},{"post_id":"cju7xv25o000dh0urff5mihmz","category_id":"cju7xv26l001dh0urtpvt5fyl","_id":"cju7xv2740025h0urjbk5bw31"},{"post_id":"cju7xv26y001vh0urlhisij1z","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv2790029h0ur9vdg2rxa"},{"post_id":"cju7xv26y001vh0urlhisij1z","category_id":"cju7xv25s000fh0ure3fwcbum","_id":"cju7xv27b002ch0ur87sl2qom"},{"post_id":"cju7xv25e0004h0urxt5w1pu3","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv27d002fh0urdowogt6u"},{"post_id":"cju7xv25e0004h0urxt5w1pu3","category_id":"cju7xv25s000fh0ure3fwcbum","_id":"cju7xv27f002ih0ur4ckyya2p"},{"post_id":"cju7xv26z001yh0urgkcyqlhn","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv27i002mh0ur5kolnas9"},{"post_id":"cju7xv26z001yh0urgkcyqlhn","category_id":"cju7xv26l001dh0urtpvt5fyl","_id":"cju7xv27l002qh0urw0ogyw6s"},{"post_id":"cju7xv25r000eh0urd97xz7u4","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv27n002th0urcfvcl82e"},{"post_id":"cju7xv25r000eh0urd97xz7u4","category_id":"cju7xv26l001dh0urtpvt5fyl","_id":"cju7xv27q002xh0urx2hdp28t"},{"post_id":"cju7xv25u000hh0urq2o67x0b","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv27s0030h0ur8n89k5j9"},{"post_id":"cju7xv25u000hh0urq2o67x0b","category_id":"cju7xv26l001dh0urtpvt5fyl","_id":"cju7xv27v0034h0urf7hcidzp"},{"post_id":"cju7xv25x000jh0urz9f3gayf","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv27w0036h0urra5nzliw"},{"post_id":"cju7xv25x000jh0urz9f3gayf","category_id":"cju7xv26l001dh0urtpvt5fyl","_id":"cju7xv27x0039h0urzvvinfqt"},{"post_id":"cju7xv27j002ph0urg5sjvjs1","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv27y003ah0urkrf3y1xd"},{"post_id":"cju7xv27j002ph0urg5sjvjs1","category_id":"cju7xv26l001dh0urtpvt5fyl","_id":"cju7xv27z003dh0urlej54fq0"},{"post_id":"cju7xv2720023h0ura6rs2ao3","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv28p004eh0urm7xq6km9"},{"post_id":"cju7xv2720023h0ura6rs2ao3","category_id":"cju7xv28l0046h0urcgiulz97","_id":"cju7xv28p004fh0ur5zij8cht"},{"post_id":"cju7xv262000nh0ur8k9ocahg","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv29b004xh0urnoxq0igc"},{"post_id":"cju7xv262000nh0ur8k9ocahg","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv29d0050h0ur5j1hdaax"},{"post_id":"cju7xv27m002sh0ur5shwscfs","category_id":"cju7xv25i0007h0urbngglq14","_id":"cju7xv29e0051h0urfu1c8iec"},{"post_id":"cju7xv27m002sh0ur5shwscfs","category_id":"cju7xv298004th0urjexml16y","_id":"cju7xv29g0054h0urxq1jmxn4"},{"post_id":"cju7xv27o002wh0urq0xg4ejl","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv29i0057h0ur209w2bs2"},{"post_id":"cju7xv27o002wh0urq0xg4ejl","category_id":"cju7xv29b004yh0urzcazzh7g","_id":"cju7xv29j005ah0ur3tul9moz"},{"post_id":"cju7xv263000ph0urzik8idc6","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv29k005dh0urss8muaur"},{"post_id":"cju7xv263000ph0urzik8idc6","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv29m005fh0urduzoehwl"},{"post_id":"cju7xv27r002zh0ur2tctgtfu","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv29n005hh0ur923dy974"},{"post_id":"cju7xv27r002zh0ur2tctgtfu","category_id":"cju7xv28l0046h0urcgiulz97","_id":"cju7xv29o005jh0urqsqs1foi"},{"post_id":"cju7xv266000th0urur06znlm","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv29p005mh0ursqruhqm7"},{"post_id":"cju7xv266000th0urur06znlm","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv29q005ph0ur7hvqfjre"},{"post_id":"cju7xv268000vh0uri2u6oluy","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv29r005sh0urhmrwplqd"},{"post_id":"cju7xv268000vh0uri2u6oluy","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv29s005uh0ur6tuogbjl"},{"post_id":"cju7xv26a000yh0url7g6ktfc","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv29t005wh0ur1pjct6yk"},{"post_id":"cju7xv26a000yh0url7g6ktfc","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv29v005yh0urodtsniew"},{"post_id":"cju7xv26e0012h0urfzf34vdx","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv29x0061h0ury1objq24"},{"post_id":"cju7xv26e0012h0urfzf34vdx","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv2a00064h0urszvma9ha"},{"post_id":"cju7xv26h0016h0urj4b7wqma","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2a20067h0urrrpodouk"},{"post_id":"cju7xv26h0016h0urj4b7wqma","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv2a40069h0ur7tgj2jt9"},{"post_id":"cju7xv26j001ah0urqev91fos","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2a5006bh0ursfifi97m"},{"post_id":"cju7xv26j001ah0urqev91fos","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv2ab006dh0ur9csp63up"},{"post_id":"cju7xv26k001ch0uron2fyk3d","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ae006gh0urh1t9cjet"},{"post_id":"cju7xv26k001ch0uron2fyk3d","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv2ag006jh0ur6ricslgi"},{"post_id":"cju7xv26n001hh0ur9ef55ipu","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ah006lh0urf0dsq2nu"},{"post_id":"cju7xv26n001hh0ur9ef55ipu","category_id":"cju7xv296004qh0ur6pbkp1hw","_id":"cju7xv2ak006oh0urdfgvlsgm"},{"post_id":"cju7xv26p001jh0urab3obrem","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ak006ph0urswrzwr1b"},{"post_id":"cju7xv26p001jh0urab3obrem","category_id":"cju7xv2ad006fh0urojjialoz","_id":"cju7xv2am006th0ur2quoix1e"},{"post_id":"cju7xv26s001oh0ur5xkg5f4l","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2an006wh0urn2jibm7z"},{"post_id":"cju7xv26s001oh0ur5xkg5f4l","category_id":"cju7xv2ai006mh0urmo8nvjuj","_id":"cju7xv2ao006zh0urb040fj76"},{"post_id":"cju7xv26u001rh0urxooq4it2","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ap0071h0urcblrq88g"},{"post_id":"cju7xv26u001rh0urxooq4it2","category_id":"cju7xv2al006rh0urlb9trvzu","_id":"cju7xv2aq0073h0urhboirrb4"},{"post_id":"cju7xv2740026h0uroewhzfw3","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ar0076h0urq7xt53en"},{"post_id":"cju7xv2740026h0uroewhzfw3","category_id":"cju7xv2an006xh0uri41kn495","_id":"cju7xv2as0078h0urudjod3tz"},{"post_id":"cju7xv27a002bh0urya8w3fxn","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2at007ch0ur8ad7x6vf"},{"post_id":"cju7xv27a002bh0urya8w3fxn","category_id":"cju7xv2an006xh0uri41kn495","_id":"cju7xv2au007eh0urikmvwutd"},{"post_id":"cju7xv27b002dh0ur4d8x9cqm","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2av007hh0urjb2c2zqz"},{"post_id":"cju7xv27b002dh0ur4d8x9cqm","category_id":"cju7xv2an006xh0uri41kn495","_id":"cju7xv2aw007jh0ur65t4m89u"},{"post_id":"cju7xv27e002hh0ur4qaejnuo","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ax007mh0urgl0relu4"},{"post_id":"cju7xv27e002hh0ur4qaejnuo","category_id":"cju7xv2an006xh0uri41kn495","_id":"cju7xv2ax007nh0urwxr460jb"},{"post_id":"cju7xv27g002kh0urf46c0aei","category_id":"cju7xv27h002lh0urofo7ndmj","_id":"cju7xv2ay007ph0urrb8pn4xw"},{"post_id":"cju7xv27g002kh0urf46c0aei","category_id":"cju7xv2an006xh0uri41kn495","_id":"cju7xv2b0007rh0urey3ccj2l"},{"post_id":"cju7xv2dm009xh0ur7xhykdv7","category_id":"cju7xv25c0002h0urdrqpr6hf","_id":"cju7xv2ds00a1h0uryucqbe57"},{"post_id":"cju7xv2dm009xh0ur7xhykdv7","category_id":"cju7xv2dq009zh0ur70n0rpdr","_id":"cju7xv2dt00a3h0ur3j5h6552"}],"PostTag":[{"post_id":"cju7xv2510000h0urc5imew98","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv25w000ih0urojrmlqcl"},{"post_id":"cju7xv2510000h0urc5imew98","tag_id":"cju7xv25j0008h0urwx74fqsy","_id":"cju7xv260000kh0urs1o8okzl"},{"post_id":"cju7xv2510000h0urc5imew98","tag_id":"cju7xv25m000ch0ur2631axhi","_id":"cju7xv263000oh0urwdd88fq9"},{"post_id":"cju7xv2590001h0urx69qwmk0","tag_id":"cju7xv25t000gh0urhazu0i05","_id":"cju7xv26d0011h0urgp5qrdyn"},{"post_id":"cju7xv2590001h0urx69qwmk0","tag_id":"cju7xv25j0008h0urwx74fqsy","_id":"cju7xv26g0015h0urckyfjffk"},{"post_id":"cju7xv2590001h0urx69qwmk0","tag_id":"cju7xv266000sh0ur89l24rpo","_id":"cju7xv26j0019h0urfluo84tz"},{"post_id":"cju7xv25e0004h0urxt5w1pu3","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv26n001gh0uruwqcihh3"},{"post_id":"cju7xv25e0004h0urxt5w1pu3","tag_id":"cju7xv25j0008h0urwx74fqsy","_id":"cju7xv26p001ih0urssyn4nme"},{"post_id":"cju7xv25g0005h0urzu0g58jz","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv26s001nh0ur4hae207s"},{"post_id":"cju7xv25g0005h0urzu0g58jz","tag_id":"cju7xv25j0008h0urwx74fqsy","_id":"cju7xv26u001qh0uryajogat3"},{"post_id":"cju7xv25h0006h0ur5tpno0q1","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv26z001wh0urfgaa27nl"},{"post_id":"cju7xv25h0006h0ur5tpno0q1","tag_id":"cju7xv26r001lh0urbonh7c55","_id":"cju7xv270001zh0urbvkw1dgw"},{"post_id":"cju7xv25k0009h0urk5vbuejl","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv2730024h0url6e7d4fc"},{"post_id":"cju7xv25k0009h0urk5vbuejl","tag_id":"cju7xv26r001lh0urbonh7c55","_id":"cju7xv2780027h0ur4qy88s0g"},{"post_id":"cju7xv25l000ah0ur3id2gw8g","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv27g002jh0urk3f6rdxk"},{"post_id":"cju7xv25l000ah0ur3id2gw8g","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv27i002nh0uraj88ye2k"},{"post_id":"cju7xv25l000ah0ur3id2gw8g","tag_id":"cju7xv279002ah0urbhtefltw","_id":"cju7xv27l002rh0urmvze8g82"},{"post_id":"cju7xv25o000dh0urff5mihmz","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv27q002yh0ur871z1vvm"},{"post_id":"cju7xv25o000dh0urff5mihmz","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv27t0032h0urqwnexr8p"},{"post_id":"cju7xv25o000dh0urff5mihmz","tag_id":"cju7xv279002ah0urbhtefltw","_id":"cju7xv27w0035h0ur9pn6np9d"},{"post_id":"cju7xv25r000eh0urd97xz7u4","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv280003eh0ur63kdoqej"},{"post_id":"cju7xv25r000eh0urd97xz7u4","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv282003gh0urj47y7tho"},{"post_id":"cju7xv25r000eh0urd97xz7u4","tag_id":"cju7xv279002ah0urbhtefltw","_id":"cju7xv284003ih0ur1jerhyw2"},{"post_id":"cju7xv25r000eh0urd97xz7u4","tag_id":"cju7xv27x0038h0ur88sj10p0","_id":"cju7xv286003kh0urm4hf1nyi"},{"post_id":"cju7xv25u000hh0urq2o67x0b","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv287003mh0ur66gbj5if"},{"post_id":"cju7xv25u000hh0urq2o67x0b","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv288003oh0url8d5zwp9"},{"post_id":"cju7xv25u000hh0urq2o67x0b","tag_id":"cju7xv279002ah0urbhtefltw","_id":"cju7xv289003qh0urlih9ar1x"},{"post_id":"cju7xv25x000jh0urz9f3gayf","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv28b003th0ursxyfxg1g"},{"post_id":"cju7xv25x000jh0urz9f3gayf","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv28c003vh0ururmr5t0f"},{"post_id":"cju7xv25x000jh0urz9f3gayf","tag_id":"cju7xv279002ah0urbhtefltw","_id":"cju7xv28d003xh0urlac30wum"},{"post_id":"cju7xv262000nh0ur8k9ocahg","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv28g0040h0urbpax3xqd"},{"post_id":"cju7xv262000nh0ur8k9ocahg","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv28j0042h0urtbynvkmo"},{"post_id":"cju7xv263000ph0urzik8idc6","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv28m0048h0ur0e4t7uah"},{"post_id":"cju7xv263000ph0urzik8idc6","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv28n004ah0urxre0ahnz"},{"post_id":"cju7xv263000ph0urzik8idc6","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv28o004ch0ur19np54uq"},{"post_id":"cju7xv266000th0urur06znlm","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv28u004jh0ur19evksmg"},{"post_id":"cju7xv266000th0urur06znlm","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv290004lh0uric47tdo3"},{"post_id":"cju7xv266000th0urur06znlm","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv293004nh0urw34mmgtw"},{"post_id":"cju7xv268000vh0uri2u6oluy","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv298004sh0ur1b0ba7mg"},{"post_id":"cju7xv268000vh0uri2u6oluy","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv299004uh0ur3u6tam6r"},{"post_id":"cju7xv268000vh0uri2u6oluy","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv29b004wh0ury09eopq7"},{"post_id":"cju7xv26a000yh0url7g6ktfc","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv29h0055h0ur4adsmstl"},{"post_id":"cju7xv26a000yh0url7g6ktfc","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv29i0058h0ur62l1w4k2"},{"post_id":"cju7xv26a000yh0url7g6ktfc","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv29k005bh0urtqfdzqtr"},{"post_id":"cju7xv26e0012h0urfzf34vdx","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv29o005kh0urjfp1gmzo"},{"post_id":"cju7xv26e0012h0urfzf34vdx","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv29p005nh0ur0raxresn"},{"post_id":"cju7xv26e0012h0urfzf34vdx","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv29q005qh0urtbru8xqe"},{"post_id":"cju7xv26h0016h0urj4b7wqma","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv29w005zh0urdafsljwy"},{"post_id":"cju7xv26h0016h0urj4b7wqma","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv29y0062h0ur5rmljzsr"},{"post_id":"cju7xv26h0016h0urj4b7wqma","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv2a00065h0ur1puborss"},{"post_id":"cju7xv26j001ah0urqev91fos","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2ac006eh0urm2ipp6oi"},{"post_id":"cju7xv26j001ah0urqev91fos","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv2ae006hh0urgozogszx"},{"post_id":"cju7xv26j001ah0urqev91fos","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv2ah006kh0urdn3y4rqr"},{"post_id":"cju7xv26k001ch0uron2fyk3d","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2am006sh0urj2739rph"},{"post_id":"cju7xv26k001ch0uron2fyk3d","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv2am006uh0urtdaygde3"},{"post_id":"cju7xv26k001ch0uron2fyk3d","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv2ao006yh0urxknwx8of"},{"post_id":"cju7xv26n001hh0ur9ef55ipu","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2ar0077h0urqdvb7nw9"},{"post_id":"cju7xv26n001hh0ur9ef55ipu","tag_id":"cju7xv28c003wh0ursgj3n1ti","_id":"cju7xv2as0079h0urqna9o9xq"},{"post_id":"cju7xv26n001hh0ur9ef55ipu","tag_id":"cju7xv28k0045h0ur0a0a6xax","_id":"cju7xv2au007dh0urswcevtmy"},{"post_id":"cju7xv26p001jh0urab3obrem","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2aw007ih0urqdtasjb3"},{"post_id":"cju7xv26p001jh0urab3obrem","tag_id":"cju7xv2at007ah0urpipnj7d4","_id":"cju7xv2aw007kh0urci1p8mk2"},{"post_id":"cju7xv26s001oh0ur5xkg5f4l","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2ay007qh0ur2532vznh"},{"post_id":"cju7xv26s001oh0ur5xkg5f4l","tag_id":"cju7xv2aw007lh0ur80xi302j","_id":"cju7xv2b0007sh0urx01lr13c"},{"post_id":"cju7xv26u001rh0urxooq4it2","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2b2007wh0urdtghcjkn"},{"post_id":"cju7xv26u001rh0urxooq4it2","tag_id":"cju7xv2b1007th0urnv1gi3ku","_id":"cju7xv2b3007xh0urko4tgszh"},{"post_id":"cju7xv26u001rh0urxooq4it2","tag_id":"cju7xv2b1007uh0ur7ltjiyr5","_id":"cju7xv2b3007zh0urkpg2f6lr"},{"post_id":"cju7xv26y001vh0urlhisij1z","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv2b50081h0urvab8dl7h"},{"post_id":"cju7xv26y001vh0urlhisij1z","tag_id":"cju7xv2b2007vh0urfcvtyo9d","_id":"cju7xv2b50082h0ur6c65x0my"},{"post_id":"cju7xv26y001vh0urlhisij1z","tag_id":"cju7xv2b3007yh0urg6xtf51a","_id":"cju7xv2b70084h0ur6qge4y3b"},{"post_id":"cju7xv26z001yh0urgkcyqlhn","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv2b90088h0urzad8p5l5"},{"post_id":"cju7xv26z001yh0urgkcyqlhn","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2ba0089h0ur90pdjnvi"},{"post_id":"cju7xv26z001yh0urgkcyqlhn","tag_id":"cju7xv279002ah0urbhtefltw","_id":"cju7xv2bc008bh0ur49mq89z1"},{"post_id":"cju7xv26z001yh0urgkcyqlhn","tag_id":"cju7xv27x0038h0ur88sj10p0","_id":"cju7xv2bc008ch0ur3vm6ze0r"},{"post_id":"cju7xv26z001yh0urgkcyqlhn","tag_id":"cju7xv2b80086h0urg4qflvt9","_id":"cju7xv2be008eh0ur48u519yh"},{"post_id":"cju7xv2720023h0ura6rs2ao3","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv2be008fh0urkmxb719f"},{"post_id":"cju7xv2720023h0ura6rs2ao3","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2bg008hh0urb5fk2429"},{"post_id":"cju7xv2720023h0ura6rs2ao3","tag_id":"cju7xv2b90087h0urdihonkh4","_id":"cju7xv2bh008ih0urqzjlv5y9"},{"post_id":"cju7xv2740026h0uroewhzfw3","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2bi008kh0urj5u240iq"},{"post_id":"cju7xv2740026h0uroewhzfw3","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2bi008lh0urzj8oeoi1"},{"post_id":"cju7xv2740026h0uroewhzfw3","tag_id":"cju7xv2bd008dh0urgfahj1gi","_id":"cju7xv2bj008nh0ur5aaahzbv"},{"post_id":"cju7xv27a002bh0urya8w3fxn","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2bk008oh0urqpd8jlws"},{"post_id":"cju7xv27a002bh0urya8w3fxn","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2bl008qh0ur5ixo9tmj"},{"post_id":"cju7xv27a002bh0urya8w3fxn","tag_id":"cju7xv2bd008dh0urgfahj1gi","_id":"cju7xv2bl008rh0ur7ofujt1x"},{"post_id":"cju7xv27b002dh0ur4d8x9cqm","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2bn008th0uruom7t7ay"},{"post_id":"cju7xv27b002dh0ur4d8x9cqm","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2bo008uh0ur5fkhjt3k"},{"post_id":"cju7xv27b002dh0ur4d8x9cqm","tag_id":"cju7xv2bd008dh0urgfahj1gi","_id":"cju7xv2bp008wh0ur3nmucm4d"},{"post_id":"cju7xv27e002hh0ur4qaejnuo","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2br008yh0urfvxoa40p"},{"post_id":"cju7xv27e002hh0ur4qaejnuo","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2bs008zh0urmxnlru82"},{"post_id":"cju7xv27e002hh0ur4qaejnuo","tag_id":"cju7xv2bd008dh0urgfahj1gi","_id":"cju7xv2bu0091h0urkbpruijd"},{"post_id":"cju7xv27g002kh0urf46c0aei","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2bu0093h0ur28zvp20r"},{"post_id":"cju7xv27g002kh0urf46c0aei","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2bv0094h0urufj9oor8"},{"post_id":"cju7xv27g002kh0urf46c0aei","tag_id":"cju7xv2bd008dh0urgfahj1gi","_id":"cju7xv2bv0096h0ur91jk7eea"},{"post_id":"cju7xv27j002ph0urg5sjvjs1","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv2bw0098h0ur3l1q3hfk"},{"post_id":"cju7xv27j002ph0urg5sjvjs1","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2bw0099h0urke2jvji8"},{"post_id":"cju7xv27j002ph0urg5sjvjs1","tag_id":"cju7xv2bu0092h0urqlnlr6vh","_id":"cju7xv2bx009bh0urfwqw61e1"},{"post_id":"cju7xv27j002ph0urg5sjvjs1","tag_id":"cju7xv2bv0095h0urazs9hik1","_id":"cju7xv2bx009ch0urh4py8mo0"},{"post_id":"cju7xv27m002sh0ur5shwscfs","tag_id":"cju7xv25t000gh0urhazu0i05","_id":"cju7xv2bz009fh0ur2u4epd0r"},{"post_id":"cju7xv27m002sh0ur5shwscfs","tag_id":"cju7xv2bv0097h0urm0w3ns1g","_id":"cju7xv2bz009gh0urpvgprf8n"},{"post_id":"cju7xv27m002sh0ur5shwscfs","tag_id":"cju7xv2bx009ah0urnlx8ju54","_id":"cju7xv2c0009ih0urmbwcwl58"},{"post_id":"cju7xv27m002sh0ur5shwscfs","tag_id":"cju7xv2b90087h0urdihonkh4","_id":"cju7xv2c1009jh0ur4zvq1ybs"},{"post_id":"cju7xv27m002sh0ur5shwscfs","tag_id":"cju7xv25j0008h0urwx74fqsy","_id":"cju7xv2c7009lh0urkx560pj4"},{"post_id":"cju7xv27o002wh0urq0xg4ejl","tag_id":"cju7xv28a003sh0ur4m27ilmo","_id":"cju7xv2c8009oh0urbczungto"},{"post_id":"cju7xv27o002wh0urq0xg4ejl","tag_id":"cju7xv2c0009hh0urzgyuhpqe","_id":"cju7xv2c8009ph0urdgbxos4h"},{"post_id":"cju7xv27o002wh0urq0xg4ejl","tag_id":"cju7xv2b90087h0urdihonkh4","_id":"cju7xv2c9009rh0urldwy55vk"},{"post_id":"cju7xv27o002wh0urq0xg4ejl","tag_id":"cju7xv2c7009mh0urmof1gnrm","_id":"cju7xv2c9009sh0urzm50p8rc"},{"post_id":"cju7xv27r002zh0ur2tctgtfu","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv2c9009th0urlzkxdivq"},{"post_id":"cju7xv27r002zh0ur2tctgtfu","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2ca009uh0urgc461fnt"},{"post_id":"cju7xv27r002zh0ur2tctgtfu","tag_id":"cju7xv2b90087h0urdihonkh4","_id":"cju7xv2ca009vh0urb3det5na"},{"post_id":"cju7xv27r002zh0ur2tctgtfu","tag_id":"cju7xv2c9009qh0ur4nol6jpe","_id":"cju7xv2ca009wh0urn1dubak4"},{"post_id":"cju7xv2dm009xh0ur7xhykdv7","tag_id":"cju7xv25e0003h0ur7k4rdcyv","_id":"cju7xv2ds00a2h0urcai19hgl"},{"post_id":"cju7xv2dm009xh0ur7xhykdv7","tag_id":"cju7xv2710022h0urg258lrvv","_id":"cju7xv2dt00a4h0ursmh2hb8z"},{"post_id":"cju7xv2dm009xh0ur7xhykdv7","tag_id":"cju7xv2b2007vh0urfcvtyo9d","_id":"cju7xv2dt00a5h0ur6r1dp3av"},{"post_id":"cju7xv2dm009xh0ur7xhykdv7","tag_id":"cju7xv2dq009yh0ur363hpt2n","_id":"cju7xv2dt00a6h0urym6w2vu6"},{"post_id":"cju7xv2dm009xh0ur7xhykdv7","tag_id":"cju7xv2dr00a0h0urcanvztii","_id":"cju7xv2dt00a7h0uruvhcqr03"}],"Tag":[{"name":"前端","_id":"cju7xv25e0003h0ur7k4rdcyv"},{"name":"angular","_id":"cju7xv25j0008h0urwx74fqsy"},{"name":"ng-zorro","_id":"cju7xv25m000ch0ur2631axhi"},{"name":"全栈","_id":"cju7xv25t000gh0urhazu0i05"},{"name":"jwt","_id":"cju7xv266000sh0ur89l24rpo"},{"name":"CSS","_id":"cju7xv26r001lh0urbonh7c55"},{"name":"javascript","_id":"cju7xv2710022h0urg258lrvv"},{"name":"ES6","_id":"cju7xv279002ah0urbhtefltw"},{"name":"Promise","_id":"cju7xv27x0038h0ur88sj10p0"},{"name":"后端","_id":"cju7xv28a003sh0ur4m27ilmo"},{"name":"JAVA","_id":"cju7xv28c003wh0ursgj3n1ti"},{"name":"并发","_id":"cju7xv28k0045h0ur0a0a6xax"},{"name":"MySQL","_id":"cju7xv2at007ah0urpipnj7d4"},{"name":"Redis","_id":"cju7xv2aw007lh0ur80xi302j"},{"name":"spring","_id":"cju7xv2b1007th0urnv1gi3ku"},{"name":"redis","_id":"cju7xv2b1007uh0ur7ltjiyr5"},{"name":"源码","_id":"cju7xv2b2007vh0urfcvtyo9d"},{"name":"ng-alain","_id":"cju7xv2b3007yh0urg6xtf51a"},{"name":"async/await","_id":"cju7xv2b80086h0urg4qflvt9"},{"name":"nodejs","_id":"cju7xv2b90087h0urdihonkh4"},{"name":"sequelizejs","_id":"cju7xv2bd008dh0urgfahj1gi"},{"name":"amd","_id":"cju7xv2bu0092h0urqlnlr6vh"},{"name":"commonjs","_id":"cju7xv2bv0095h0urazs9hik1"},{"name":"mongodb","_id":"cju7xv2bv0097h0urm0w3ns1g"},{"name":"mongoose","_id":"cju7xv2bx009ah0urnlx8ju54"},{"name":"区块链","_id":"cju7xv2c0009hh0urzgyuhpqe"},{"name":"ebookcoin","_id":"cju7xv2c7009mh0urmof1gnrm"},{"name":"eventloop","_id":"cju7xv2c9009qh0ur4nol6jpe"},{"name":"dom","_id":"cju7xv2dq009yh0ur363hpt2n"},{"name":"nanobar","_id":"cju7xv2dr00a0h0urcanvztii"}]}}